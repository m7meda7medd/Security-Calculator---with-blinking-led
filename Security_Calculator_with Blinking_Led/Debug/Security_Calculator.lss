
Security_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004188  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000019a  00800060  00004188  0000421c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000031  008001fa  008001fa  000043b6  2**0
                  ALLOC
  3 .stab         000030a8  00000000  00000000  000043b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001826  00000000  00000000  00007460  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00008c86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000020e  00000000  00000000  00008e46  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000268b  00000000  00000000  00009054  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014d1  00000000  00000000  0000b6df  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000012ab  00000000  00000000  0000cbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000de5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002fb  00000000  00000000  0000e03c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a0a  00000000  00000000  0000e337  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ed41  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_1>
       8:	0c 94 26 08 	jmp	0x104c	; 0x104c <__vector_2>
       c:	0c 94 36 08 	jmp	0x106c	; 0x106c <__vector_3>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__ltsf2+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d4 e0       	ldi	r29, 0x04	; 4
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e8 e8       	ldi	r30, 0x88	; 136
     162:	f1 e4       	ldi	r31, 0x41	; 65
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	aa 3f       	cpi	r26, 0xFA	; 250
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	12 e0       	ldi	r17, 0x02	; 2
     172:	aa ef       	ldi	r26, 0xFA	; 250
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ab 32       	cpi	r26, 0x2B	; 43
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 f6 1d 	call	0x3bec	; 0x3bec <main>
     184:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 a2 04 	call	0x944	; 0x944 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 60 05 	call	0xac0	; 0xac0 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <__stack+0x11>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <__stack+0xf>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <__stack+0x11>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <__stack+0x11>
     220:	ac ed       	ldi	r26, 0xDC	; 220
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <__stack+0x11>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <__stack+0xf>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <__stack+0x11>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <__stack+0xb>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <__stack+0xf>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <__stack+0xb>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <__stack+0x11>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 03 1e 	jmp	0x3c06	; 0x3c06 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	8c ed       	ldi	r24, 0xDC	; 220
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 1f 1e 	jmp	0x3c3e	; 0x3c3e <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 0b 1e 	jmp	0x3c16	; 0x3c16 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__divsf3+0x144>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__divsf3+0x14a>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__divsf3+0x144>
     794:	6c ed       	ldi	r22, 0xDC	; 220
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__divsf3+0x14a>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__divsf3+0x14a>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__divsf3+0x13c>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__divsf3+0x13c>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__divsf3+0x13c>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 27 1e 	jmp	0x3c4e	; 0x3c4e <__epilogue_restores__+0x10>

00000884 <__nesf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__nesf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__nesf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__nesf2+0x58>
     8da:	81 e0       	ldi	r24, 0x01	; 1
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x18>

000008e4 <__gtsf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gtsf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gtsf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gtsf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x18>

00000944 <__gesf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__gesf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__gesf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__gesf2+0x58>
     99a:	8f ef       	ldi	r24, 0xFF	; 255
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x18>

000009a4 <__ltsf2>:
     9a4:	a8 e1       	ldi	r26, 0x18	; 24
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 0f 1e 	jmp	0x3c1e	; 0x3c1e <__prologue_saves__+0x18>
     9b0:	69 83       	std	Y+1, r22	; 0x01
     9b2:	7a 83       	std	Y+2, r23	; 0x02
     9b4:	8b 83       	std	Y+3, r24	; 0x03
     9b6:	9c 83       	std	Y+4, r25	; 0x04
     9b8:	2d 83       	std	Y+5, r18	; 0x05
     9ba:	3e 83       	std	Y+6, r19	; 0x06
     9bc:	4f 83       	std	Y+7, r20	; 0x07
     9be:	58 87       	std	Y+8, r21	; 0x08
     9c0:	89 e0       	ldi	r24, 0x09	; 9
     9c2:	e8 2e       	mov	r14, r24
     9c4:	f1 2c       	mov	r15, r1
     9c6:	ec 0e       	add	r14, r28
     9c8:	fd 1e       	adc	r15, r29
     9ca:	ce 01       	movw	r24, r28
     9cc:	01 96       	adiw	r24, 0x01	; 1
     9ce:	b7 01       	movw	r22, r14
     9d0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9d4:	8e 01       	movw	r16, r28
     9d6:	0f 5e       	subi	r16, 0xEF	; 239
     9d8:	1f 4f       	sbci	r17, 0xFF	; 255
     9da:	ce 01       	movw	r24, r28
     9dc:	05 96       	adiw	r24, 0x05	; 5
     9de:	b8 01       	movw	r22, r16
     9e0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     9e4:	89 85       	ldd	r24, Y+9	; 0x09
     9e6:	82 30       	cpi	r24, 0x02	; 2
     9e8:	40 f0       	brcs	.+16     	; 0x9fa <__ltsf2+0x56>
     9ea:	89 89       	ldd	r24, Y+17	; 0x11
     9ec:	82 30       	cpi	r24, 0x02	; 2
     9ee:	28 f0       	brcs	.+10     	; 0x9fa <__ltsf2+0x56>
     9f0:	c7 01       	movw	r24, r14
     9f2:	b8 01       	movw	r22, r16
     9f4:	0e 94 50 07 	call	0xea0	; 0xea0 <__fpcmp_parts_f>
     9f8:	01 c0       	rjmp	.+2      	; 0x9fc <__ltsf2+0x58>
     9fa:	81 e0       	ldi	r24, 0x01	; 1
     9fc:	68 96       	adiw	r28, 0x18	; 24
     9fe:	e6 e0       	ldi	r30, 0x06	; 6
     a00:	0c 94 2b 1e 	jmp	0x3c56	; 0x3c56 <__epilogue_restores__+0x18>

00000a04 <__floatsisf>:
     a04:	a8 e0       	ldi	r26, 0x08	; 8
     a06:	b0 e0       	ldi	r27, 0x00	; 0
     a08:	e8 e0       	ldi	r30, 0x08	; 8
     a0a:	f5 e0       	ldi	r31, 0x05	; 5
     a0c:	0c 94 0c 1e 	jmp	0x3c18	; 0x3c18 <__prologue_saves__+0x12>
     a10:	9b 01       	movw	r18, r22
     a12:	ac 01       	movw	r20, r24
     a14:	83 e0       	ldi	r24, 0x03	; 3
     a16:	89 83       	std	Y+1, r24	; 0x01
     a18:	da 01       	movw	r26, r20
     a1a:	c9 01       	movw	r24, r18
     a1c:	88 27       	eor	r24, r24
     a1e:	b7 fd       	sbrc	r27, 7
     a20:	83 95       	inc	r24
     a22:	99 27       	eor	r25, r25
     a24:	aa 27       	eor	r26, r26
     a26:	bb 27       	eor	r27, r27
     a28:	b8 2e       	mov	r11, r24
     a2a:	21 15       	cp	r18, r1
     a2c:	31 05       	cpc	r19, r1
     a2e:	41 05       	cpc	r20, r1
     a30:	51 05       	cpc	r21, r1
     a32:	19 f4       	brne	.+6      	; 0xa3a <__floatsisf+0x36>
     a34:	82 e0       	ldi	r24, 0x02	; 2
     a36:	89 83       	std	Y+1, r24	; 0x01
     a38:	3a c0       	rjmp	.+116    	; 0xaae <__floatsisf+0xaa>
     a3a:	88 23       	and	r24, r24
     a3c:	a9 f0       	breq	.+42     	; 0xa68 <__floatsisf+0x64>
     a3e:	20 30       	cpi	r18, 0x00	; 0
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	38 07       	cpc	r19, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	48 07       	cpc	r20, r24
     a48:	80 e8       	ldi	r24, 0x80	; 128
     a4a:	58 07       	cpc	r21, r24
     a4c:	29 f4       	brne	.+10     	; 0xa58 <__floatsisf+0x54>
     a4e:	60 e0       	ldi	r22, 0x00	; 0
     a50:	70 e0       	ldi	r23, 0x00	; 0
     a52:	80 e0       	ldi	r24, 0x00	; 0
     a54:	9f ec       	ldi	r25, 0xCF	; 207
     a56:	30 c0       	rjmp	.+96     	; 0xab8 <__floatsisf+0xb4>
     a58:	ee 24       	eor	r14, r14
     a5a:	ff 24       	eor	r15, r15
     a5c:	87 01       	movw	r16, r14
     a5e:	e2 1a       	sub	r14, r18
     a60:	f3 0a       	sbc	r15, r19
     a62:	04 0b       	sbc	r16, r20
     a64:	15 0b       	sbc	r17, r21
     a66:	02 c0       	rjmp	.+4      	; 0xa6c <__floatsisf+0x68>
     a68:	79 01       	movw	r14, r18
     a6a:	8a 01       	movw	r16, r20
     a6c:	8e e1       	ldi	r24, 0x1E	; 30
     a6e:	c8 2e       	mov	r12, r24
     a70:	d1 2c       	mov	r13, r1
     a72:	dc 82       	std	Y+4, r13	; 0x04
     a74:	cb 82       	std	Y+3, r12	; 0x03
     a76:	ed 82       	std	Y+5, r14	; 0x05
     a78:	fe 82       	std	Y+6, r15	; 0x06
     a7a:	0f 83       	std	Y+7, r16	; 0x07
     a7c:	18 87       	std	Y+8, r17	; 0x08
     a7e:	c8 01       	movw	r24, r16
     a80:	b7 01       	movw	r22, r14
     a82:	0e 94 b4 05 	call	0xb68	; 0xb68 <__clzsi2>
     a86:	01 97       	sbiw	r24, 0x01	; 1
     a88:	18 16       	cp	r1, r24
     a8a:	19 06       	cpc	r1, r25
     a8c:	84 f4       	brge	.+32     	; 0xaae <__floatsisf+0xaa>
     a8e:	08 2e       	mov	r0, r24
     a90:	04 c0       	rjmp	.+8      	; 0xa9a <__floatsisf+0x96>
     a92:	ee 0c       	add	r14, r14
     a94:	ff 1c       	adc	r15, r15
     a96:	00 1f       	adc	r16, r16
     a98:	11 1f       	adc	r17, r17
     a9a:	0a 94       	dec	r0
     a9c:	d2 f7       	brpl	.-12     	; 0xa92 <__floatsisf+0x8e>
     a9e:	ed 82       	std	Y+5, r14	; 0x05
     aa0:	fe 82       	std	Y+6, r15	; 0x06
     aa2:	0f 83       	std	Y+7, r16	; 0x07
     aa4:	18 87       	std	Y+8, r17	; 0x08
     aa6:	c8 1a       	sub	r12, r24
     aa8:	d9 0a       	sbc	r13, r25
     aaa:	dc 82       	std	Y+4, r13	; 0x04
     aac:	cb 82       	std	Y+3, r12	; 0x03
     aae:	ba 82       	std	Y+2, r11	; 0x02
     ab0:	ce 01       	movw	r24, r28
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	0e 94 03 06 	call	0xc06	; 0xc06 <__pack_f>
     ab8:	28 96       	adiw	r28, 0x08	; 8
     aba:	e9 e0       	ldi	r30, 0x09	; 9
     abc:	0c 94 28 1e 	jmp	0x3c50	; 0x3c50 <__epilogue_restores__+0x12>

00000ac0 <__fixsfsi>:
     ac0:	ac e0       	ldi	r26, 0x0C	; 12
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e6 e6       	ldi	r30, 0x66	; 102
     ac6:	f5 e0       	ldi	r31, 0x05	; 5
     ac8:	0c 94 13 1e 	jmp	0x3c26	; 0x3c26 <__prologue_saves__+0x20>
     acc:	69 83       	std	Y+1, r22	; 0x01
     ace:	7a 83       	std	Y+2, r23	; 0x02
     ad0:	8b 83       	std	Y+3, r24	; 0x03
     ad2:	9c 83       	std	Y+4, r25	; 0x04
     ad4:	ce 01       	movw	r24, r28
     ad6:	01 96       	adiw	r24, 0x01	; 1
     ad8:	be 01       	movw	r22, r28
     ada:	6b 5f       	subi	r22, 0xFB	; 251
     adc:	7f 4f       	sbci	r23, 0xFF	; 255
     ade:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <__unpack_f>
     ae2:	8d 81       	ldd	r24, Y+5	; 0x05
     ae4:	82 30       	cpi	r24, 0x02	; 2
     ae6:	61 f1       	breq	.+88     	; 0xb40 <__fixsfsi+0x80>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	50 f1       	brcs	.+84     	; 0xb40 <__fixsfsi+0x80>
     aec:	84 30       	cpi	r24, 0x04	; 4
     aee:	21 f4       	brne	.+8      	; 0xaf8 <__fixsfsi+0x38>
     af0:	8e 81       	ldd	r24, Y+6	; 0x06
     af2:	88 23       	and	r24, r24
     af4:	51 f1       	breq	.+84     	; 0xb4a <__fixsfsi+0x8a>
     af6:	2e c0       	rjmp	.+92     	; 0xb54 <__fixsfsi+0x94>
     af8:	2f 81       	ldd	r18, Y+7	; 0x07
     afa:	38 85       	ldd	r19, Y+8	; 0x08
     afc:	37 fd       	sbrc	r19, 7
     afe:	20 c0       	rjmp	.+64     	; 0xb40 <__fixsfsi+0x80>
     b00:	6e 81       	ldd	r22, Y+6	; 0x06
     b02:	2f 31       	cpi	r18, 0x1F	; 31
     b04:	31 05       	cpc	r19, r1
     b06:	1c f0       	brlt	.+6      	; 0xb0e <__fixsfsi+0x4e>
     b08:	66 23       	and	r22, r22
     b0a:	f9 f0       	breq	.+62     	; 0xb4a <__fixsfsi+0x8a>
     b0c:	23 c0       	rjmp	.+70     	; 0xb54 <__fixsfsi+0x94>
     b0e:	8e e1       	ldi	r24, 0x1E	; 30
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	82 1b       	sub	r24, r18
     b14:	93 0b       	sbc	r25, r19
     b16:	29 85       	ldd	r18, Y+9	; 0x09
     b18:	3a 85       	ldd	r19, Y+10	; 0x0a
     b1a:	4b 85       	ldd	r20, Y+11	; 0x0b
     b1c:	5c 85       	ldd	r21, Y+12	; 0x0c
     b1e:	04 c0       	rjmp	.+8      	; 0xb28 <__fixsfsi+0x68>
     b20:	56 95       	lsr	r21
     b22:	47 95       	ror	r20
     b24:	37 95       	ror	r19
     b26:	27 95       	ror	r18
     b28:	8a 95       	dec	r24
     b2a:	d2 f7       	brpl	.-12     	; 0xb20 <__fixsfsi+0x60>
     b2c:	66 23       	and	r22, r22
     b2e:	b1 f0       	breq	.+44     	; 0xb5c <__fixsfsi+0x9c>
     b30:	50 95       	com	r21
     b32:	40 95       	com	r20
     b34:	30 95       	com	r19
     b36:	21 95       	neg	r18
     b38:	3f 4f       	sbci	r19, 0xFF	; 255
     b3a:	4f 4f       	sbci	r20, 0xFF	; 255
     b3c:	5f 4f       	sbci	r21, 0xFF	; 255
     b3e:	0e c0       	rjmp	.+28     	; 0xb5c <__fixsfsi+0x9c>
     b40:	20 e0       	ldi	r18, 0x00	; 0
     b42:	30 e0       	ldi	r19, 0x00	; 0
     b44:	40 e0       	ldi	r20, 0x00	; 0
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	09 c0       	rjmp	.+18     	; 0xb5c <__fixsfsi+0x9c>
     b4a:	2f ef       	ldi	r18, 0xFF	; 255
     b4c:	3f ef       	ldi	r19, 0xFF	; 255
     b4e:	4f ef       	ldi	r20, 0xFF	; 255
     b50:	5f e7       	ldi	r21, 0x7F	; 127
     b52:	04 c0       	rjmp	.+8      	; 0xb5c <__fixsfsi+0x9c>
     b54:	20 e0       	ldi	r18, 0x00	; 0
     b56:	30 e0       	ldi	r19, 0x00	; 0
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e8       	ldi	r21, 0x80	; 128
     b5c:	b9 01       	movw	r22, r18
     b5e:	ca 01       	movw	r24, r20
     b60:	2c 96       	adiw	r28, 0x0c	; 12
     b62:	e2 e0       	ldi	r30, 0x02	; 2
     b64:	0c 94 2f 1e 	jmp	0x3c5e	; 0x3c5e <__epilogue_restores__+0x20>

00000b68 <__clzsi2>:
     b68:	ef 92       	push	r14
     b6a:	ff 92       	push	r15
     b6c:	0f 93       	push	r16
     b6e:	1f 93       	push	r17
     b70:	7b 01       	movw	r14, r22
     b72:	8c 01       	movw	r16, r24
     b74:	80 e0       	ldi	r24, 0x00	; 0
     b76:	e8 16       	cp	r14, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	f8 06       	cpc	r15, r24
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	08 07       	cpc	r16, r24
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	18 07       	cpc	r17, r24
     b84:	88 f4       	brcc	.+34     	; 0xba8 <__clzsi2+0x40>
     b86:	8f ef       	ldi	r24, 0xFF	; 255
     b88:	e8 16       	cp	r14, r24
     b8a:	f1 04       	cpc	r15, r1
     b8c:	01 05       	cpc	r16, r1
     b8e:	11 05       	cpc	r17, r1
     b90:	31 f0       	breq	.+12     	; 0xb9e <__clzsi2+0x36>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <__clzsi2+0x36>
     b94:	88 e0       	ldi	r24, 0x08	; 8
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	a0 e0       	ldi	r26, 0x00	; 0
     b9a:	b0 e0       	ldi	r27, 0x00	; 0
     b9c:	17 c0       	rjmp	.+46     	; 0xbcc <__clzsi2+0x64>
     b9e:	80 e0       	ldi	r24, 0x00	; 0
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	a0 e0       	ldi	r26, 0x00	; 0
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	12 c0       	rjmp	.+36     	; 0xbcc <__clzsi2+0x64>
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	e8 16       	cp	r14, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	f8 06       	cpc	r15, r24
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	08 07       	cpc	r16, r24
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	18 07       	cpc	r17, r24
     bb8:	28 f0       	brcs	.+10     	; 0xbc4 <__clzsi2+0x5c>
     bba:	88 e1       	ldi	r24, 0x18	; 24
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	a0 e0       	ldi	r26, 0x00	; 0
     bc0:	b0 e0       	ldi	r27, 0x00	; 0
     bc2:	04 c0       	rjmp	.+8      	; 0xbcc <__clzsi2+0x64>
     bc4:	80 e1       	ldi	r24, 0x10	; 16
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	a0 e0       	ldi	r26, 0x00	; 0
     bca:	b0 e0       	ldi	r27, 0x00	; 0
     bcc:	20 e2       	ldi	r18, 0x20	; 32
     bce:	30 e0       	ldi	r19, 0x00	; 0
     bd0:	40 e0       	ldi	r20, 0x00	; 0
     bd2:	50 e0       	ldi	r21, 0x00	; 0
     bd4:	28 1b       	sub	r18, r24
     bd6:	39 0b       	sbc	r19, r25
     bd8:	4a 0b       	sbc	r20, r26
     bda:	5b 0b       	sbc	r21, r27
     bdc:	04 c0       	rjmp	.+8      	; 0xbe6 <__clzsi2+0x7e>
     bde:	16 95       	lsr	r17
     be0:	07 95       	ror	r16
     be2:	f7 94       	ror	r15
     be4:	e7 94       	ror	r14
     be6:	8a 95       	dec	r24
     be8:	d2 f7       	brpl	.-12     	; 0xbde <__clzsi2+0x76>
     bea:	f7 01       	movw	r30, r14
     bec:	ec 51       	subi	r30, 0x1C	; 28
     bee:	ff 4f       	sbci	r31, 0xFF	; 255
     bf0:	80 81       	ld	r24, Z
     bf2:	28 1b       	sub	r18, r24
     bf4:	31 09       	sbc	r19, r1
     bf6:	41 09       	sbc	r20, r1
     bf8:	51 09       	sbc	r21, r1
     bfa:	c9 01       	movw	r24, r18
     bfc:	1f 91       	pop	r17
     bfe:	0f 91       	pop	r16
     c00:	ff 90       	pop	r15
     c02:	ef 90       	pop	r14
     c04:	08 95       	ret

00000c06 <__pack_f>:
     c06:	df 92       	push	r13
     c08:	ef 92       	push	r14
     c0a:	ff 92       	push	r15
     c0c:	0f 93       	push	r16
     c0e:	1f 93       	push	r17
     c10:	fc 01       	movw	r30, r24
     c12:	e4 80       	ldd	r14, Z+4	; 0x04
     c14:	f5 80       	ldd	r15, Z+5	; 0x05
     c16:	06 81       	ldd	r16, Z+6	; 0x06
     c18:	17 81       	ldd	r17, Z+7	; 0x07
     c1a:	d1 80       	ldd	r13, Z+1	; 0x01
     c1c:	80 81       	ld	r24, Z
     c1e:	82 30       	cpi	r24, 0x02	; 2
     c20:	48 f4       	brcc	.+18     	; 0xc34 <__pack_f+0x2e>
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e1       	ldi	r26, 0x10	; 16
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e8 2a       	or	r14, r24
     c2c:	f9 2a       	or	r15, r25
     c2e:	0a 2b       	or	r16, r26
     c30:	1b 2b       	or	r17, r27
     c32:	a5 c0       	rjmp	.+330    	; 0xd7e <__pack_f+0x178>
     c34:	84 30       	cpi	r24, 0x04	; 4
     c36:	09 f4       	brne	.+2      	; 0xc3a <__pack_f+0x34>
     c38:	9f c0       	rjmp	.+318    	; 0xd78 <__pack_f+0x172>
     c3a:	82 30       	cpi	r24, 0x02	; 2
     c3c:	21 f4       	brne	.+8      	; 0xc46 <__pack_f+0x40>
     c3e:	ee 24       	eor	r14, r14
     c40:	ff 24       	eor	r15, r15
     c42:	87 01       	movw	r16, r14
     c44:	05 c0       	rjmp	.+10     	; 0xc50 <__pack_f+0x4a>
     c46:	e1 14       	cp	r14, r1
     c48:	f1 04       	cpc	r15, r1
     c4a:	01 05       	cpc	r16, r1
     c4c:	11 05       	cpc	r17, r1
     c4e:	19 f4       	brne	.+6      	; 0xc56 <__pack_f+0x50>
     c50:	e0 e0       	ldi	r30, 0x00	; 0
     c52:	f0 e0       	ldi	r31, 0x00	; 0
     c54:	96 c0       	rjmp	.+300    	; 0xd82 <__pack_f+0x17c>
     c56:	62 81       	ldd	r22, Z+2	; 0x02
     c58:	73 81       	ldd	r23, Z+3	; 0x03
     c5a:	9f ef       	ldi	r25, 0xFF	; 255
     c5c:	62 38       	cpi	r22, 0x82	; 130
     c5e:	79 07       	cpc	r23, r25
     c60:	0c f0       	brlt	.+2      	; 0xc64 <__pack_f+0x5e>
     c62:	5b c0       	rjmp	.+182    	; 0xd1a <__pack_f+0x114>
     c64:	22 e8       	ldi	r18, 0x82	; 130
     c66:	3f ef       	ldi	r19, 0xFF	; 255
     c68:	26 1b       	sub	r18, r22
     c6a:	37 0b       	sbc	r19, r23
     c6c:	2a 31       	cpi	r18, 0x1A	; 26
     c6e:	31 05       	cpc	r19, r1
     c70:	2c f0       	brlt	.+10     	; 0xc7c <__pack_f+0x76>
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	40 e0       	ldi	r20, 0x00	; 0
     c78:	50 e0       	ldi	r21, 0x00	; 0
     c7a:	2a c0       	rjmp	.+84     	; 0xcd0 <__pack_f+0xca>
     c7c:	b8 01       	movw	r22, r16
     c7e:	a7 01       	movw	r20, r14
     c80:	02 2e       	mov	r0, r18
     c82:	04 c0       	rjmp	.+8      	; 0xc8c <__pack_f+0x86>
     c84:	76 95       	lsr	r23
     c86:	67 95       	ror	r22
     c88:	57 95       	ror	r21
     c8a:	47 95       	ror	r20
     c8c:	0a 94       	dec	r0
     c8e:	d2 f7       	brpl	.-12     	; 0xc84 <__pack_f+0x7e>
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	90 e0       	ldi	r25, 0x00	; 0
     c94:	a0 e0       	ldi	r26, 0x00	; 0
     c96:	b0 e0       	ldi	r27, 0x00	; 0
     c98:	04 c0       	rjmp	.+8      	; 0xca2 <__pack_f+0x9c>
     c9a:	88 0f       	add	r24, r24
     c9c:	99 1f       	adc	r25, r25
     c9e:	aa 1f       	adc	r26, r26
     ca0:	bb 1f       	adc	r27, r27
     ca2:	2a 95       	dec	r18
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <__pack_f+0x94>
     ca6:	01 97       	sbiw	r24, 0x01	; 1
     ca8:	a1 09       	sbc	r26, r1
     caa:	b1 09       	sbc	r27, r1
     cac:	8e 21       	and	r24, r14
     cae:	9f 21       	and	r25, r15
     cb0:	a0 23       	and	r26, r16
     cb2:	b1 23       	and	r27, r17
     cb4:	00 97       	sbiw	r24, 0x00	; 0
     cb6:	a1 05       	cpc	r26, r1
     cb8:	b1 05       	cpc	r27, r1
     cba:	21 f0       	breq	.+8      	; 0xcc4 <__pack_f+0xbe>
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	a0 e0       	ldi	r26, 0x00	; 0
     cc2:	b0 e0       	ldi	r27, 0x00	; 0
     cc4:	9a 01       	movw	r18, r20
     cc6:	ab 01       	movw	r20, r22
     cc8:	28 2b       	or	r18, r24
     cca:	39 2b       	or	r19, r25
     ccc:	4a 2b       	or	r20, r26
     cce:	5b 2b       	or	r21, r27
     cd0:	da 01       	movw	r26, r20
     cd2:	c9 01       	movw	r24, r18
     cd4:	8f 77       	andi	r24, 0x7F	; 127
     cd6:	90 70       	andi	r25, 0x00	; 0
     cd8:	a0 70       	andi	r26, 0x00	; 0
     cda:	b0 70       	andi	r27, 0x00	; 0
     cdc:	80 34       	cpi	r24, 0x40	; 64
     cde:	91 05       	cpc	r25, r1
     ce0:	a1 05       	cpc	r26, r1
     ce2:	b1 05       	cpc	r27, r1
     ce4:	39 f4       	brne	.+14     	; 0xcf4 <__pack_f+0xee>
     ce6:	27 ff       	sbrs	r18, 7
     ce8:	09 c0       	rjmp	.+18     	; 0xcfc <__pack_f+0xf6>
     cea:	20 5c       	subi	r18, 0xC0	; 192
     cec:	3f 4f       	sbci	r19, 0xFF	; 255
     cee:	4f 4f       	sbci	r20, 0xFF	; 255
     cf0:	5f 4f       	sbci	r21, 0xFF	; 255
     cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__pack_f+0xf6>
     cf4:	21 5c       	subi	r18, 0xC1	; 193
     cf6:	3f 4f       	sbci	r19, 0xFF	; 255
     cf8:	4f 4f       	sbci	r20, 0xFF	; 255
     cfa:	5f 4f       	sbci	r21, 0xFF	; 255
     cfc:	e0 e0       	ldi	r30, 0x00	; 0
     cfe:	f0 e0       	ldi	r31, 0x00	; 0
     d00:	20 30       	cpi	r18, 0x00	; 0
     d02:	a0 e0       	ldi	r26, 0x00	; 0
     d04:	3a 07       	cpc	r19, r26
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	4a 07       	cpc	r20, r26
     d0a:	a0 e4       	ldi	r26, 0x40	; 64
     d0c:	5a 07       	cpc	r21, r26
     d0e:	10 f0       	brcs	.+4      	; 0xd14 <__pack_f+0x10e>
     d10:	e1 e0       	ldi	r30, 0x01	; 1
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	79 01       	movw	r14, r18
     d16:	8a 01       	movw	r16, r20
     d18:	27 c0       	rjmp	.+78     	; 0xd68 <__pack_f+0x162>
     d1a:	60 38       	cpi	r22, 0x80	; 128
     d1c:	71 05       	cpc	r23, r1
     d1e:	64 f5       	brge	.+88     	; 0xd78 <__pack_f+0x172>
     d20:	fb 01       	movw	r30, r22
     d22:	e1 58       	subi	r30, 0x81	; 129
     d24:	ff 4f       	sbci	r31, 0xFF	; 255
     d26:	d8 01       	movw	r26, r16
     d28:	c7 01       	movw	r24, r14
     d2a:	8f 77       	andi	r24, 0x7F	; 127
     d2c:	90 70       	andi	r25, 0x00	; 0
     d2e:	a0 70       	andi	r26, 0x00	; 0
     d30:	b0 70       	andi	r27, 0x00	; 0
     d32:	80 34       	cpi	r24, 0x40	; 64
     d34:	91 05       	cpc	r25, r1
     d36:	a1 05       	cpc	r26, r1
     d38:	b1 05       	cpc	r27, r1
     d3a:	39 f4       	brne	.+14     	; 0xd4a <__pack_f+0x144>
     d3c:	e7 fe       	sbrs	r14, 7
     d3e:	0d c0       	rjmp	.+26     	; 0xd5a <__pack_f+0x154>
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	a0 e0       	ldi	r26, 0x00	; 0
     d46:	b0 e0       	ldi	r27, 0x00	; 0
     d48:	04 c0       	rjmp	.+8      	; 0xd52 <__pack_f+0x14c>
     d4a:	8f e3       	ldi	r24, 0x3F	; 63
     d4c:	90 e0       	ldi	r25, 0x00	; 0
     d4e:	a0 e0       	ldi	r26, 0x00	; 0
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	e8 0e       	add	r14, r24
     d54:	f9 1e       	adc	r15, r25
     d56:	0a 1f       	adc	r16, r26
     d58:	1b 1f       	adc	r17, r27
     d5a:	17 ff       	sbrs	r17, 7
     d5c:	05 c0       	rjmp	.+10     	; 0xd68 <__pack_f+0x162>
     d5e:	16 95       	lsr	r17
     d60:	07 95       	ror	r16
     d62:	f7 94       	ror	r15
     d64:	e7 94       	ror	r14
     d66:	31 96       	adiw	r30, 0x01	; 1
     d68:	87 e0       	ldi	r24, 0x07	; 7
     d6a:	16 95       	lsr	r17
     d6c:	07 95       	ror	r16
     d6e:	f7 94       	ror	r15
     d70:	e7 94       	ror	r14
     d72:	8a 95       	dec	r24
     d74:	d1 f7       	brne	.-12     	; 0xd6a <__pack_f+0x164>
     d76:	05 c0       	rjmp	.+10     	; 0xd82 <__pack_f+0x17c>
     d78:	ee 24       	eor	r14, r14
     d7a:	ff 24       	eor	r15, r15
     d7c:	87 01       	movw	r16, r14
     d7e:	ef ef       	ldi	r30, 0xFF	; 255
     d80:	f0 e0       	ldi	r31, 0x00	; 0
     d82:	6e 2f       	mov	r22, r30
     d84:	67 95       	ror	r22
     d86:	66 27       	eor	r22, r22
     d88:	67 95       	ror	r22
     d8a:	90 2f       	mov	r25, r16
     d8c:	9f 77       	andi	r25, 0x7F	; 127
     d8e:	d7 94       	ror	r13
     d90:	dd 24       	eor	r13, r13
     d92:	d7 94       	ror	r13
     d94:	8e 2f       	mov	r24, r30
     d96:	86 95       	lsr	r24
     d98:	49 2f       	mov	r20, r25
     d9a:	46 2b       	or	r20, r22
     d9c:	58 2f       	mov	r21, r24
     d9e:	5d 29       	or	r21, r13
     da0:	b7 01       	movw	r22, r14
     da2:	ca 01       	movw	r24, r20
     da4:	1f 91       	pop	r17
     da6:	0f 91       	pop	r16
     da8:	ff 90       	pop	r15
     daa:	ef 90       	pop	r14
     dac:	df 90       	pop	r13
     dae:	08 95       	ret

00000db0 <__unpack_f>:
     db0:	fc 01       	movw	r30, r24
     db2:	db 01       	movw	r26, r22
     db4:	40 81       	ld	r20, Z
     db6:	51 81       	ldd	r21, Z+1	; 0x01
     db8:	22 81       	ldd	r18, Z+2	; 0x02
     dba:	62 2f       	mov	r22, r18
     dbc:	6f 77       	andi	r22, 0x7F	; 127
     dbe:	70 e0       	ldi	r23, 0x00	; 0
     dc0:	22 1f       	adc	r18, r18
     dc2:	22 27       	eor	r18, r18
     dc4:	22 1f       	adc	r18, r18
     dc6:	93 81       	ldd	r25, Z+3	; 0x03
     dc8:	89 2f       	mov	r24, r25
     dca:	88 0f       	add	r24, r24
     dcc:	82 2b       	or	r24, r18
     dce:	28 2f       	mov	r18, r24
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	99 1f       	adc	r25, r25
     dd4:	99 27       	eor	r25, r25
     dd6:	99 1f       	adc	r25, r25
     dd8:	11 96       	adiw	r26, 0x01	; 1
     dda:	9c 93       	st	X, r25
     ddc:	11 97       	sbiw	r26, 0x01	; 1
     dde:	21 15       	cp	r18, r1
     de0:	31 05       	cpc	r19, r1
     de2:	a9 f5       	brne	.+106    	; 0xe4e <__unpack_f+0x9e>
     de4:	41 15       	cp	r20, r1
     de6:	51 05       	cpc	r21, r1
     de8:	61 05       	cpc	r22, r1
     dea:	71 05       	cpc	r23, r1
     dec:	11 f4       	brne	.+4      	; 0xdf2 <__unpack_f+0x42>
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	37 c0       	rjmp	.+110    	; 0xe60 <__unpack_f+0xb0>
     df2:	82 e8       	ldi	r24, 0x82	; 130
     df4:	9f ef       	ldi	r25, 0xFF	; 255
     df6:	13 96       	adiw	r26, 0x03	; 3
     df8:	9c 93       	st	X, r25
     dfa:	8e 93       	st	-X, r24
     dfc:	12 97       	sbiw	r26, 0x02	; 2
     dfe:	9a 01       	movw	r18, r20
     e00:	ab 01       	movw	r20, r22
     e02:	67 e0       	ldi	r22, 0x07	; 7
     e04:	22 0f       	add	r18, r18
     e06:	33 1f       	adc	r19, r19
     e08:	44 1f       	adc	r20, r20
     e0a:	55 1f       	adc	r21, r21
     e0c:	6a 95       	dec	r22
     e0e:	d1 f7       	brne	.-12     	; 0xe04 <__unpack_f+0x54>
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	8c 93       	st	X, r24
     e14:	0d c0       	rjmp	.+26     	; 0xe30 <__unpack_f+0x80>
     e16:	22 0f       	add	r18, r18
     e18:	33 1f       	adc	r19, r19
     e1a:	44 1f       	adc	r20, r20
     e1c:	55 1f       	adc	r21, r21
     e1e:	12 96       	adiw	r26, 0x02	; 2
     e20:	8d 91       	ld	r24, X+
     e22:	9c 91       	ld	r25, X
     e24:	13 97       	sbiw	r26, 0x03	; 3
     e26:	01 97       	sbiw	r24, 0x01	; 1
     e28:	13 96       	adiw	r26, 0x03	; 3
     e2a:	9c 93       	st	X, r25
     e2c:	8e 93       	st	-X, r24
     e2e:	12 97       	sbiw	r26, 0x02	; 2
     e30:	20 30       	cpi	r18, 0x00	; 0
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	38 07       	cpc	r19, r24
     e36:	80 e0       	ldi	r24, 0x00	; 0
     e38:	48 07       	cpc	r20, r24
     e3a:	80 e4       	ldi	r24, 0x40	; 64
     e3c:	58 07       	cpc	r21, r24
     e3e:	58 f3       	brcs	.-42     	; 0xe16 <__unpack_f+0x66>
     e40:	14 96       	adiw	r26, 0x04	; 4
     e42:	2d 93       	st	X+, r18
     e44:	3d 93       	st	X+, r19
     e46:	4d 93       	st	X+, r20
     e48:	5c 93       	st	X, r21
     e4a:	17 97       	sbiw	r26, 0x07	; 7
     e4c:	08 95       	ret
     e4e:	2f 3f       	cpi	r18, 0xFF	; 255
     e50:	31 05       	cpc	r19, r1
     e52:	79 f4       	brne	.+30     	; 0xe72 <__unpack_f+0xc2>
     e54:	41 15       	cp	r20, r1
     e56:	51 05       	cpc	r21, r1
     e58:	61 05       	cpc	r22, r1
     e5a:	71 05       	cpc	r23, r1
     e5c:	19 f4       	brne	.+6      	; 0xe64 <__unpack_f+0xb4>
     e5e:	84 e0       	ldi	r24, 0x04	; 4
     e60:	8c 93       	st	X, r24
     e62:	08 95       	ret
     e64:	64 ff       	sbrs	r22, 4
     e66:	03 c0       	rjmp	.+6      	; 0xe6e <__unpack_f+0xbe>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	8c 93       	st	X, r24
     e6c:	12 c0       	rjmp	.+36     	; 0xe92 <__unpack_f+0xe2>
     e6e:	1c 92       	st	X, r1
     e70:	10 c0       	rjmp	.+32     	; 0xe92 <__unpack_f+0xe2>
     e72:	2f 57       	subi	r18, 0x7F	; 127
     e74:	30 40       	sbci	r19, 0x00	; 0
     e76:	13 96       	adiw	r26, 0x03	; 3
     e78:	3c 93       	st	X, r19
     e7a:	2e 93       	st	-X, r18
     e7c:	12 97       	sbiw	r26, 0x02	; 2
     e7e:	83 e0       	ldi	r24, 0x03	; 3
     e80:	8c 93       	st	X, r24
     e82:	87 e0       	ldi	r24, 0x07	; 7
     e84:	44 0f       	add	r20, r20
     e86:	55 1f       	adc	r21, r21
     e88:	66 1f       	adc	r22, r22
     e8a:	77 1f       	adc	r23, r23
     e8c:	8a 95       	dec	r24
     e8e:	d1 f7       	brne	.-12     	; 0xe84 <__unpack_f+0xd4>
     e90:	70 64       	ori	r23, 0x40	; 64
     e92:	14 96       	adiw	r26, 0x04	; 4
     e94:	4d 93       	st	X+, r20
     e96:	5d 93       	st	X+, r21
     e98:	6d 93       	st	X+, r22
     e9a:	7c 93       	st	X, r23
     e9c:	17 97       	sbiw	r26, 0x07	; 7
     e9e:	08 95       	ret

00000ea0 <__fpcmp_parts_f>:
     ea0:	1f 93       	push	r17
     ea2:	dc 01       	movw	r26, r24
     ea4:	fb 01       	movw	r30, r22
     ea6:	9c 91       	ld	r25, X
     ea8:	92 30       	cpi	r25, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0xe>
     eac:	47 c0       	rjmp	.+142    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eae:	80 81       	ld	r24, Z
     eb0:	82 30       	cpi	r24, 0x02	; 2
     eb2:	08 f4       	brcc	.+2      	; 0xeb6 <__fpcmp_parts_f+0x16>
     eb4:	43 c0       	rjmp	.+134    	; 0xf3c <__fpcmp_parts_f+0x9c>
     eb6:	94 30       	cpi	r25, 0x04	; 4
     eb8:	51 f4       	brne	.+20     	; 0xece <__fpcmp_parts_f+0x2e>
     eba:	11 96       	adiw	r26, 0x01	; 1
     ebc:	1c 91       	ld	r17, X
     ebe:	84 30       	cpi	r24, 0x04	; 4
     ec0:	99 f5       	brne	.+102    	; 0xf28 <__fpcmp_parts_f+0x88>
     ec2:	81 81       	ldd	r24, Z+1	; 0x01
     ec4:	68 2f       	mov	r22, r24
     ec6:	70 e0       	ldi	r23, 0x00	; 0
     ec8:	61 1b       	sub	r22, r17
     eca:	71 09       	sbc	r23, r1
     ecc:	3f c0       	rjmp	.+126    	; 0xf4c <__fpcmp_parts_f+0xac>
     ece:	84 30       	cpi	r24, 0x04	; 4
     ed0:	21 f0       	breq	.+8      	; 0xeda <__fpcmp_parts_f+0x3a>
     ed2:	92 30       	cpi	r25, 0x02	; 2
     ed4:	31 f4       	brne	.+12     	; 0xee2 <__fpcmp_parts_f+0x42>
     ed6:	82 30       	cpi	r24, 0x02	; 2
     ed8:	b9 f1       	breq	.+110    	; 0xf48 <__fpcmp_parts_f+0xa8>
     eda:	81 81       	ldd	r24, Z+1	; 0x01
     edc:	88 23       	and	r24, r24
     ede:	89 f1       	breq	.+98     	; 0xf42 <__fpcmp_parts_f+0xa2>
     ee0:	2d c0       	rjmp	.+90     	; 0xf3c <__fpcmp_parts_f+0x9c>
     ee2:	11 96       	adiw	r26, 0x01	; 1
     ee4:	1c 91       	ld	r17, X
     ee6:	11 97       	sbiw	r26, 0x01	; 1
     ee8:	82 30       	cpi	r24, 0x02	; 2
     eea:	f1 f0       	breq	.+60     	; 0xf28 <__fpcmp_parts_f+0x88>
     eec:	81 81       	ldd	r24, Z+1	; 0x01
     eee:	18 17       	cp	r17, r24
     ef0:	d9 f4       	brne	.+54     	; 0xf28 <__fpcmp_parts_f+0x88>
     ef2:	12 96       	adiw	r26, 0x02	; 2
     ef4:	2d 91       	ld	r18, X+
     ef6:	3c 91       	ld	r19, X
     ef8:	13 97       	sbiw	r26, 0x03	; 3
     efa:	82 81       	ldd	r24, Z+2	; 0x02
     efc:	93 81       	ldd	r25, Z+3	; 0x03
     efe:	82 17       	cp	r24, r18
     f00:	93 07       	cpc	r25, r19
     f02:	94 f0       	brlt	.+36     	; 0xf28 <__fpcmp_parts_f+0x88>
     f04:	28 17       	cp	r18, r24
     f06:	39 07       	cpc	r19, r25
     f08:	bc f0       	brlt	.+46     	; 0xf38 <__fpcmp_parts_f+0x98>
     f0a:	14 96       	adiw	r26, 0x04	; 4
     f0c:	8d 91       	ld	r24, X+
     f0e:	9d 91       	ld	r25, X+
     f10:	0d 90       	ld	r0, X+
     f12:	bc 91       	ld	r27, X
     f14:	a0 2d       	mov	r26, r0
     f16:	24 81       	ldd	r18, Z+4	; 0x04
     f18:	35 81       	ldd	r19, Z+5	; 0x05
     f1a:	46 81       	ldd	r20, Z+6	; 0x06
     f1c:	57 81       	ldd	r21, Z+7	; 0x07
     f1e:	28 17       	cp	r18, r24
     f20:	39 07       	cpc	r19, r25
     f22:	4a 07       	cpc	r20, r26
     f24:	5b 07       	cpc	r21, r27
     f26:	18 f4       	brcc	.+6      	; 0xf2e <__fpcmp_parts_f+0x8e>
     f28:	11 23       	and	r17, r17
     f2a:	41 f0       	breq	.+16     	; 0xf3c <__fpcmp_parts_f+0x9c>
     f2c:	0a c0       	rjmp	.+20     	; 0xf42 <__fpcmp_parts_f+0xa2>
     f2e:	82 17       	cp	r24, r18
     f30:	93 07       	cpc	r25, r19
     f32:	a4 07       	cpc	r26, r20
     f34:	b5 07       	cpc	r27, r21
     f36:	40 f4       	brcc	.+16     	; 0xf48 <__fpcmp_parts_f+0xa8>
     f38:	11 23       	and	r17, r17
     f3a:	19 f0       	breq	.+6      	; 0xf42 <__fpcmp_parts_f+0xa2>
     f3c:	61 e0       	ldi	r22, 0x01	; 1
     f3e:	70 e0       	ldi	r23, 0x00	; 0
     f40:	05 c0       	rjmp	.+10     	; 0xf4c <__fpcmp_parts_f+0xac>
     f42:	6f ef       	ldi	r22, 0xFF	; 255
     f44:	7f ef       	ldi	r23, 0xFF	; 255
     f46:	02 c0       	rjmp	.+4      	; 0xf4c <__fpcmp_parts_f+0xac>
     f48:	60 e0       	ldi	r22, 0x00	; 0
     f4a:	70 e0       	ldi	r23, 0x00	; 0
     f4c:	cb 01       	movw	r24, r22
     f4e:	1f 91       	pop	r17
     f50:	08 95       	ret

00000f52 <EXTINT_init>:




void EXTINT_init()
{	SET_BIT(SREG,GIB)  	; // set Global Interrupt BIT in status reg (bit 7) in SREG REG
     f52:	df 93       	push	r29
     f54:	cf 93       	push	r28
     f56:	cd b7       	in	r28, 0x3d	; 61
     f58:	de b7       	in	r29, 0x3e	; 62
     f5a:	af e5       	ldi	r26, 0x5F	; 95
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	ef e5       	ldi	r30, 0x5F	; 95
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	80 68       	ori	r24, 0x80	; 128
     f66:	8c 93       	st	X, r24
#if EXT_INT0_MODE == ENABLE
	#if EXT_INT0_SENSE_MODE == LOW_LEVEL
			CLR_BIT(MCUCR,ISC00) ;
     f68:	a5 e5       	ldi	r26, 0x55	; 85
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e5       	ldi	r30, 0x55	; 85
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	8e 7f       	andi	r24, 0xFE	; 254
     f74:	8c 93       	st	X, r24
			CLR_BIT(MCUCR,ISC01) ;
     f76:	a5 e5       	ldi	r26, 0x55	; 85
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e5       	ldi	r30, 0x55	; 85
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	8d 7f       	andi	r24, 0xFD	; 253
     f82:	8c 93       	st	X, r24
	#elif EXT_INT0_SENSE_MODE == RISING_EDGE
			SET_BIT(MCUCR,ISC00) ;
			SET_BIT(MCUCR,ISC01) ;

	#endif
			EXTINT_enable(EXTI0) ;
     f84:	80 e0       	ldi	r24, 0x00	; 0
     f86:	0e 94 46 08 	call	0x108c	; 0x108c <EXTINT_enable>
	#elif EXT_INT1_SENSE_MODE == RISING_EDGE
			SET_BIT(MCUCSR,ISC2) ;
	#endif
	EXTINT_enable(EXTI2) ;
#endif
}
     f8a:	cf 91       	pop	r28
     f8c:	df 91       	pop	r29
     f8e:	08 95       	ret

00000f90 <__vector_1>:




ISR(EXT_INT0)
{ if (passed ==1)
     f90:	1f 92       	push	r1
     f92:	0f 92       	push	r0
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	0f 92       	push	r0
     f98:	11 24       	eor	r1, r1
     f9a:	2f 93       	push	r18
     f9c:	3f 93       	push	r19
     f9e:	4f 93       	push	r20
     fa0:	5f 93       	push	r21
     fa2:	6f 93       	push	r22
     fa4:	7f 93       	push	r23
     fa6:	8f 93       	push	r24
     fa8:	9f 93       	push	r25
     faa:	af 93       	push	r26
     fac:	bf 93       	push	r27
     fae:	ef 93       	push	r30
     fb0:	ff 93       	push	r31
     fb2:	df 93       	push	r29
     fb4:	cf 93       	push	r28
     fb6:	00 d0       	rcall	.+0      	; 0xfb8 <__vector_1+0x28>
     fb8:	cd b7       	in	r28, 0x3d	; 61
     fba:	de b7       	in	r29, 0x3e	; 62
     fbc:	80 91 0e 02 	lds	r24, 0x020E
     fc0:	81 30       	cpi	r24, 0x01	; 1
     fc2:	e9 f4       	brne	.+58     	; 0xffe <__vector_1+0x6e>
{
	switch (C_flag)
     fc4:	80 91 0f 02 	lds	r24, 0x020F
     fc8:	28 2f       	mov	r18, r24
     fca:	30 e0       	ldi	r19, 0x00	; 0
     fcc:	3a 83       	std	Y+2, r19	; 0x02
     fce:	29 83       	std	Y+1, r18	; 0x01
     fd0:	89 81       	ldd	r24, Y+1	; 0x01
     fd2:	9a 81       	ldd	r25, Y+2	; 0x02
     fd4:	81 30       	cpi	r24, 0x01	; 1
     fd6:	91 05       	cpc	r25, r1
     fd8:	31 f0       	breq	.+12     	; 0xfe6 <__vector_1+0x56>
     fda:	29 81       	ldd	r18, Y+1	; 0x01
     fdc:	3a 81       	ldd	r19, Y+2	; 0x02
     fde:	22 30       	cpi	r18, 0x02	; 2
     fe0:	31 05       	cpc	r19, r1
     fe2:	29 f0       	breq	.+10     	; 0xfee <__vector_1+0x5e>
     fe4:	08 c0       	rjmp	.+16     	; 0xff6 <__vector_1+0x66>
{
case 1 :
	C_flag=2 ;
     fe6:	82 e0       	ldi	r24, 0x02	; 2
     fe8:	80 93 0f 02 	sts	0x020F, r24
     fec:	1a c0       	rjmp	.+52     	; 0x1022 <__vector_1+0x92>
	break ;
case 2 :
	C_flag=1 ;
     fee:	81 e0       	ldi	r24, 0x01	; 1
     ff0:	80 93 0f 02 	sts	0x020F, r24
     ff4:	16 c0       	rjmp	.+44     	; 0x1022 <__vector_1+0x92>
	break ;
default :
{
	C_flag=1 ;
     ff6:	81 e0       	ldi	r24, 0x01	; 1
     ff8:	80 93 0f 02 	sts	0x020F, r24
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <__vector_1+0x92>
}
}
}
else
{  if (p2f_INT0 != 0)
     ffe:	80 91 fa 01 	lds	r24, 0x01FA
    1002:	90 91 fb 01 	lds	r25, 0x01FB
    1006:	00 97       	sbiw	r24, 0x00	; 0
    1008:	61 f0       	breq	.+24     	; 0x1022 <__vector_1+0x92>
		{
			p2f_INT0(0,1,"enter pass first :D") ;
    100a:	e0 91 fa 01 	lds	r30, 0x01FA
    100e:	f0 91 fb 01 	lds	r31, 0x01FB
    1012:	20 e6       	ldi	r18, 0x60	; 96
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	61 e0       	ldi	r22, 0x01	; 1
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	a9 01       	movw	r20, r18
    1020:	09 95       	icall

		}

}

}
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	cf 91       	pop	r28
    1028:	df 91       	pop	r29
    102a:	ff 91       	pop	r31
    102c:	ef 91       	pop	r30
    102e:	bf 91       	pop	r27
    1030:	af 91       	pop	r26
    1032:	9f 91       	pop	r25
    1034:	8f 91       	pop	r24
    1036:	7f 91       	pop	r23
    1038:	6f 91       	pop	r22
    103a:	5f 91       	pop	r21
    103c:	4f 91       	pop	r20
    103e:	3f 91       	pop	r19
    1040:	2f 91       	pop	r18
    1042:	0f 90       	pop	r0
    1044:	0f be       	out	0x3f, r0	; 63
    1046:	0f 90       	pop	r0
    1048:	1f 90       	pop	r1
    104a:	18 95       	reti

0000104c <__vector_2>:


ISR(EXT_INT1)
{
    104c:	1f 92       	push	r1
    104e:	0f 92       	push	r0
    1050:	0f b6       	in	r0, 0x3f	; 63
    1052:	0f 92       	push	r0
    1054:	11 24       	eor	r1, r1
    1056:	df 93       	push	r29
    1058:	cf 93       	push	r28
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62


}
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	0f 90       	pop	r0
    1064:	0f be       	out	0x3f, r0	; 63
    1066:	0f 90       	pop	r0
    1068:	1f 90       	pop	r1
    106a:	18 95       	reti

0000106c <__vector_3>:
ISR(EXT_INT2)
{
    106c:	1f 92       	push	r1
    106e:	0f 92       	push	r0
    1070:	0f b6       	in	r0, 0x3f	; 63
    1072:	0f 92       	push	r0
    1074:	11 24       	eor	r1, r1
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62


}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	0f 90       	pop	r0
    1084:	0f be       	out	0x3f, r0	; 63
    1086:	0f 90       	pop	r0
    1088:	1f 90       	pop	r1
    108a:	18 95       	reti

0000108c <EXTINT_enable>:

void EXTINT_enable(EXTI_TYPES interrupt)
{
    108c:	df 93       	push	r29
    108e:	cf 93       	push	r28
    1090:	00 d0       	rcall	.+0      	; 0x1092 <EXTINT_enable+0x6>
    1092:	0f 92       	push	r0
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
    1098:	89 83       	std	Y+1, r24	; 0x01
switch (interrupt)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	28 2f       	mov	r18, r24
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	3b 83       	std	Y+3, r19	; 0x03
    10a2:	2a 83       	std	Y+2, r18	; 0x02
    10a4:	8a 81       	ldd	r24, Y+2	; 0x02
    10a6:	9b 81       	ldd	r25, Y+3	; 0x03
    10a8:	81 30       	cpi	r24, 0x01	; 1
    10aa:	91 05       	cpc	r25, r1
    10ac:	89 f0       	breq	.+34     	; 0x10d0 <EXTINT_enable+0x44>
    10ae:	2a 81       	ldd	r18, Y+2	; 0x02
    10b0:	3b 81       	ldd	r19, Y+3	; 0x03
    10b2:	22 30       	cpi	r18, 0x02	; 2
    10b4:	31 05       	cpc	r19, r1
    10b6:	a1 f0       	breq	.+40     	; 0x10e0 <EXTINT_enable+0x54>
    10b8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ba:	9b 81       	ldd	r25, Y+3	; 0x03
    10bc:	00 97       	sbiw	r24, 0x00	; 0
    10be:	b9 f4       	brne	.+46     	; 0x10ee <EXTINT_enable+0x62>
{
	case EXTI0 :
	{ SET_BIT(GICR,GICR_INT0) ;
    10c0:	ab e5       	ldi	r26, 0x5B	; 91
    10c2:	b0 e0       	ldi	r27, 0x00	; 0
    10c4:	eb e5       	ldi	r30, 0x5B	; 91
    10c6:	f0 e0       	ldi	r31, 0x00	; 0
    10c8:	80 81       	ld	r24, Z
    10ca:	80 64       	ori	r24, 0x40	; 64
    10cc:	8c 93       	st	X, r24
    10ce:	0f c0       	rjmp	.+30     	; 0x10ee <EXTINT_enable+0x62>

	break ;
	}

	case EXTI1 :
	{	SET_BIT(GICR,GICR_INT1) ;
    10d0:	ab e5       	ldi	r26, 0x5B	; 91
    10d2:	b0 e0       	ldi	r27, 0x00	; 0
    10d4:	eb e5       	ldi	r30, 0x5B	; 91
    10d6:	f0 e0       	ldi	r31, 0x00	; 0
    10d8:	80 81       	ld	r24, Z
    10da:	80 68       	ori	r24, 0x80	; 128
    10dc:	8c 93       	st	X, r24
    10de:	07 c0       	rjmp	.+14     	; 0x10ee <EXTINT_enable+0x62>

		break ;
	}
	case EXTI2 :
	{SET_BIT(GICR,GICR_INT2) ;
    10e0:	ab e5       	ldi	r26, 0x5B	; 91
    10e2:	b0 e0       	ldi	r27, 0x00	; 0
    10e4:	eb e5       	ldi	r30, 0x5B	; 91
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	80 81       	ld	r24, Z
    10ea:	80 62       	ori	r24, 0x20	; 32
    10ec:	8c 93       	st	X, r24

}



}
    10ee:	0f 90       	pop	r0
    10f0:	0f 90       	pop	r0
    10f2:	0f 90       	pop	r0
    10f4:	cf 91       	pop	r28
    10f6:	df 91       	pop	r29
    10f8:	08 95       	ret

000010fa <EXTINT_disable>:


void EXTINT_disable(EXTI_TYPES interrupt)
{
    10fa:	df 93       	push	r29
    10fc:	cf 93       	push	r28
    10fe:	00 d0       	rcall	.+0      	; 0x1100 <EXTINT_disable+0x6>
    1100:	0f 92       	push	r0
    1102:	cd b7       	in	r28, 0x3d	; 61
    1104:	de b7       	in	r29, 0x3e	; 62
    1106:	89 83       	std	Y+1, r24	; 0x01
	switch (interrupt)
    1108:	89 81       	ldd	r24, Y+1	; 0x01
    110a:	28 2f       	mov	r18, r24
    110c:	30 e0       	ldi	r19, 0x00	; 0
    110e:	3b 83       	std	Y+3, r19	; 0x03
    1110:	2a 83       	std	Y+2, r18	; 0x02
    1112:	8a 81       	ldd	r24, Y+2	; 0x02
    1114:	9b 81       	ldd	r25, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	91 05       	cpc	r25, r1
    111a:	89 f0       	breq	.+34     	; 0x113e <EXTINT_disable+0x44>
    111c:	2a 81       	ldd	r18, Y+2	; 0x02
    111e:	3b 81       	ldd	r19, Y+3	; 0x03
    1120:	22 30       	cpi	r18, 0x02	; 2
    1122:	31 05       	cpc	r19, r1
    1124:	a1 f0       	breq	.+40     	; 0x114e <EXTINT_disable+0x54>
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	9b 81       	ldd	r25, Y+3	; 0x03
    112a:	00 97       	sbiw	r24, 0x00	; 0
    112c:	b9 f4       	brne	.+46     	; 0x115c <EXTINT_disable+0x62>
	{
		case EXTI0 :
		{ CLR_BIT(GICR,GICR_INT0) ;
    112e:	ab e5       	ldi	r26, 0x5B	; 91
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	eb e5       	ldi	r30, 0x5B	; 91
    1134:	f0 e0       	ldi	r31, 0x00	; 0
    1136:	80 81       	ld	r24, Z
    1138:	8f 7b       	andi	r24, 0xBF	; 191
    113a:	8c 93       	st	X, r24
    113c:	0f c0       	rjmp	.+30     	; 0x115c <EXTINT_disable+0x62>

		break ;
		}

		case EXTI1 :
		{	CLR_BIT(GICR,GICR_INT1) ;
    113e:	ab e5       	ldi	r26, 0x5B	; 91
    1140:	b0 e0       	ldi	r27, 0x00	; 0
    1142:	eb e5       	ldi	r30, 0x5B	; 91
    1144:	f0 e0       	ldi	r31, 0x00	; 0
    1146:	80 81       	ld	r24, Z
    1148:	8f 77       	andi	r24, 0x7F	; 127
    114a:	8c 93       	st	X, r24
    114c:	07 c0       	rjmp	.+14     	; 0x115c <EXTINT_disable+0x62>

			break ;
		}
		case EXTI2 :
		{CLR_BIT(GICR,GICR_INT2)  ;
    114e:	ab e5       	ldi	r26, 0x5B	; 91
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	eb e5       	ldi	r30, 0x5B	; 91
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8f 7d       	andi	r24, 0xDF	; 223
    115a:	8c 93       	st	X, r24
		default :
		{

		}
		}
	}
    115c:	0f 90       	pop	r0
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	cf 91       	pop	r28
    1164:	df 91       	pop	r29
    1166:	08 95       	ret

00001168 <SET_CALLBACK_INT0>:


void SET_CALLBACK_INT0(void (*p2f)(void))
{
    1168:	df 93       	push	r29
    116a:	cf 93       	push	r28
    116c:	00 d0       	rcall	.+0      	; 0x116e <SET_CALLBACK_INT0+0x6>
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62
    1172:	9a 83       	std	Y+2, r25	; 0x02
    1174:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT0=p2f ;
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	9a 81       	ldd	r25, Y+2	; 0x02
    117a:	90 93 fb 01 	sts	0x01FB, r25
    117e:	80 93 fa 01 	sts	0x01FA, r24
}
    1182:	0f 90       	pop	r0
    1184:	0f 90       	pop	r0
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <SET_CALLBACK_INT1>:
void SET_CALLBACK_INT1(void (*p2f)(void))
{
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	00 d0       	rcall	.+0      	; 0x1192 <SET_CALLBACK_INT1+0x6>
    1192:	cd b7       	in	r28, 0x3d	; 61
    1194:	de b7       	in	r29, 0x3e	; 62
    1196:	9a 83       	std	Y+2, r25	; 0x02
    1198:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT1=p2f ;
    119a:	89 81       	ldd	r24, Y+1	; 0x01
    119c:	9a 81       	ldd	r25, Y+2	; 0x02
    119e:	90 93 fd 01 	sts	0x01FD, r25
    11a2:	80 93 fc 01 	sts	0x01FC, r24

}
    11a6:	0f 90       	pop	r0
    11a8:	0f 90       	pop	r0
    11aa:	cf 91       	pop	r28
    11ac:	df 91       	pop	r29
    11ae:	08 95       	ret

000011b0 <SET_CALLBACK_INT2>:
void SET_CALLBACK_INT2(void (*p2f)(void))
{
    11b0:	df 93       	push	r29
    11b2:	cf 93       	push	r28
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <SET_CALLBACK_INT2+0x6>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	9a 83       	std	Y+2, r25	; 0x02
    11bc:	89 83       	std	Y+1, r24	; 0x01
	p2f_INT2=p2f ;
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	9a 81       	ldd	r25, Y+2	; 0x02
    11c2:	90 93 ff 01 	sts	0x01FF, r25
    11c6:	80 93 fe 01 	sts	0x01FE, r24

}
    11ca:	0f 90       	pop	r0
    11cc:	0f 90       	pop	r0
    11ce:	cf 91       	pop	r28
    11d0:	df 91       	pop	r29
    11d2:	08 95       	ret

000011d4 <DIO_init>:


// DIO INIT IMPLEMENTATION

void DIO_init(uint8_t PinNumber , uint8_t PORTNO , uint8_t Direction)
{
    11d4:	df 93       	push	r29
    11d6:	cf 93       	push	r28
    11d8:	00 d0       	rcall	.+0      	; 0x11da <DIO_init+0x6>
    11da:	00 d0       	rcall	.+0      	; 0x11dc <DIO_init+0x8>
    11dc:	0f 92       	push	r0
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	89 83       	std	Y+1, r24	; 0x01
    11e4:	6a 83       	std	Y+2, r22	; 0x02
    11e6:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORTNO)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	28 2f       	mov	r18, r24
    11ec:	30 e0       	ldi	r19, 0x00	; 0
    11ee:	3d 83       	std	Y+5, r19	; 0x05
    11f0:	2c 83       	std	Y+4, r18	; 0x04
    11f2:	8c 81       	ldd	r24, Y+4	; 0x04
    11f4:	9d 81       	ldd	r25, Y+5	; 0x05
    11f6:	82 34       	cpi	r24, 0x42	; 66
    11f8:	91 05       	cpc	r25, r1
    11fa:	09 f4       	brne	.+2      	; 0x11fe <DIO_init+0x2a>
    11fc:	62 c0       	rjmp	.+196    	; 0x12c2 <DIO_init+0xee>
    11fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1200:	3d 81       	ldd	r19, Y+5	; 0x05
    1202:	23 34       	cpi	r18, 0x43	; 67
    1204:	31 05       	cpc	r19, r1
    1206:	34 f4       	brge	.+12     	; 0x1214 <DIO_init+0x40>
    1208:	8c 81       	ldd	r24, Y+4	; 0x04
    120a:	9d 81       	ldd	r25, Y+5	; 0x05
    120c:	81 34       	cpi	r24, 0x41	; 65
    120e:	91 05       	cpc	r25, r1
    1210:	71 f0       	breq	.+28     	; 0x122e <DIO_init+0x5a>
    1212:	32 c1       	rjmp	.+612    	; 0x1478 <DIO_init+0x2a4>
    1214:	2c 81       	ldd	r18, Y+4	; 0x04
    1216:	3d 81       	ldd	r19, Y+5	; 0x05
    1218:	23 34       	cpi	r18, 0x43	; 67
    121a:	31 05       	cpc	r19, r1
    121c:	09 f4       	brne	.+2      	; 0x1220 <DIO_init+0x4c>
    121e:	9b c0       	rjmp	.+310    	; 0x1356 <DIO_init+0x182>
    1220:	8c 81       	ldd	r24, Y+4	; 0x04
    1222:	9d 81       	ldd	r25, Y+5	; 0x05
    1224:	84 34       	cpi	r24, 0x44	; 68
    1226:	91 05       	cpc	r25, r1
    1228:	09 f4       	brne	.+2      	; 0x122c <DIO_init+0x58>
    122a:	df c0       	rjmp	.+446    	; 0x13ea <DIO_init+0x216>
    122c:	25 c1       	rjmp	.+586    	; 0x1478 <DIO_init+0x2a4>
{		
 case PORT_A :
 { if (Direction == IN || Direction==IN_PULLUP_ON)
    122e:	8b 81       	ldd	r24, Y+3	; 0x03
    1230:	88 23       	and	r24, r24
    1232:	19 f0       	breq	.+6      	; 0x123a <DIO_init+0x66>
    1234:	8b 81       	ldd	r24, Y+3	; 0x03
    1236:	82 30       	cpi	r24, 0x02	; 2
    1238:	61 f5       	brne	.+88     	; 0x1292 <DIO_init+0xbe>
	 {
		CLR_BIT(DDRA,PinNumber) ;
    123a:	aa e3       	ldi	r26, 0x3A	; 58
    123c:	b0 e0       	ldi	r27, 0x00	; 0
    123e:	ea e3       	ldi	r30, 0x3A	; 58
    1240:	f0 e0       	ldi	r31, 0x00	; 0
    1242:	80 81       	ld	r24, Z
    1244:	48 2f       	mov	r20, r24
    1246:	89 81       	ldd	r24, Y+1	; 0x01
    1248:	28 2f       	mov	r18, r24
    124a:	30 e0       	ldi	r19, 0x00	; 0
    124c:	81 e0       	ldi	r24, 0x01	; 1
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	02 2e       	mov	r0, r18
    1252:	02 c0       	rjmp	.+4      	; 0x1258 <DIO_init+0x84>
    1254:	88 0f       	add	r24, r24
    1256:	99 1f       	adc	r25, r25
    1258:	0a 94       	dec	r0
    125a:	e2 f7       	brpl	.-8      	; 0x1254 <DIO_init+0x80>
    125c:	80 95       	com	r24
    125e:	84 23       	and	r24, r20
    1260:	8c 93       	st	X, r24
		if (Direction == IN_PULLUP_ON)
    1262:	8b 81       	ldd	r24, Y+3	; 0x03
    1264:	82 30       	cpi	r24, 0x02	; 2
    1266:	09 f0       	breq	.+2      	; 0x126a <DIO_init+0x96>
    1268:	07 c1       	rjmp	.+526    	; 0x1478 <DIO_init+0x2a4>
		{
			SET_BIT(PORTA,PinNumber) ;
    126a:	ab e3       	ldi	r26, 0x3B	; 59
    126c:	b0 e0       	ldi	r27, 0x00	; 0
    126e:	eb e3       	ldi	r30, 0x3B	; 59
    1270:	f0 e0       	ldi	r31, 0x00	; 0
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	89 81       	ldd	r24, Y+1	; 0x01
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	02 2e       	mov	r0, r18
    1282:	02 c0       	rjmp	.+4      	; 0x1288 <DIO_init+0xb4>
    1284:	88 0f       	add	r24, r24
    1286:	99 1f       	adc	r25, r25
    1288:	0a 94       	dec	r0
    128a:	e2 f7       	brpl	.-8      	; 0x1284 <DIO_init+0xb0>
    128c:	84 2b       	or	r24, r20
    128e:	8c 93       	st	X, r24
    1290:	f3 c0       	rjmp	.+486    	; 0x1478 <DIO_init+0x2a4>
		}
		 
	 }
	 else if (Direction == OUT)
    1292:	8b 81       	ldd	r24, Y+3	; 0x03
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	09 f0       	breq	.+2      	; 0x129a <DIO_init+0xc6>
    1298:	ef c0       	rjmp	.+478    	; 0x1478 <DIO_init+0x2a4>
	 {
		SET_BIT(DDRA,PinNumber) ;
    129a:	aa e3       	ldi	r26, 0x3A	; 58
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ea e3       	ldi	r30, 0x3A	; 58
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	48 2f       	mov	r20, r24
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	28 2f       	mov	r18, r24
    12aa:	30 e0       	ldi	r19, 0x00	; 0
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	90 e0       	ldi	r25, 0x00	; 0
    12b0:	02 2e       	mov	r0, r18
    12b2:	02 c0       	rjmp	.+4      	; 0x12b8 <DIO_init+0xe4>
    12b4:	88 0f       	add	r24, r24
    12b6:	99 1f       	adc	r25, r25
    12b8:	0a 94       	dec	r0
    12ba:	e2 f7       	brpl	.-8      	; 0x12b4 <DIO_init+0xe0>
    12bc:	84 2b       	or	r24, r20
    12be:	8c 93       	st	X, r24
    12c0:	db c0       	rjmp	.+438    	; 0x1478 <DIO_init+0x2a4>
		 // error handling
	 }
	 break ;
 	}
	 case PORT_B:
	 {  if (Direction == IN || Direction==IN_PULLUP_ON)
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	88 23       	and	r24, r24
    12c6:	19 f0       	breq	.+6      	; 0x12ce <DIO_init+0xfa>
    12c8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ca:	82 30       	cpi	r24, 0x02	; 2
    12cc:	61 f5       	brne	.+88     	; 0x1326 <DIO_init+0x152>
	 {
		CLR_BIT(DDRB,PinNumber) ;
    12ce:	a7 e3       	ldi	r26, 0x37	; 55
    12d0:	b0 e0       	ldi	r27, 0x00	; 0
    12d2:	e7 e3       	ldi	r30, 0x37	; 55
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	80 81       	ld	r24, Z
    12d8:	48 2f       	mov	r20, r24
    12da:	89 81       	ldd	r24, Y+1	; 0x01
    12dc:	28 2f       	mov	r18, r24
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	02 2e       	mov	r0, r18
    12e6:	02 c0       	rjmp	.+4      	; 0x12ec <DIO_init+0x118>
    12e8:	88 0f       	add	r24, r24
    12ea:	99 1f       	adc	r25, r25
    12ec:	0a 94       	dec	r0
    12ee:	e2 f7       	brpl	.-8      	; 0x12e8 <DIO_init+0x114>
    12f0:	80 95       	com	r24
    12f2:	84 23       	and	r24, r20
    12f4:	8c 93       	st	X, r24
		if (Direction == IN_PULLUP_ON)
    12f6:	8b 81       	ldd	r24, Y+3	; 0x03
    12f8:	82 30       	cpi	r24, 0x02	; 2
    12fa:	09 f0       	breq	.+2      	; 0x12fe <DIO_init+0x12a>
    12fc:	bd c0       	rjmp	.+378    	; 0x1478 <DIO_init+0x2a4>
		{
			SET_BIT(PORTB,PinNumber) ;
    12fe:	a8 e3       	ldi	r26, 0x38	; 56
    1300:	b0 e0       	ldi	r27, 0x00	; 0
    1302:	e8 e3       	ldi	r30, 0x38	; 56
    1304:	f0 e0       	ldi	r31, 0x00	; 0
    1306:	80 81       	ld	r24, Z
    1308:	48 2f       	mov	r20, r24
    130a:	89 81       	ldd	r24, Y+1	; 0x01
    130c:	28 2f       	mov	r18, r24
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	81 e0       	ldi	r24, 0x01	; 1
    1312:	90 e0       	ldi	r25, 0x00	; 0
    1314:	02 2e       	mov	r0, r18
    1316:	02 c0       	rjmp	.+4      	; 0x131c <DIO_init+0x148>
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	0a 94       	dec	r0
    131e:	e2 f7       	brpl	.-8      	; 0x1318 <DIO_init+0x144>
    1320:	84 2b       	or	r24, r20
    1322:	8c 93       	st	X, r24
    1324:	a9 c0       	rjmp	.+338    	; 0x1478 <DIO_init+0x2a4>
		}

	 }
		 else if (Direction == OUT)
    1326:	8b 81       	ldd	r24, Y+3	; 0x03
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	09 f0       	breq	.+2      	; 0x132e <DIO_init+0x15a>
    132c:	a5 c0       	rjmp	.+330    	; 0x1478 <DIO_init+0x2a4>
		 {
			 SET_BIT(DDRB,PinNumber) ;
    132e:	a7 e3       	ldi	r26, 0x37	; 55
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	e7 e3       	ldi	r30, 0x37	; 55
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	89 81       	ldd	r24, Y+1	; 0x01
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <DIO_init+0x178>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <DIO_init+0x174>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	91 c0       	rjmp	.+290    	; 0x1478 <DIO_init+0x2a4>
			 // error handling
		 }
		 break ;
	 }	
 case PORT_C :
 {  if (Direction == IN || Direction==IN_PULLUP_ON)
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	88 23       	and	r24, r24
    135a:	19 f0       	breq	.+6      	; 0x1362 <DIO_init+0x18e>
    135c:	8b 81       	ldd	r24, Y+3	; 0x03
    135e:	82 30       	cpi	r24, 0x02	; 2
    1360:	61 f5       	brne	.+88     	; 0x13ba <DIO_init+0x1e6>
 	 {
	 	 CLR_BIT(DDRC,PinNumber) ;
    1362:	a4 e3       	ldi	r26, 0x34	; 52
    1364:	b0 e0       	ldi	r27, 0x00	; 0
    1366:	e4 e3       	ldi	r30, 0x34	; 52
    1368:	f0 e0       	ldi	r31, 0x00	; 0
    136a:	80 81       	ld	r24, Z
    136c:	48 2f       	mov	r20, r24
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	02 2e       	mov	r0, r18
    137a:	02 c0       	rjmp	.+4      	; 0x1380 <DIO_init+0x1ac>
    137c:	88 0f       	add	r24, r24
    137e:	99 1f       	adc	r25, r25
    1380:	0a 94       	dec	r0
    1382:	e2 f7       	brpl	.-8      	; 0x137c <DIO_init+0x1a8>
    1384:	80 95       	com	r24
    1386:	84 23       	and	r24, r20
    1388:	8c 93       	st	X, r24
	 	 if (Direction == IN_PULLUP_ON)
    138a:	8b 81       	ldd	r24, Y+3	; 0x03
    138c:	82 30       	cpi	r24, 0x02	; 2
    138e:	09 f0       	breq	.+2      	; 0x1392 <DIO_init+0x1be>
    1390:	73 c0       	rjmp	.+230    	; 0x1478 <DIO_init+0x2a4>
	 	 {
	 		 SET_BIT(PORTC,PinNumber) ;
    1392:	a5 e3       	ldi	r26, 0x35	; 53
    1394:	b0 e0       	ldi	r27, 0x00	; 0
    1396:	e5 e3       	ldi	r30, 0x35	; 53
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	80 81       	ld	r24, Z
    139c:	48 2f       	mov	r20, r24
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	28 2f       	mov	r18, r24
    13a2:	30 e0       	ldi	r19, 0x00	; 0
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	02 2e       	mov	r0, r18
    13aa:	02 c0       	rjmp	.+4      	; 0x13b0 <DIO_init+0x1dc>
    13ac:	88 0f       	add	r24, r24
    13ae:	99 1f       	adc	r25, r25
    13b0:	0a 94       	dec	r0
    13b2:	e2 f7       	brpl	.-8      	; 0x13ac <DIO_init+0x1d8>
    13b4:	84 2b       	or	r24, r20
    13b6:	8c 93       	st	X, r24
    13b8:	5f c0       	rjmp	.+190    	; 0x1478 <DIO_init+0x2a4>
	 	 }

 	 }
	 else if (Direction == OUT)
    13ba:	8b 81       	ldd	r24, Y+3	; 0x03
    13bc:	81 30       	cpi	r24, 0x01	; 1
    13be:	09 f0       	breq	.+2      	; 0x13c2 <DIO_init+0x1ee>
    13c0:	5b c0       	rjmp	.+182    	; 0x1478 <DIO_init+0x2a4>
	 {
		 SET_BIT(DDRC,PinNumber) ;
    13c2:	a4 e3       	ldi	r26, 0x34	; 52
    13c4:	b0 e0       	ldi	r27, 0x00	; 0
    13c6:	e4 e3       	ldi	r30, 0x34	; 52
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	80 81       	ld	r24, Z
    13cc:	48 2f       	mov	r20, r24
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	28 2f       	mov	r18, r24
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	81 e0       	ldi	r24, 0x01	; 1
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	02 2e       	mov	r0, r18
    13da:	02 c0       	rjmp	.+4      	; 0x13e0 <DIO_init+0x20c>
    13dc:	88 0f       	add	r24, r24
    13de:	99 1f       	adc	r25, r25
    13e0:	0a 94       	dec	r0
    13e2:	e2 f7       	brpl	.-8      	; 0x13dc <DIO_init+0x208>
    13e4:	84 2b       	or	r24, r20
    13e6:	8c 93       	st	X, r24
    13e8:	47 c0       	rjmp	.+142    	; 0x1478 <DIO_init+0x2a4>
		 // error handling
	 }
	 break ;
 }
  case PORT_D :
  {  if (Direction == IN || Direction==IN_PULLUP_ON)
    13ea:	8b 81       	ldd	r24, Y+3	; 0x03
    13ec:	88 23       	and	r24, r24
    13ee:	19 f0       	breq	.+6      	; 0x13f6 <DIO_init+0x222>
    13f0:	8b 81       	ldd	r24, Y+3	; 0x03
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	59 f5       	brne	.+86     	; 0x144c <DIO_init+0x278>
	 {
			CLR_BIT(DDRD,PinNumber) ;
    13f6:	a1 e3       	ldi	r26, 0x31	; 49
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e1 e3       	ldi	r30, 0x31	; 49
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <DIO_init+0x240>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <DIO_init+0x23c>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
		if (Direction == IN_PULLUP_ON)
    141e:	8b 81       	ldd	r24, Y+3	; 0x03
    1420:	82 30       	cpi	r24, 0x02	; 2
    1422:	51 f5       	brne	.+84     	; 0x1478 <DIO_init+0x2a4>
		{
			SET_BIT(PORTD,PinNumber) ;
    1424:	a2 e3       	ldi	r26, 0x32	; 50
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	e2 e3       	ldi	r30, 0x32	; 50
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	48 2f       	mov	r20, r24
    1430:	89 81       	ldd	r24, Y+1	; 0x01
    1432:	28 2f       	mov	r18, r24
    1434:	30 e0       	ldi	r19, 0x00	; 0
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	90 e0       	ldi	r25, 0x00	; 0
    143a:	02 2e       	mov	r0, r18
    143c:	02 c0       	rjmp	.+4      	; 0x1442 <DIO_init+0x26e>
    143e:	88 0f       	add	r24, r24
    1440:	99 1f       	adc	r25, r25
    1442:	0a 94       	dec	r0
    1444:	e2 f7       	brpl	.-8      	; 0x143e <DIO_init+0x26a>
    1446:	84 2b       	or	r24, r20
    1448:	8c 93       	st	X, r24
    144a:	16 c0       	rjmp	.+44     	; 0x1478 <DIO_init+0x2a4>
		}

	 }
	  else if (Direction == OUT)
    144c:	8b 81       	ldd	r24, Y+3	; 0x03
    144e:	81 30       	cpi	r24, 0x01	; 1
    1450:	99 f4       	brne	.+38     	; 0x1478 <DIO_init+0x2a4>
	  {
		  SET_BIT(DDRD,PinNumber) ;
    1452:	a1 e3       	ldi	r26, 0x31	; 49
    1454:	b0 e0       	ldi	r27, 0x00	; 0
    1456:	e1 e3       	ldi	r30, 0x31	; 49
    1458:	f0 e0       	ldi	r31, 0x00	; 0
    145a:	80 81       	ld	r24, Z
    145c:	48 2f       	mov	r20, r24
    145e:	89 81       	ldd	r24, Y+1	; 0x01
    1460:	28 2f       	mov	r18, r24
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	90 e0       	ldi	r25, 0x00	; 0
    1468:	02 2e       	mov	r0, r18
    146a:	02 c0       	rjmp	.+4      	; 0x1470 <DIO_init+0x29c>
    146c:	88 0f       	add	r24, r24
    146e:	99 1f       	adc	r25, r25
    1470:	0a 94       	dec	r0
    1472:	e2 f7       	brpl	.-8      	; 0x146c <DIO_init+0x298>
    1474:	84 2b       	or	r24, r20
    1476:	8c 93       	st	X, r24
	  }
	  break ;
  }
}
		
}
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <DIO_write>:
// DIO WRITE IMPLEMENTATION

void DIO_write(uint8_t PinNumber , uint8_t PORTNO , uint8_t Value)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <DIO_write+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <DIO_write+0x8>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	89 83       	std	Y+1, r24	; 0x01
    1498:	6a 83       	std	Y+2, r22	; 0x02
    149a:	4b 83       	std	Y+3, r20	; 0x03
	
	switch (PORTNO)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	82 34       	cpi	r24, 0x42	; 66
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <DIO_write+0x2a>
    14b0:	48 c0       	rjmp	.+144    	; 0x1542 <DIO_write+0xba>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	23 34       	cpi	r18, 0x43	; 67
    14b8:	31 05       	cpc	r19, r1
    14ba:	34 f4       	brge	.+12     	; 0x14c8 <DIO_write+0x40>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	81 34       	cpi	r24, 0x41	; 65
    14c2:	91 05       	cpc	r25, r1
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <DIO_write+0x5a>
    14c6:	cb c0       	rjmp	.+406    	; 0x165e <DIO_write+0x1d6>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	23 34       	cpi	r18, 0x43	; 67
    14ce:	31 05       	cpc	r19, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <DIO_write+0x4c>
    14d2:	67 c0       	rjmp	.+206    	; 0x15a2 <DIO_write+0x11a>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	84 34       	cpi	r24, 0x44	; 68
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <DIO_write+0x58>
    14de:	91 c0       	rjmp	.+290    	; 0x1602 <DIO_write+0x17a>
    14e0:	be c0       	rjmp	.+380    	; 0x165e <DIO_write+0x1d6>
	{
		case PORT_A :
		{ if (Value == LOW)
    14e2:	8b 81       	ldd	r24, Y+3	; 0x03
    14e4:	88 23       	and	r24, r24
    14e6:	a9 f4       	brne	.+42     	; 0x1512 <DIO_write+0x8a>
			{
				CLR_BIT(PORTA,PinNumber)  ;
    14e8:	ab e3       	ldi	r26, 0x3B	; 59
    14ea:	b0 e0       	ldi	r27, 0x00	; 0
    14ec:	eb e3       	ldi	r30, 0x3B	; 59
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	48 2f       	mov	r20, r24
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	81 e0       	ldi	r24, 0x01	; 1
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	02 2e       	mov	r0, r18
    1500:	02 c0       	rjmp	.+4      	; 0x1506 <DIO_write+0x7e>
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	0a 94       	dec	r0
    1508:	e2 f7       	brpl	.-8      	; 0x1502 <DIO_write+0x7a>
    150a:	80 95       	com	r24
    150c:	84 23       	and	r24, r20
    150e:	8c 93       	st	X, r24
    1510:	a6 c0       	rjmp	.+332    	; 0x165e <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	81 30       	cpi	r24, 0x01	; 1
    1516:	09 f0       	breq	.+2      	; 0x151a <DIO_write+0x92>
    1518:	a2 c0       	rjmp	.+324    	; 0x165e <DIO_write+0x1d6>
			{
				SET_BIT(PORTA,PinNumber) ;
    151a:	ab e3       	ldi	r26, 0x3B	; 59
    151c:	b0 e0       	ldi	r27, 0x00	; 0
    151e:	eb e3       	ldi	r30, 0x3B	; 59
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	80 81       	ld	r24, Z
    1524:	48 2f       	mov	r20, r24
    1526:	89 81       	ldd	r24, Y+1	; 0x01
    1528:	28 2f       	mov	r18, r24
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	81 e0       	ldi	r24, 0x01	; 1
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	02 2e       	mov	r0, r18
    1532:	02 c0       	rjmp	.+4      	; 0x1538 <DIO_write+0xb0>
    1534:	88 0f       	add	r24, r24
    1536:	99 1f       	adc	r25, r25
    1538:	0a 94       	dec	r0
    153a:	e2 f7       	brpl	.-8      	; 0x1534 <DIO_write+0xac>
    153c:	84 2b       	or	r24, r20
    153e:	8c 93       	st	X, r24
    1540:	8e c0       	rjmp	.+284    	; 0x165e <DIO_write+0x1d6>
				// error handling
			}
			break ;
		}
		case PORT_B:
		{ if (Value == LOW)
    1542:	8b 81       	ldd	r24, Y+3	; 0x03
    1544:	88 23       	and	r24, r24
    1546:	a9 f4       	brne	.+42     	; 0x1572 <DIO_write+0xea>
			{
				CLR_BIT(PORTB,PinNumber) ;
    1548:	a8 e3       	ldi	r26, 0x38	; 56
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e8 e3       	ldi	r30, 0x38	; 56
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_write+0xde>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_write+0xda>
    156a:	80 95       	com	r24
    156c:	84 23       	and	r24, r20
    156e:	8c 93       	st	X, r24
    1570:	76 c0       	rjmp	.+236    	; 0x165e <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	09 f0       	breq	.+2      	; 0x157a <DIO_write+0xf2>
    1578:	72 c0       	rjmp	.+228    	; 0x165e <DIO_write+0x1d6>
			{
				SET_BIT(PORTB,PinNumber) ;
    157a:	a8 e3       	ldi	r26, 0x38	; 56
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e8 e3       	ldi	r30, 0x38	; 56
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	89 81       	ldd	r24, Y+1	; 0x01
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <DIO_write+0x110>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <DIO_write+0x10c>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	5e c0       	rjmp	.+188    	; 0x165e <DIO_write+0x1d6>
			}
			break ;
		}
		
		case PORT_C :
		{ if (Value == LOW)
    15a2:	8b 81       	ldd	r24, Y+3	; 0x03
    15a4:	88 23       	and	r24, r24
    15a6:	a9 f4       	brne	.+42     	; 0x15d2 <DIO_write+0x14a>
			{
				CLR_BIT(PORTC,PinNumber) ;
    15a8:	a5 e3       	ldi	r26, 0x35	; 53
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	e5 e3       	ldi	r30, 0x35	; 53
    15ae:	f0 e0       	ldi	r31, 0x00	; 0
    15b0:	80 81       	ld	r24, Z
    15b2:	48 2f       	mov	r20, r24
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	28 2f       	mov	r18, r24
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	81 e0       	ldi	r24, 0x01	; 1
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	02 2e       	mov	r0, r18
    15c0:	02 c0       	rjmp	.+4      	; 0x15c6 <DIO_write+0x13e>
    15c2:	88 0f       	add	r24, r24
    15c4:	99 1f       	adc	r25, r25
    15c6:	0a 94       	dec	r0
    15c8:	e2 f7       	brpl	.-8      	; 0x15c2 <DIO_write+0x13a>
    15ca:	80 95       	com	r24
    15cc:	84 23       	and	r24, r20
    15ce:	8c 93       	st	X, r24
    15d0:	46 c0       	rjmp	.+140    	; 0x165e <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	81 30       	cpi	r24, 0x01	; 1
    15d6:	09 f0       	breq	.+2      	; 0x15da <DIO_write+0x152>
    15d8:	42 c0       	rjmp	.+132    	; 0x165e <DIO_write+0x1d6>
			{
				SET_BIT(PORTC,PinNumber) ;
    15da:	a5 e3       	ldi	r26, 0x35	; 53
    15dc:	b0 e0       	ldi	r27, 0x00	; 0
    15de:	e5 e3       	ldi	r30, 0x35	; 53
    15e0:	f0 e0       	ldi	r31, 0x00	; 0
    15e2:	80 81       	ld	r24, Z
    15e4:	48 2f       	mov	r20, r24
    15e6:	89 81       	ldd	r24, Y+1	; 0x01
    15e8:	28 2f       	mov	r18, r24
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	81 e0       	ldi	r24, 0x01	; 1
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	02 2e       	mov	r0, r18
    15f2:	02 c0       	rjmp	.+4      	; 0x15f8 <DIO_write+0x170>
    15f4:	88 0f       	add	r24, r24
    15f6:	99 1f       	adc	r25, r25
    15f8:	0a 94       	dec	r0
    15fa:	e2 f7       	brpl	.-8      	; 0x15f4 <DIO_write+0x16c>
    15fc:	84 2b       	or	r24, r20
    15fe:	8c 93       	st	X, r24
    1600:	2e c0       	rjmp	.+92     	; 0x165e <DIO_write+0x1d6>
				// error handling
			}
			break ;
		}
		case PORT_D :
		{ if (Value == LOW)
    1602:	8b 81       	ldd	r24, Y+3	; 0x03
    1604:	88 23       	and	r24, r24
    1606:	a9 f4       	brne	.+42     	; 0x1632 <DIO_write+0x1aa>
			{
				CLR_BIT(PORTD,PinNumber) ;
    1608:	a2 e3       	ldi	r26, 0x32	; 50
    160a:	b0 e0       	ldi	r27, 0x00	; 0
    160c:	e2 e3       	ldi	r30, 0x32	; 50
    160e:	f0 e0       	ldi	r31, 0x00	; 0
    1610:	80 81       	ld	r24, Z
    1612:	48 2f       	mov	r20, r24
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	81 e0       	ldi	r24, 0x01	; 1
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	02 2e       	mov	r0, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <DIO_write+0x19e>
    1622:	88 0f       	add	r24, r24
    1624:	99 1f       	adc	r25, r25
    1626:	0a 94       	dec	r0
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <DIO_write+0x19a>
    162a:	80 95       	com	r24
    162c:	84 23       	and	r24, r20
    162e:	8c 93       	st	X, r24
    1630:	16 c0       	rjmp	.+44     	; 0x165e <DIO_write+0x1d6>
				
			}
			else if (Value == HIGH)
    1632:	8b 81       	ldd	r24, Y+3	; 0x03
    1634:	81 30       	cpi	r24, 0x01	; 1
    1636:	99 f4       	brne	.+38     	; 0x165e <DIO_write+0x1d6>
			{
				SET_BIT(PORTD,PinNumber) ;
    1638:	a2 e3       	ldi	r26, 0x32	; 50
    163a:	b0 e0       	ldi	r27, 0x00	; 0
    163c:	e2 e3       	ldi	r30, 0x32	; 50
    163e:	f0 e0       	ldi	r31, 0x00	; 0
    1640:	80 81       	ld	r24, Z
    1642:	48 2f       	mov	r20, r24
    1644:	89 81       	ldd	r24, Y+1	; 0x01
    1646:	28 2f       	mov	r18, r24
    1648:	30 e0       	ldi	r19, 0x00	; 0
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	02 2e       	mov	r0, r18
    1650:	02 c0       	rjmp	.+4      	; 0x1656 <DIO_write+0x1ce>
    1652:	88 0f       	add	r24, r24
    1654:	99 1f       	adc	r25, r25
    1656:	0a 94       	dec	r0
    1658:	e2 f7       	brpl	.-8      	; 0x1652 <DIO_write+0x1ca>
    165a:	84 2b       	or	r24, r20
    165c:	8c 93       	st	X, r24
				// error handling
			}
			break ;
		}
	}
}
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	cf 91       	pop	r28
    166a:	df 91       	pop	r29
    166c:	08 95       	ret

0000166e <DIO_toggle>:

// DIO TOGGLE IMPLEMENTATION

void DIO_toggle(uint8_t PinNumber , uint8_t PORTNO )
{
    166e:	df 93       	push	r29
    1670:	cf 93       	push	r28
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
    1676:	2c 97       	sbiw	r28, 0x0c	; 12
    1678:	0f b6       	in	r0, 0x3f	; 63
    167a:	f8 94       	cli
    167c:	de bf       	out	0x3e, r29	; 62
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	cd bf       	out	0x3d, r28	; 61
    1682:	89 83       	std	Y+1, r24	; 0x01
    1684:	6a 83       	std	Y+2, r22	; 0x02
	
	switch (PORTNO)
    1686:	8a 81       	ldd	r24, Y+2	; 0x02
    1688:	28 2f       	mov	r18, r24
    168a:	30 e0       	ldi	r19, 0x00	; 0
    168c:	3c 87       	std	Y+12, r19	; 0x0c
    168e:	2b 87       	std	Y+11, r18	; 0x0b
    1690:	4b 85       	ldd	r20, Y+11	; 0x0b
    1692:	5c 85       	ldd	r21, Y+12	; 0x0c
    1694:	42 34       	cpi	r20, 0x42	; 66
    1696:	51 05       	cpc	r21, r1
    1698:	09 f4       	brne	.+2      	; 0x169c <DIO_toggle+0x2e>
    169a:	61 c0       	rjmp	.+194    	; 0x175e <DIO_toggle+0xf0>
    169c:	8b 85       	ldd	r24, Y+11	; 0x0b
    169e:	9c 85       	ldd	r25, Y+12	; 0x0c
    16a0:	83 34       	cpi	r24, 0x43	; 67
    16a2:	91 05       	cpc	r25, r1
    16a4:	34 f4       	brge	.+12     	; 0x16b2 <DIO_toggle+0x44>
    16a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    16a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    16aa:	21 34       	cpi	r18, 0x41	; 65
    16ac:	31 05       	cpc	r19, r1
    16ae:	71 f0       	breq	.+28     	; 0x16cc <DIO_toggle+0x5e>
    16b0:	30 c1       	rjmp	.+608    	; 0x1912 <DIO_toggle+0x2a4>
    16b2:	4b 85       	ldd	r20, Y+11	; 0x0b
    16b4:	5c 85       	ldd	r21, Y+12	; 0x0c
    16b6:	43 34       	cpi	r20, 0x43	; 67
    16b8:	51 05       	cpc	r21, r1
    16ba:	09 f4       	brne	.+2      	; 0x16be <DIO_toggle+0x50>
    16bc:	99 c0       	rjmp	.+306    	; 0x17f0 <DIO_toggle+0x182>
    16be:	8b 85       	ldd	r24, Y+11	; 0x0b
    16c0:	9c 85       	ldd	r25, Y+12	; 0x0c
    16c2:	84 34       	cpi	r24, 0x44	; 68
    16c4:	91 05       	cpc	r25, r1
    16c6:	09 f4       	brne	.+2      	; 0x16ca <DIO_toggle+0x5c>
    16c8:	dc c0       	rjmp	.+440    	; 0x1882 <DIO_toggle+0x214>
    16ca:	23 c1       	rjmp	.+582    	; 0x1912 <DIO_toggle+0x2a4>
	{
		case PORT_A :
		{ (GET_BIT(PINA,PinNumber)) ? (CLR_BIT(PORTA,PinNumber)) :(SET_BIT(PORTA,PinNumber)) ;
    16cc:	e9 e3       	ldi	r30, 0x39	; 57
    16ce:	f0 e0       	ldi	r31, 0x00	; 0
    16d0:	80 81       	ld	r24, Z
    16d2:	48 2f       	mov	r20, r24
    16d4:	50 e0       	ldi	r21, 0x00	; 0
    16d6:	89 81       	ldd	r24, Y+1	; 0x01
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	81 e0       	ldi	r24, 0x01	; 1
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	02 c0       	rjmp	.+4      	; 0x16e6 <DIO_toggle+0x78>
    16e2:	88 0f       	add	r24, r24
    16e4:	99 1f       	adc	r25, r25
    16e6:	2a 95       	dec	r18
    16e8:	e2 f7       	brpl	.-8      	; 0x16e2 <DIO_toggle+0x74>
    16ea:	9a 01       	movw	r18, r20
    16ec:	28 23       	and	r18, r24
    16ee:	39 23       	and	r19, r25
    16f0:	89 81       	ldd	r24, Y+1	; 0x01
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	a9 01       	movw	r20, r18
    16f8:	02 c0       	rjmp	.+4      	; 0x16fe <DIO_toggle+0x90>
    16fa:	55 95       	asr	r21
    16fc:	47 95       	ror	r20
    16fe:	8a 95       	dec	r24
    1700:	e2 f7       	brpl	.-8      	; 0x16fa <DIO_toggle+0x8c>
    1702:	ca 01       	movw	r24, r20
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	b1 f0       	breq	.+44     	; 0x1734 <DIO_toggle+0xc6>
    1708:	ab e3       	ldi	r26, 0x3B	; 59
    170a:	b0 e0       	ldi	r27, 0x00	; 0
    170c:	eb e3       	ldi	r30, 0x3B	; 59
    170e:	f0 e0       	ldi	r31, 0x00	; 0
    1710:	80 81       	ld	r24, Z
    1712:	48 2f       	mov	r20, r24
    1714:	89 81       	ldd	r24, Y+1	; 0x01
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	90 e0       	ldi	r25, 0x00	; 0
    171e:	02 2e       	mov	r0, r18
    1720:	02 c0       	rjmp	.+4      	; 0x1726 <DIO_toggle+0xb8>
    1722:	88 0f       	add	r24, r24
    1724:	99 1f       	adc	r25, r25
    1726:	0a 94       	dec	r0
    1728:	e2 f7       	brpl	.-8      	; 0x1722 <DIO_toggle+0xb4>
    172a:	80 95       	com	r24
    172c:	84 23       	and	r24, r20
    172e:	8c 93       	st	X, r24
    1730:	5c 91       	ld	r21, X
    1732:	ef c0       	rjmp	.+478    	; 0x1912 <DIO_toggle+0x2a4>
    1734:	ab e3       	ldi	r26, 0x3B	; 59
    1736:	b0 e0       	ldi	r27, 0x00	; 0
    1738:	eb e3       	ldi	r30, 0x3B	; 59
    173a:	f0 e0       	ldi	r31, 0x00	; 0
    173c:	80 81       	ld	r24, Z
    173e:	48 2f       	mov	r20, r24
    1740:	89 81       	ldd	r24, Y+1	; 0x01
    1742:	28 2f       	mov	r18, r24
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	02 2e       	mov	r0, r18
    174c:	02 c0       	rjmp	.+4      	; 0x1752 <DIO_toggle+0xe4>
    174e:	88 0f       	add	r24, r24
    1750:	99 1f       	adc	r25, r25
    1752:	0a 94       	dec	r0
    1754:	e2 f7       	brpl	.-8      	; 0x174e <DIO_toggle+0xe0>
    1756:	84 2b       	or	r24, r20
    1758:	8c 93       	st	X, r24
    175a:	8c 91       	ld	r24, X
    175c:	da c0       	rjmp	.+436    	; 0x1912 <DIO_toggle+0x2a4>
			break ;
		}
		case PORT_B:
		{ (GET_BIT(PINB,PinNumber)) ? (CLR_BIT(PORTB,PinNumber)) :(SET_BIT(PORTB,PinNumber)) ;
    175e:	e6 e3       	ldi	r30, 0x36	; 54
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	50 e0       	ldi	r21, 0x00	; 0
    1768:	89 81       	ldd	r24, Y+1	; 0x01
    176a:	28 2f       	mov	r18, r24
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	81 e0       	ldi	r24, 0x01	; 1
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_toggle+0x10a>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	2a 95       	dec	r18
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_toggle+0x106>
    177c:	9a 01       	movw	r18, r20
    177e:	28 23       	and	r18, r24
    1780:	39 23       	and	r19, r25
    1782:	89 81       	ldd	r24, Y+1	; 0x01
    1784:	88 2f       	mov	r24, r24
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	a9 01       	movw	r20, r18
    178a:	02 c0       	rjmp	.+4      	; 0x1790 <DIO_toggle+0x122>
    178c:	55 95       	asr	r21
    178e:	47 95       	ror	r20
    1790:	8a 95       	dec	r24
    1792:	e2 f7       	brpl	.-8      	; 0x178c <DIO_toggle+0x11e>
    1794:	ca 01       	movw	r24, r20
    1796:	00 97       	sbiw	r24, 0x00	; 0
    1798:	b1 f0       	breq	.+44     	; 0x17c6 <DIO_toggle+0x158>
    179a:	a8 e3       	ldi	r26, 0x38	; 56
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e8 e3       	ldi	r30, 0x38	; 56
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <DIO_toggle+0x14a>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <DIO_toggle+0x146>
    17bc:	80 95       	com	r24
    17be:	84 23       	and	r24, r20
    17c0:	8c 93       	st	X, r24
    17c2:	5c 91       	ld	r21, X
    17c4:	a6 c0       	rjmp	.+332    	; 0x1912 <DIO_toggle+0x2a4>
    17c6:	a8 e3       	ldi	r26, 0x38	; 56
    17c8:	b0 e0       	ldi	r27, 0x00	; 0
    17ca:	e8 e3       	ldi	r30, 0x38	; 56
    17cc:	f0 e0       	ldi	r31, 0x00	; 0
    17ce:	80 81       	ld	r24, Z
    17d0:	48 2f       	mov	r20, r24
    17d2:	89 81       	ldd	r24, Y+1	; 0x01
    17d4:	28 2f       	mov	r18, r24
    17d6:	30 e0       	ldi	r19, 0x00	; 0
    17d8:	81 e0       	ldi	r24, 0x01	; 1
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	02 2e       	mov	r0, r18
    17de:	02 c0       	rjmp	.+4      	; 0x17e4 <DIO_toggle+0x176>
    17e0:	88 0f       	add	r24, r24
    17e2:	99 1f       	adc	r25, r25
    17e4:	0a 94       	dec	r0
    17e6:	e2 f7       	brpl	.-8      	; 0x17e0 <DIO_toggle+0x172>
    17e8:	84 2b       	or	r24, r20
    17ea:	8c 93       	st	X, r24
    17ec:	8c 91       	ld	r24, X
    17ee:	91 c0       	rjmp	.+290    	; 0x1912 <DIO_toggle+0x2a4>
			break ;
		}
		
		case PORT_C :
		{ (GET_BIT(PINC,PinNumber)) ? (CLR_BIT(PORTC,PinNumber)) :(SET_BIT(PORTC,PinNumber)) ;
    17f0:	e3 e3       	ldi	r30, 0x33	; 51
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	50 e0       	ldi	r21, 0x00	; 0
    17fa:	89 81       	ldd	r24, Y+1	; 0x01
    17fc:	28 2f       	mov	r18, r24
    17fe:	30 e0       	ldi	r19, 0x00	; 0
    1800:	81 e0       	ldi	r24, 0x01	; 1
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	02 c0       	rjmp	.+4      	; 0x180a <DIO_toggle+0x19c>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	2a 95       	dec	r18
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <DIO_toggle+0x198>
    180e:	9a 01       	movw	r18, r20
    1810:	28 23       	and	r18, r24
    1812:	39 23       	and	r19, r25
    1814:	89 81       	ldd	r24, Y+1	; 0x01
    1816:	88 2f       	mov	r24, r24
    1818:	90 e0       	ldi	r25, 0x00	; 0
    181a:	a9 01       	movw	r20, r18
    181c:	02 c0       	rjmp	.+4      	; 0x1822 <DIO_toggle+0x1b4>
    181e:	55 95       	asr	r21
    1820:	47 95       	ror	r20
    1822:	8a 95       	dec	r24
    1824:	e2 f7       	brpl	.-8      	; 0x181e <DIO_toggle+0x1b0>
    1826:	ca 01       	movw	r24, r20
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	b1 f0       	breq	.+44     	; 0x1858 <DIO_toggle+0x1ea>
    182c:	a5 e3       	ldi	r26, 0x35	; 53
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	e5 e3       	ldi	r30, 0x35	; 53
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	48 2f       	mov	r20, r24
    1838:	89 81       	ldd	r24, Y+1	; 0x01
    183a:	28 2f       	mov	r18, r24
    183c:	30 e0       	ldi	r19, 0x00	; 0
    183e:	81 e0       	ldi	r24, 0x01	; 1
    1840:	90 e0       	ldi	r25, 0x00	; 0
    1842:	02 2e       	mov	r0, r18
    1844:	02 c0       	rjmp	.+4      	; 0x184a <DIO_toggle+0x1dc>
    1846:	88 0f       	add	r24, r24
    1848:	99 1f       	adc	r25, r25
    184a:	0a 94       	dec	r0
    184c:	e2 f7       	brpl	.-8      	; 0x1846 <DIO_toggle+0x1d8>
    184e:	80 95       	com	r24
    1850:	84 23       	and	r24, r20
    1852:	8c 93       	st	X, r24
    1854:	5c 91       	ld	r21, X
    1856:	5d c0       	rjmp	.+186    	; 0x1912 <DIO_toggle+0x2a4>
    1858:	a5 e3       	ldi	r26, 0x35	; 53
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e5 e3       	ldi	r30, 0x35	; 53
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	48 2f       	mov	r20, r24
    1864:	89 81       	ldd	r24, Y+1	; 0x01
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	81 e0       	ldi	r24, 0x01	; 1
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 2e       	mov	r0, r18
    1870:	02 c0       	rjmp	.+4      	; 0x1876 <DIO_toggle+0x208>
    1872:	88 0f       	add	r24, r24
    1874:	99 1f       	adc	r25, r25
    1876:	0a 94       	dec	r0
    1878:	e2 f7       	brpl	.-8      	; 0x1872 <DIO_toggle+0x204>
    187a:	84 2b       	or	r24, r20
    187c:	8c 93       	st	X, r24
    187e:	8c 91       	ld	r24, X
    1880:	48 c0       	rjmp	.+144    	; 0x1912 <DIO_toggle+0x2a4>
			break ;
		}
		case PORT_D :
		{ (GET_BIT(PIND,PinNumber)) ? (CLR_BIT(PORTD,PinNumber)) :(SET_BIT(PORTD,PinNumber)) ;
    1882:	e0 e3       	ldi	r30, 0x30	; 48
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	50 e0       	ldi	r21, 0x00	; 0
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	28 2f       	mov	r18, r24
    1890:	30 e0       	ldi	r19, 0x00	; 0
    1892:	81 e0       	ldi	r24, 0x01	; 1
    1894:	90 e0       	ldi	r25, 0x00	; 0
    1896:	02 c0       	rjmp	.+4      	; 0x189c <DIO_toggle+0x22e>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	2a 95       	dec	r18
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <DIO_toggle+0x22a>
    18a0:	9a 01       	movw	r18, r20
    18a2:	28 23       	and	r18, r24
    18a4:	39 23       	and	r19, r25
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	88 2f       	mov	r24, r24
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	a9 01       	movw	r20, r18
    18ae:	02 c0       	rjmp	.+4      	; 0x18b4 <DIO_toggle+0x246>
    18b0:	55 95       	asr	r21
    18b2:	47 95       	ror	r20
    18b4:	8a 95       	dec	r24
    18b6:	e2 f7       	brpl	.-8      	; 0x18b0 <DIO_toggle+0x242>
    18b8:	ca 01       	movw	r24, r20
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	b1 f0       	breq	.+44     	; 0x18ea <DIO_toggle+0x27c>
    18be:	a2 e3       	ldi	r26, 0x32	; 50
    18c0:	b0 e0       	ldi	r27, 0x00	; 0
    18c2:	e2 e3       	ldi	r30, 0x32	; 50
    18c4:	f0 e0       	ldi	r31, 0x00	; 0
    18c6:	80 81       	ld	r24, Z
    18c8:	48 2f       	mov	r20, r24
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	28 2f       	mov	r18, r24
    18ce:	30 e0       	ldi	r19, 0x00	; 0
    18d0:	81 e0       	ldi	r24, 0x01	; 1
    18d2:	90 e0       	ldi	r25, 0x00	; 0
    18d4:	02 2e       	mov	r0, r18
    18d6:	02 c0       	rjmp	.+4      	; 0x18dc <DIO_toggle+0x26e>
    18d8:	88 0f       	add	r24, r24
    18da:	99 1f       	adc	r25, r25
    18dc:	0a 94       	dec	r0
    18de:	e2 f7       	brpl	.-8      	; 0x18d8 <DIO_toggle+0x26a>
    18e0:	80 95       	com	r24
    18e2:	84 23       	and	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	5c 91       	ld	r21, X
    18e8:	14 c0       	rjmp	.+40     	; 0x1912 <DIO_toggle+0x2a4>
    18ea:	a2 e3       	ldi	r26, 0x32	; 50
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e2 e3       	ldi	r30, 0x32	; 50
    18f0:	f0 e0       	ldi	r31, 0x00	; 0
    18f2:	80 81       	ld	r24, Z
    18f4:	48 2f       	mov	r20, r24
    18f6:	89 81       	ldd	r24, Y+1	; 0x01
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	81 e0       	ldi	r24, 0x01	; 1
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	02 2e       	mov	r0, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <DIO_toggle+0x29a>
    1904:	88 0f       	add	r24, r24
    1906:	99 1f       	adc	r25, r25
    1908:	0a 94       	dec	r0
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <DIO_toggle+0x296>
    190c:	84 2b       	or	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	8c 91       	ld	r24, X
			break ;
		}
	}
}
    1912:	2c 96       	adiw	r28, 0x0c	; 12
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	f8 94       	cli
    1918:	de bf       	out	0x3e, r29	; 62
    191a:	0f be       	out	0x3f, r0	; 63
    191c:	cd bf       	out	0x3d, r28	; 61
    191e:	cf 91       	pop	r28
    1920:	df 91       	pop	r29
    1922:	08 95       	ret

00001924 <DIO_read>:
//DIO READ AND RETURN A POINTER  IMPLEMENTATION

void DIO_read(uint8_t PinNumber , uint8_t PORTNO , uint8_t*ptr)
{ 
    1924:	df 93       	push	r29
    1926:	cf 93       	push	r28
    1928:	00 d0       	rcall	.+0      	; 0x192a <DIO_read+0x6>
    192a:	00 d0       	rcall	.+0      	; 0x192c <DIO_read+0x8>
    192c:	00 d0       	rcall	.+0      	; 0x192e <DIO_read+0xa>
    192e:	cd b7       	in	r28, 0x3d	; 61
    1930:	de b7       	in	r29, 0x3e	; 62
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	6a 83       	std	Y+2, r22	; 0x02
    1936:	5c 83       	std	Y+4, r21	; 0x04
    1938:	4b 83       	std	Y+3, r20	; 0x03
	switch (PORTNO)
    193a:	8a 81       	ldd	r24, Y+2	; 0x02
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3e 83       	std	Y+6, r19	; 0x06
    1942:	2d 83       	std	Y+5, r18	; 0x05
    1944:	4d 81       	ldd	r20, Y+5	; 0x05
    1946:	5e 81       	ldd	r21, Y+6	; 0x06
    1948:	42 34       	cpi	r20, 0x42	; 66
    194a:	51 05       	cpc	r21, r1
    194c:	c1 f1       	breq	.+112    	; 0x19be <DIO_read+0x9a>
    194e:	8d 81       	ldd	r24, Y+5	; 0x05
    1950:	9e 81       	ldd	r25, Y+6	; 0x06
    1952:	83 34       	cpi	r24, 0x43	; 67
    1954:	91 05       	cpc	r25, r1
    1956:	34 f4       	brge	.+12     	; 0x1964 <DIO_read+0x40>
    1958:	2d 81       	ldd	r18, Y+5	; 0x05
    195a:	3e 81       	ldd	r19, Y+6	; 0x06
    195c:	21 34       	cpi	r18, 0x41	; 65
    195e:	31 05       	cpc	r19, r1
    1960:	71 f0       	breq	.+28     	; 0x197e <DIO_read+0x5a>
    1962:	8d c0       	rjmp	.+282    	; 0x1a7e <DIO_read+0x15a>
    1964:	4d 81       	ldd	r20, Y+5	; 0x05
    1966:	5e 81       	ldd	r21, Y+6	; 0x06
    1968:	43 34       	cpi	r20, 0x43	; 67
    196a:	51 05       	cpc	r21, r1
    196c:	09 f4       	brne	.+2      	; 0x1970 <DIO_read+0x4c>
    196e:	47 c0       	rjmp	.+142    	; 0x19fe <DIO_read+0xda>
    1970:	8d 81       	ldd	r24, Y+5	; 0x05
    1972:	9e 81       	ldd	r25, Y+6	; 0x06
    1974:	84 34       	cpi	r24, 0x44	; 68
    1976:	91 05       	cpc	r25, r1
    1978:	09 f4       	brne	.+2      	; 0x197c <DIO_read+0x58>
    197a:	61 c0       	rjmp	.+194    	; 0x1a3e <DIO_read+0x11a>
    197c:	80 c0       	rjmp	.+256    	; 0x1a7e <DIO_read+0x15a>
	{
		case PORT_A :
		{ *ptr = GET_BIT(PINA,PinNumber)  ;
    197e:	e9 e3       	ldi	r30, 0x39	; 57
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	89 81       	ldd	r24, Y+1	; 0x01
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_read+0x74>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	2a 95       	dec	r18
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_read+0x70>
    199c:	9a 01       	movw	r18, r20
    199e:	28 23       	and	r18, r24
    19a0:	39 23       	and	r19, r25
    19a2:	89 81       	ldd	r24, Y+1	; 0x01
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	a9 01       	movw	r20, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <DIO_read+0x8c>
    19ac:	55 95       	asr	r21
    19ae:	47 95       	ror	r20
    19b0:	8a 95       	dec	r24
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <DIO_read+0x88>
    19b4:	ca 01       	movw	r24, r20
    19b6:	eb 81       	ldd	r30, Y+3	; 0x03
    19b8:	fc 81       	ldd	r31, Y+4	; 0x04
    19ba:	80 83       	st	Z, r24
    19bc:	64 c0       	rjmp	.+200    	; 0x1a86 <DIO_read+0x162>
			break ;
		}
		case PORT_B:
		{ *ptr = GET_BIT(PINB,PinNumber)  ;
    19be:	e6 e3       	ldi	r30, 0x36	; 54
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	50 e0       	ldi	r21, 0x00	; 0
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	28 2f       	mov	r18, r24
    19cc:	30 e0       	ldi	r19, 0x00	; 0
    19ce:	81 e0       	ldi	r24, 0x01	; 1
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_read+0xb4>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	2a 95       	dec	r18
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_read+0xb0>
    19dc:	9a 01       	movw	r18, r20
    19de:	28 23       	and	r18, r24
    19e0:	39 23       	and	r19, r25
    19e2:	89 81       	ldd	r24, Y+1	; 0x01
    19e4:	88 2f       	mov	r24, r24
    19e6:	90 e0       	ldi	r25, 0x00	; 0
    19e8:	a9 01       	movw	r20, r18
    19ea:	02 c0       	rjmp	.+4      	; 0x19f0 <DIO_read+0xcc>
    19ec:	55 95       	asr	r21
    19ee:	47 95       	ror	r20
    19f0:	8a 95       	dec	r24
    19f2:	e2 f7       	brpl	.-8      	; 0x19ec <DIO_read+0xc8>
    19f4:	ca 01       	movw	r24, r20
    19f6:	eb 81       	ldd	r30, Y+3	; 0x03
    19f8:	fc 81       	ldd	r31, Y+4	; 0x04
    19fa:	80 83       	st	Z, r24
    19fc:	44 c0       	rjmp	.+136    	; 0x1a86 <DIO_read+0x162>
			break ;
		}
		
		case PORT_C :
		{ *ptr =GET_BIT (PINC,PinNumber)  ;
    19fe:	e3 e3       	ldi	r30, 0x33	; 51
    1a00:	f0 e0       	ldi	r31, 0x00	; 0
    1a02:	80 81       	ld	r24, Z
    1a04:	48 2f       	mov	r20, r24
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	28 2f       	mov	r18, r24
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	81 e0       	ldi	r24, 0x01	; 1
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	02 c0       	rjmp	.+4      	; 0x1a18 <DIO_read+0xf4>
    1a14:	88 0f       	add	r24, r24
    1a16:	99 1f       	adc	r25, r25
    1a18:	2a 95       	dec	r18
    1a1a:	e2 f7       	brpl	.-8      	; 0x1a14 <DIO_read+0xf0>
    1a1c:	9a 01       	movw	r18, r20
    1a1e:	28 23       	and	r18, r24
    1a20:	39 23       	and	r19, r25
    1a22:	89 81       	ldd	r24, Y+1	; 0x01
    1a24:	88 2f       	mov	r24, r24
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	a9 01       	movw	r20, r18
    1a2a:	02 c0       	rjmp	.+4      	; 0x1a30 <DIO_read+0x10c>
    1a2c:	55 95       	asr	r21
    1a2e:	47 95       	ror	r20
    1a30:	8a 95       	dec	r24
    1a32:	e2 f7       	brpl	.-8      	; 0x1a2c <DIO_read+0x108>
    1a34:	ca 01       	movw	r24, r20
    1a36:	eb 81       	ldd	r30, Y+3	; 0x03
    1a38:	fc 81       	ldd	r31, Y+4	; 0x04
    1a3a:	80 83       	st	Z, r24
    1a3c:	24 c0       	rjmp	.+72     	; 0x1a86 <DIO_read+0x162>
			break ;
		}
		case PORT_D :
		{ *ptr = GET_BIT(PIND,PinNumber)  ;
    1a3e:	e0 e3       	ldi	r30, 0x30	; 48
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	50 e0       	ldi	r21, 0x00	; 0
    1a48:	89 81       	ldd	r24, Y+1	; 0x01
    1a4a:	28 2f       	mov	r18, r24
    1a4c:	30 e0       	ldi	r19, 0x00	; 0
    1a4e:	81 e0       	ldi	r24, 0x01	; 1
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_read+0x134>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	2a 95       	dec	r18
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_read+0x130>
    1a5c:	9a 01       	movw	r18, r20
    1a5e:	28 23       	and	r18, r24
    1a60:	39 23       	and	r19, r25
    1a62:	89 81       	ldd	r24, Y+1	; 0x01
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	a9 01       	movw	r20, r18
    1a6a:	02 c0       	rjmp	.+4      	; 0x1a70 <DIO_read+0x14c>
    1a6c:	55 95       	asr	r21
    1a6e:	47 95       	ror	r20
    1a70:	8a 95       	dec	r24
    1a72:	e2 f7       	brpl	.-8      	; 0x1a6c <DIO_read+0x148>
    1a74:	ca 01       	movw	r24, r20
    1a76:	eb 81       	ldd	r30, Y+3	; 0x03
    1a78:	fc 81       	ldd	r31, Y+4	; 0x04
    1a7a:	80 83       	st	Z, r24
    1a7c:	04 c0       	rjmp	.+8      	; 0x1a86 <DIO_read+0x162>
			break ;
		}
		default :
		{

		 *ptr = -1 ;	// error detection
    1a7e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a80:	fc 81       	ldd	r31, Y+4	; 0x04
    1a82:	8f ef       	ldi	r24, 0xFF	; 255
    1a84:	80 83       	st	Z, r24

		}
	}
}
    1a86:	26 96       	adiw	r28, 0x06	; 6
    1a88:	0f b6       	in	r0, 0x3f	; 63
    1a8a:	f8 94       	cli
    1a8c:	de bf       	out	0x3e, r29	; 62
    1a8e:	0f be       	out	0x3f, r0	; 63
    1a90:	cd bf       	out	0x3d, r28	; 61
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <DIO_returnbit>:
// DIO RETURN BIT IMPLEMENTATION
enum Value DIO_returnbit(uint8_t PinNumber , uint8_t PORTNO)
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	00 d0       	rcall	.+0      	; 0x1a9e <DIO_returnbit+0x6>
    1a9e:	00 d0       	rcall	.+0      	; 0x1aa0 <DIO_returnbit+0x8>
    1aa0:	0f 92       	push	r0
    1aa2:	cd b7       	in	r28, 0x3d	; 61
    1aa4:	de b7       	in	r29, 0x3e	; 62
    1aa6:	89 83       	std	Y+1, r24	; 0x01
    1aa8:	6a 83       	std	Y+2, r22	; 0x02
	switch (PORTNO)
    1aaa:	8a 81       	ldd	r24, Y+2	; 0x02
    1aac:	28 2f       	mov	r18, r24
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	3d 83       	std	Y+5, r19	; 0x05
    1ab2:	2c 83       	std	Y+4, r18	; 0x04
    1ab4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ab6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ab8:	42 34       	cpi	r20, 0x42	; 66
    1aba:	51 05       	cpc	r21, r1
    1abc:	b1 f1       	breq	.+108    	; 0x1b2a <DIO_returnbit+0x92>
    1abe:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac2:	83 34       	cpi	r24, 0x43	; 67
    1ac4:	91 05       	cpc	r25, r1
    1ac6:	34 f4       	brge	.+12     	; 0x1ad4 <DIO_returnbit+0x3c>
    1ac8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aca:	3d 81       	ldd	r19, Y+5	; 0x05
    1acc:	21 34       	cpi	r18, 0x41	; 65
    1ace:	31 05       	cpc	r19, r1
    1ad0:	71 f0       	breq	.+28     	; 0x1aee <DIO_returnbit+0x56>
    1ad2:	85 c0       	rjmp	.+266    	; 0x1bde <DIO_returnbit+0x146>
    1ad4:	4c 81       	ldd	r20, Y+4	; 0x04
    1ad6:	5d 81       	ldd	r21, Y+5	; 0x05
    1ad8:	43 34       	cpi	r20, 0x43	; 67
    1ada:	51 05       	cpc	r21, r1
    1adc:	09 f4       	brne	.+2      	; 0x1ae0 <DIO_returnbit+0x48>
    1ade:	43 c0       	rjmp	.+134    	; 0x1b66 <DIO_returnbit+0xce>
    1ae0:	8c 81       	ldd	r24, Y+4	; 0x04
    1ae2:	9d 81       	ldd	r25, Y+5	; 0x05
    1ae4:	84 34       	cpi	r24, 0x44	; 68
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	09 f4       	brne	.+2      	; 0x1aec <DIO_returnbit+0x54>
    1aea:	5b c0       	rjmp	.+182    	; 0x1ba2 <DIO_returnbit+0x10a>
    1aec:	78 c0       	rjmp	.+240    	; 0x1bde <DIO_returnbit+0x146>
	{
		case PORT_A :
		{
			return GET_BIT(PINA,PinNumber)  ;
    1aee:	e9 e3       	ldi	r30, 0x39	; 57
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	80 81       	ld	r24, Z
    1af4:	48 2f       	mov	r20, r24
    1af6:	50 e0       	ldi	r21, 0x00	; 0
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	81 e0       	ldi	r24, 0x01	; 1
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	02 c0       	rjmp	.+4      	; 0x1b08 <DIO_returnbit+0x70>
    1b04:	88 0f       	add	r24, r24
    1b06:	99 1f       	adc	r25, r25
    1b08:	2a 95       	dec	r18
    1b0a:	e2 f7       	brpl	.-8      	; 0x1b04 <DIO_returnbit+0x6c>
    1b0c:	9a 01       	movw	r18, r20
    1b0e:	28 23       	and	r18, r24
    1b10:	39 23       	and	r19, r25
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	88 2f       	mov	r24, r24
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	a9 01       	movw	r20, r18
    1b1a:	02 c0       	rjmp	.+4      	; 0x1b20 <DIO_returnbit+0x88>
    1b1c:	55 95       	asr	r21
    1b1e:	47 95       	ror	r20
    1b20:	8a 95       	dec	r24
    1b22:	e2 f7       	brpl	.-8      	; 0x1b1c <DIO_returnbit+0x84>
    1b24:	ca 01       	movw	r24, r20
    1b26:	8b 83       	std	Y+3, r24	; 0x03
    1b28:	5c c0       	rjmp	.+184    	; 0x1be2 <DIO_returnbit+0x14a>

		}
		case PORT_B:
		{
			return GET_BIT(PINB,PinNumber)  ;
    1b2a:	e6 e3       	ldi	r30, 0x36	; 54
    1b2c:	f0 e0       	ldi	r31, 0x00	; 0
    1b2e:	80 81       	ld	r24, Z
    1b30:	48 2f       	mov	r20, r24
    1b32:	50 e0       	ldi	r21, 0x00	; 0
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	28 2f       	mov	r18, r24
    1b38:	30 e0       	ldi	r19, 0x00	; 0
    1b3a:	81 e0       	ldi	r24, 0x01	; 1
    1b3c:	90 e0       	ldi	r25, 0x00	; 0
    1b3e:	02 c0       	rjmp	.+4      	; 0x1b44 <DIO_returnbit+0xac>
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	2a 95       	dec	r18
    1b46:	e2 f7       	brpl	.-8      	; 0x1b40 <DIO_returnbit+0xa8>
    1b48:	9a 01       	movw	r18, r20
    1b4a:	28 23       	and	r18, r24
    1b4c:	39 23       	and	r19, r25
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a9 01       	movw	r20, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <DIO_returnbit+0xc4>
    1b58:	55 95       	asr	r21
    1b5a:	47 95       	ror	r20
    1b5c:	8a 95       	dec	r24
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <DIO_returnbit+0xc0>
    1b60:	ca 01       	movw	r24, r20
    1b62:	8b 83       	std	Y+3, r24	; 0x03
    1b64:	3e c0       	rjmp	.+124    	; 0x1be2 <DIO_returnbit+0x14a>
		}

		case PORT_C :
		{ return  GET_BIT (PINC,PinNumber)  ;
    1b66:	e3 e3       	ldi	r30, 0x33	; 51
    1b68:	f0 e0       	ldi	r31, 0x00	; 0
    1b6a:	80 81       	ld	r24, Z
    1b6c:	48 2f       	mov	r20, r24
    1b6e:	50 e0       	ldi	r21, 0x00	; 0
    1b70:	89 81       	ldd	r24, Y+1	; 0x01
    1b72:	28 2f       	mov	r18, r24
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	81 e0       	ldi	r24, 0x01	; 1
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_returnbit+0xe8>
    1b7c:	88 0f       	add	r24, r24
    1b7e:	99 1f       	adc	r25, r25
    1b80:	2a 95       	dec	r18
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_returnbit+0xe4>
    1b84:	9a 01       	movw	r18, r20
    1b86:	28 23       	and	r18, r24
    1b88:	39 23       	and	r19, r25
    1b8a:	89 81       	ldd	r24, Y+1	; 0x01
    1b8c:	88 2f       	mov	r24, r24
    1b8e:	90 e0       	ldi	r25, 0x00	; 0
    1b90:	a9 01       	movw	r20, r18
    1b92:	02 c0       	rjmp	.+4      	; 0x1b98 <DIO_returnbit+0x100>
    1b94:	55 95       	asr	r21
    1b96:	47 95       	ror	r20
    1b98:	8a 95       	dec	r24
    1b9a:	e2 f7       	brpl	.-8      	; 0x1b94 <DIO_returnbit+0xfc>
    1b9c:	ca 01       	movw	r24, r20
    1b9e:	8b 83       	std	Y+3, r24	; 0x03
    1ba0:	20 c0       	rjmp	.+64     	; 0x1be2 <DIO_returnbit+0x14a>

		}
		case PORT_D :
		{ return  GET_BIT(PIND,PinNumber)  ;
    1ba2:	e0 e3       	ldi	r30, 0x30	; 48
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	80 81       	ld	r24, Z
    1ba8:	48 2f       	mov	r20, r24
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	89 81       	ldd	r24, Y+1	; 0x01
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_returnbit+0x124>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_returnbit+0x120>
    1bc0:	9a 01       	movw	r18, r20
    1bc2:	28 23       	and	r18, r24
    1bc4:	39 23       	and	r19, r25
    1bc6:	89 81       	ldd	r24, Y+1	; 0x01
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <DIO_returnbit+0x13c>
    1bd0:	55 95       	asr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	8a 95       	dec	r24
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <DIO_returnbit+0x138>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	8b 83       	std	Y+3, r24	; 0x03
    1bdc:	02 c0       	rjmp	.+4      	; 0x1be2 <DIO_returnbit+0x14a>
		}
		default :
		{
			return -1 ; // error detection
    1bde:	5f ef       	ldi	r21, 0xFF	; 255
    1be0:	5b 83       	std	Y+3, r21	; 0x03
    1be2:	8b 81       	ldd	r24, Y+3	; 0x03

		}
	}
}
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <LED_init>:
 *  Author: mohamed
 */ 
#include "led.h"

void LED_init(uint8_t LedPort , uint8_t LedPin )
{ DIO_init(LedPin,LedPort,OUT) ;
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	00 d0       	rcall	.+0      	; 0x1bfa <LED_init+0x6>
    1bfa:	cd b7       	in	r28, 0x3d	; 61
    1bfc:	de b7       	in	r29, 0x3e	; 62
    1bfe:	89 83       	std	Y+1, r24	; 0x01
    1c00:	6a 83       	std	Y+2, r22	; 0x02
    1c02:	8a 81       	ldd	r24, Y+2	; 0x02
    1c04:	69 81       	ldd	r22, Y+1	; 0x01
    1c06:	41 e0       	ldi	r20, 0x01	; 1
    1c08:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
}
    1c0c:	0f 90       	pop	r0
    1c0e:	0f 90       	pop	r0
    1c10:	cf 91       	pop	r28
    1c12:	df 91       	pop	r29
    1c14:	08 95       	ret

00001c16 <LED_on>:
void LED_on(uint8_t LedPort , uint8_t LedPin) // output device 
{
    1c16:	df 93       	push	r29
    1c18:	cf 93       	push	r28
    1c1a:	00 d0       	rcall	.+0      	; 0x1c1c <LED_on+0x6>
    1c1c:	cd b7       	in	r28, 0x3d	; 61
    1c1e:	de b7       	in	r29, 0x3e	; 62
    1c20:	89 83       	std	Y+1, r24	; 0x01
    1c22:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(LedPin,LedPort,HIGH) ;
    1c24:	8a 81       	ldd	r24, Y+2	; 0x02
    1c26:	69 81       	ldd	r22, Y+1	; 0x01
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
}
    1c2e:	0f 90       	pop	r0
    1c30:	0f 90       	pop	r0
    1c32:	cf 91       	pop	r28
    1c34:	df 91       	pop	r29
    1c36:	08 95       	ret

00001c38 <LED_off>:
void LED_off(uint8_t LedPort , uint8_t LedPin)
{
    1c38:	df 93       	push	r29
    1c3a:	cf 93       	push	r28
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <LED_off+0x6>
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
    1c42:	89 83       	std	Y+1, r24	; 0x01
    1c44:	6a 83       	std	Y+2, r22	; 0x02
	DIO_write(LedPin,LedPort,LOW) ;
    1c46:	8a 81       	ldd	r24, Y+2	; 0x02
    1c48:	69 81       	ldd	r22, Y+1	; 0x01
    1c4a:	40 e0       	ldi	r20, 0x00	; 0
    1c4c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
}
    1c50:	0f 90       	pop	r0
    1c52:	0f 90       	pop	r0
    1c54:	cf 91       	pop	r28
    1c56:	df 91       	pop	r29
    1c58:	08 95       	ret

00001c5a <LED_toggle>:
 void LED_toggle(uint8_t LedPort , uint8_t LedPin)
 {
    1c5a:	df 93       	push	r29
    1c5c:	cf 93       	push	r28
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <LED_toggle+0x6>
    1c60:	cd b7       	in	r28, 0x3d	; 61
    1c62:	de b7       	in	r29, 0x3e	; 62
    1c64:	89 83       	std	Y+1, r24	; 0x01
    1c66:	6a 83       	std	Y+2, r22	; 0x02
	 DIO_toggle(LedPin,LedPort) ;
    1c68:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6a:	69 81       	ldd	r22, Y+1	; 0x01
    1c6c:	0e 94 37 0b 	call	0x166e	; 0x166e <DIO_toggle>
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	cf 91       	pop	r28
    1c76:	df 91       	pop	r29
    1c78:	08 95       	ret

00001c7a <LCD_4bit_init>:
#include "lcd.h"



void LCD_4bit_init ()
{
    1c7a:	0f 93       	push	r16
    1c7c:	1f 93       	push	r17
    1c7e:	df 93       	push	r29
    1c80:	cf 93       	push	r28
    1c82:	cd b7       	in	r28, 0x3d	; 61
    1c84:	de b7       	in	r29, 0x3e	; 62
    1c86:	c4 56       	subi	r28, 0x64	; 100
    1c88:	d0 40       	sbci	r29, 0x00	; 0
    1c8a:	0f b6       	in	r0, 0x3f	; 63
    1c8c:	f8 94       	cli
    1c8e:	de bf       	out	0x3e, r29	; 62
    1c90:	0f be       	out	0x3f, r0	; 63
    1c92:	cd bf       	out	0x3d, r28	; 61
	DIO_init(EN,EN_PORT,OUT) ;
    1c94:	83 e0       	ldi	r24, 0x03	; 3
    1c96:	62 e4       	ldi	r22, 0x42	; 66
    1c98:	41 e0       	ldi	r20, 0x01	; 1
    1c9a:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(RS,RS_PORT,OUT) ;
    1c9e:	81 e0       	ldi	r24, 0x01	; 1
    1ca0:	62 e4       	ldi	r22, 0x42	; 66
    1ca2:	41 e0       	ldi	r20, 0x01	; 1
    1ca4:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(RW,RW_PORT,OUT) ;
    1ca8:	82 e0       	ldi	r24, 0x02	; 2
    1caa:	62 e4       	ldi	r22, 0x42	; 66
    1cac:	41 e0       	ldi	r20, 0x01	; 1
    1cae:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(D7,LCD_PORT,OUT) ;
    1cb2:	87 e0       	ldi	r24, 0x07	; 7
    1cb4:	61 e4       	ldi	r22, 0x41	; 65
    1cb6:	41 e0       	ldi	r20, 0x01	; 1
    1cb8:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(D6,LCD_PORT,OUT) ;
    1cbc:	86 e0       	ldi	r24, 0x06	; 6
    1cbe:	61 e4       	ldi	r22, 0x41	; 65
    1cc0:	41 e0       	ldi	r20, 0x01	; 1
    1cc2:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(D5,LCD_PORT,OUT) ;
    1cc6:	85 e0       	ldi	r24, 0x05	; 5
    1cc8:	61 e4       	ldi	r22, 0x41	; 65
    1cca:	41 e0       	ldi	r20, 0x01	; 1
    1ccc:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(D4,LCD_PORT,OUT) ;
    1cd0:	84 e0       	ldi	r24, 0x04	; 4
    1cd2:	61 e4       	ldi	r22, 0x41	; 65
    1cd4:	41 e0       	ldi	r20, 0x01	; 1
    1cd6:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
    1cda:	fe 01       	movw	r30, r28
    1cdc:	ef 59       	subi	r30, 0x9F	; 159
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	ac e0       	ldi	r26, 0x0C	; 12
    1ce6:	b2 e4       	ldi	r27, 0x42	; 66
    1ce8:	80 83       	st	Z, r24
    1cea:	91 83       	std	Z+1, r25	; 0x01
    1cec:	a2 83       	std	Z+2, r26	; 0x02
    1cee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cf0:	8e 01       	movw	r16, r28
    1cf2:	03 5a       	subi	r16, 0xA3	; 163
    1cf4:	1f 4f       	sbci	r17, 0xFF	; 255
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ef 59       	subi	r30, 0x9F	; 159
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	60 81       	ld	r22, Z
    1cfe:	71 81       	ldd	r23, Z+1	; 0x01
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	93 81       	ldd	r25, Z+3	; 0x03
    1d04:	20 e0       	ldi	r18, 0x00	; 0
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	4a e7       	ldi	r20, 0x7A	; 122
    1d0a:	53 e4       	ldi	r21, 0x43	; 67
    1d0c:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	f8 01       	movw	r30, r16
    1d16:	80 83       	st	Z, r24
    1d18:	91 83       	std	Z+1, r25	; 0x01
    1d1a:	a2 83       	std	Z+2, r26	; 0x02
    1d1c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d1e:	fe 01       	movw	r30, r28
    1d20:	e3 5a       	subi	r30, 0xA3	; 163
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	82 81       	ldd	r24, Z+2	; 0x02
    1d2a:	93 81       	ldd	r25, Z+3	; 0x03
    1d2c:	20 e0       	ldi	r18, 0x00	; 0
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	40 e8       	ldi	r20, 0x80	; 128
    1d32:	5f e3       	ldi	r21, 0x3F	; 63
    1d34:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1d38:	88 23       	and	r24, r24
    1d3a:	44 f4       	brge	.+16     	; 0x1d4c <LCD_4bit_init+0xd2>
		__ticks = 1;
    1d3c:	fe 01       	movw	r30, r28
    1d3e:	e5 5a       	subi	r30, 0xA5	; 165
    1d40:	ff 4f       	sbci	r31, 0xFF	; 255
    1d42:	81 e0       	ldi	r24, 0x01	; 1
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	91 83       	std	Z+1, r25	; 0x01
    1d48:	80 83       	st	Z, r24
    1d4a:	64 c0       	rjmp	.+200    	; 0x1e14 <LCD_4bit_init+0x19a>
	else if (__tmp > 65535)
    1d4c:	fe 01       	movw	r30, r28
    1d4e:	e3 5a       	subi	r30, 0xA3	; 163
    1d50:	ff 4f       	sbci	r31, 0xFF	; 255
    1d52:	60 81       	ld	r22, Z
    1d54:	71 81       	ldd	r23, Z+1	; 0x01
    1d56:	82 81       	ldd	r24, Z+2	; 0x02
    1d58:	93 81       	ldd	r25, Z+3	; 0x03
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	3f ef       	ldi	r19, 0xFF	; 255
    1d5e:	4f e7       	ldi	r20, 0x7F	; 127
    1d60:	57 e4       	ldi	r21, 0x47	; 71
    1d62:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1d66:	18 16       	cp	r1, r24
    1d68:	0c f0       	brlt	.+2      	; 0x1d6c <LCD_4bit_init+0xf2>
    1d6a:	43 c0       	rjmp	.+134    	; 0x1df2 <LCD_4bit_init+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d6c:	fe 01       	movw	r30, r28
    1d6e:	ef 59       	subi	r30, 0x9F	; 159
    1d70:	ff 4f       	sbci	r31, 0xFF	; 255
    1d72:	60 81       	ld	r22, Z
    1d74:	71 81       	ldd	r23, Z+1	; 0x01
    1d76:	82 81       	ldd	r24, Z+2	; 0x02
    1d78:	93 81       	ldd	r25, Z+3	; 0x03
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e2       	ldi	r20, 0x20	; 32
    1d80:	51 e4       	ldi	r21, 0x41	; 65
    1d82:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	8e 01       	movw	r16, r28
    1d8c:	05 5a       	subi	r16, 0xA5	; 165
    1d8e:	1f 4f       	sbci	r17, 0xFF	; 255
    1d90:	bc 01       	movw	r22, r24
    1d92:	cd 01       	movw	r24, r26
    1d94:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d98:	dc 01       	movw	r26, r24
    1d9a:	cb 01       	movw	r24, r22
    1d9c:	f8 01       	movw	r30, r16
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	1f c0       	rjmp	.+62     	; 0x1de2 <LCD_4bit_init+0x168>
    1da4:	fe 01       	movw	r30, r28
    1da6:	e7 5a       	subi	r30, 0xA7	; 167
    1da8:	ff 4f       	sbci	r31, 0xFF	; 255
    1daa:	89 e1       	ldi	r24, 0x19	; 25
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	91 83       	std	Z+1, r25	; 0x01
    1db0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1db2:	fe 01       	movw	r30, r28
    1db4:	e7 5a       	subi	r30, 0xA7	; 167
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	f1 f7       	brne	.-4      	; 0x1dbc <LCD_4bit_init+0x142>
    1dc0:	fe 01       	movw	r30, r28
    1dc2:	e7 5a       	subi	r30, 0xA7	; 167
    1dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc6:	91 83       	std	Z+1, r25	; 0x01
    1dc8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dca:	de 01       	movw	r26, r28
    1dcc:	a5 5a       	subi	r26, 0xA5	; 165
    1dce:	bf 4f       	sbci	r27, 0xFF	; 255
    1dd0:	fe 01       	movw	r30, r28
    1dd2:	e5 5a       	subi	r30, 0xA5	; 165
    1dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1dd6:	80 81       	ld	r24, Z
    1dd8:	91 81       	ldd	r25, Z+1	; 0x01
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	11 96       	adiw	r26, 0x01	; 1
    1dde:	9c 93       	st	X, r25
    1de0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1de2:	fe 01       	movw	r30, r28
    1de4:	e5 5a       	subi	r30, 0xA5	; 165
    1de6:	ff 4f       	sbci	r31, 0xFF	; 255
    1de8:	80 81       	ld	r24, Z
    1dea:	91 81       	ldd	r25, Z+1	; 0x01
    1dec:	00 97       	sbiw	r24, 0x00	; 0
    1dee:	d1 f6       	brne	.-76     	; 0x1da4 <LCD_4bit_init+0x12a>
    1df0:	27 c0       	rjmp	.+78     	; 0x1e40 <LCD_4bit_init+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df2:	8e 01       	movw	r16, r28
    1df4:	05 5a       	subi	r16, 0xA5	; 165
    1df6:	1f 4f       	sbci	r17, 0xFF	; 255
    1df8:	fe 01       	movw	r30, r28
    1dfa:	e3 5a       	subi	r30, 0xA3	; 163
    1dfc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfe:	60 81       	ld	r22, Z
    1e00:	71 81       	ldd	r23, Z+1	; 0x01
    1e02:	82 81       	ldd	r24, Z+2	; 0x02
    1e04:	93 81       	ldd	r25, Z+3	; 0x03
    1e06:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	f8 01       	movw	r30, r16
    1e10:	91 83       	std	Z+1, r25	; 0x01
    1e12:	80 83       	st	Z, r24
    1e14:	de 01       	movw	r26, r28
    1e16:	a9 5a       	subi	r26, 0xA9	; 169
    1e18:	bf 4f       	sbci	r27, 0xFF	; 255
    1e1a:	fe 01       	movw	r30, r28
    1e1c:	e5 5a       	subi	r30, 0xA5	; 165
    1e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e20:	80 81       	ld	r24, Z
    1e22:	91 81       	ldd	r25, Z+1	; 0x01
    1e24:	8d 93       	st	X+, r24
    1e26:	9c 93       	st	X, r25
    1e28:	fe 01       	movw	r30, r28
    1e2a:	e9 5a       	subi	r30, 0xA9	; 169
    1e2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e2e:	80 81       	ld	r24, Z
    1e30:	91 81       	ldd	r25, Z+1	; 0x01
    1e32:	01 97       	sbiw	r24, 0x01	; 1
    1e34:	f1 f7       	brne	.-4      	; 0x1e32 <LCD_4bit_init+0x1b8>
    1e36:	fe 01       	movw	r30, r28
    1e38:	e9 5a       	subi	r30, 0xA9	; 169
    1e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e3c:	91 83       	std	Z+1, r25	; 0x01
    1e3e:	80 83       	st	Z, r24
	 * Function set:
	 *	DL = 1 : 8 bit interface operation
	 *	N = 0 : 1 - line display
	 *	F = 0 : 5 x 7 dot character font
	 */
	LCD_4bit_sendcmd (0x02);
    1e40:	82 e0       	ldi	r24, 0x02	; 2
    1e42:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd (0x28); //0bNF00 --> 4bit Mode SELECTED
    1e46:	88 e2       	ldi	r24, 0x28	; 40
    1e48:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    1e4c:	fe 01       	movw	r30, r28
    1e4e:	ed 5a       	subi	r30, 0xAD	; 173
    1e50:	ff 4f       	sbci	r31, 0xFF	; 255
    1e52:	80 e0       	ldi	r24, 0x00	; 0
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	a0 e2       	ldi	r26, 0x20	; 32
    1e58:	b2 e4       	ldi	r27, 0x42	; 66
    1e5a:	80 83       	st	Z, r24
    1e5c:	91 83       	std	Z+1, r25	; 0x01
    1e5e:	a2 83       	std	Z+2, r26	; 0x02
    1e60:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e62:	8e 01       	movw	r16, r28
    1e64:	01 5b       	subi	r16, 0xB1	; 177
    1e66:	1f 4f       	sbci	r17, 0xFF	; 255
    1e68:	fe 01       	movw	r30, r28
    1e6a:	ed 5a       	subi	r30, 0xAD	; 173
    1e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6e:	60 81       	ld	r22, Z
    1e70:	71 81       	ldd	r23, Z+1	; 0x01
    1e72:	82 81       	ldd	r24, Z+2	; 0x02
    1e74:	93 81       	ldd	r25, Z+3	; 0x03
    1e76:	2b ea       	ldi	r18, 0xAB	; 171
    1e78:	3a ea       	ldi	r19, 0xAA	; 170
    1e7a:	4a ea       	ldi	r20, 0xAA	; 170
    1e7c:	5e e3       	ldi	r21, 0x3E	; 62
    1e7e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e82:	dc 01       	movw	r26, r24
    1e84:	cb 01       	movw	r24, r22
    1e86:	f8 01       	movw	r30, r16
    1e88:	80 83       	st	Z, r24
    1e8a:	91 83       	std	Z+1, r25	; 0x01
    1e8c:	a2 83       	std	Z+2, r26	; 0x02
    1e8e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1e90:	fe 01       	movw	r30, r28
    1e92:	e1 5b       	subi	r30, 0xB1	; 177
    1e94:	ff 4f       	sbci	r31, 0xFF	; 255
    1e96:	60 81       	ld	r22, Z
    1e98:	71 81       	ldd	r23, Z+1	; 0x01
    1e9a:	82 81       	ldd	r24, Z+2	; 0x02
    1e9c:	93 81       	ldd	r25, Z+3	; 0x03
    1e9e:	20 e0       	ldi	r18, 0x00	; 0
    1ea0:	30 e0       	ldi	r19, 0x00	; 0
    1ea2:	40 e8       	ldi	r20, 0x80	; 128
    1ea4:	5f e3       	ldi	r21, 0x3F	; 63
    1ea6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1eaa:	88 23       	and	r24, r24
    1eac:	34 f4       	brge	.+12     	; 0x1eba <LCD_4bit_init+0x240>
		__ticks = 1;
    1eae:	fe 01       	movw	r30, r28
    1eb0:	e2 5b       	subi	r30, 0xB2	; 178
    1eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	80 83       	st	Z, r24
    1eb8:	e0 c0       	rjmp	.+448    	; 0x207a <LCD_4bit_init+0x400>
	else if (__tmp > 255)
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e1 5b       	subi	r30, 0xB1	; 177
    1ebe:	ff 4f       	sbci	r31, 0xFF	; 255
    1ec0:	60 81       	ld	r22, Z
    1ec2:	71 81       	ldd	r23, Z+1	; 0x01
    1ec4:	82 81       	ldd	r24, Z+2	; 0x02
    1ec6:	93 81       	ldd	r25, Z+3	; 0x03
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4f e7       	ldi	r20, 0x7F	; 127
    1ece:	53 e4       	ldi	r21, 0x43	; 67
    1ed0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1ed4:	18 16       	cp	r1, r24
    1ed6:	0c f0       	brlt	.+2      	; 0x1eda <LCD_4bit_init+0x260>
    1ed8:	c0 c0       	rjmp	.+384    	; 0x205a <LCD_4bit_init+0x3e0>
	{
		_delay_ms(__us / 1000.0);
    1eda:	fe 01       	movw	r30, r28
    1edc:	ed 5a       	subi	r30, 0xAD	; 173
    1ede:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee0:	60 81       	ld	r22, Z
    1ee2:	71 81       	ldd	r23, Z+1	; 0x01
    1ee4:	82 81       	ldd	r24, Z+2	; 0x02
    1ee6:	93 81       	ldd	r25, Z+3	; 0x03
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	4a e7       	ldi	r20, 0x7A	; 122
    1eee:	54 e4       	ldi	r21, 0x44	; 68
    1ef0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1ef4:	dc 01       	movw	r26, r24
    1ef6:	cb 01       	movw	r24, r22
    1ef8:	fe 01       	movw	r30, r28
    1efa:	e6 5b       	subi	r30, 0xB6	; 182
    1efc:	ff 4f       	sbci	r31, 0xFF	; 255
    1efe:	80 83       	st	Z, r24
    1f00:	91 83       	std	Z+1, r25	; 0x01
    1f02:	a2 83       	std	Z+2, r26	; 0x02
    1f04:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f06:	8e 01       	movw	r16, r28
    1f08:	0a 5b       	subi	r16, 0xBA	; 186
    1f0a:	1f 4f       	sbci	r17, 0xFF	; 255
    1f0c:	fe 01       	movw	r30, r28
    1f0e:	e6 5b       	subi	r30, 0xB6	; 182
    1f10:	ff 4f       	sbci	r31, 0xFF	; 255
    1f12:	60 81       	ld	r22, Z
    1f14:	71 81       	ldd	r23, Z+1	; 0x01
    1f16:	82 81       	ldd	r24, Z+2	; 0x02
    1f18:	93 81       	ldd	r25, Z+3	; 0x03
    1f1a:	20 e0       	ldi	r18, 0x00	; 0
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	4a e7       	ldi	r20, 0x7A	; 122
    1f20:	53 e4       	ldi	r21, 0x43	; 67
    1f22:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f26:	dc 01       	movw	r26, r24
    1f28:	cb 01       	movw	r24, r22
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	80 83       	st	Z, r24
    1f2e:	91 83       	std	Z+1, r25	; 0x01
    1f30:	a2 83       	std	Z+2, r26	; 0x02
    1f32:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f34:	fe 01       	movw	r30, r28
    1f36:	ea 5b       	subi	r30, 0xBA	; 186
    1f38:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3a:	60 81       	ld	r22, Z
    1f3c:	71 81       	ldd	r23, Z+1	; 0x01
    1f3e:	82 81       	ldd	r24, Z+2	; 0x02
    1f40:	93 81       	ldd	r25, Z+3	; 0x03
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e8       	ldi	r20, 0x80	; 128
    1f48:	5f e3       	ldi	r21, 0x3F	; 63
    1f4a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    1f4e:	88 23       	and	r24, r24
    1f50:	44 f4       	brge	.+16     	; 0x1f62 <LCD_4bit_init+0x2e8>
		__ticks = 1;
    1f52:	fe 01       	movw	r30, r28
    1f54:	ec 5b       	subi	r30, 0xBC	; 188
    1f56:	ff 4f       	sbci	r31, 0xFF	; 255
    1f58:	81 e0       	ldi	r24, 0x01	; 1
    1f5a:	90 e0       	ldi	r25, 0x00	; 0
    1f5c:	91 83       	std	Z+1, r25	; 0x01
    1f5e:	80 83       	st	Z, r24
    1f60:	64 c0       	rjmp	.+200    	; 0x202a <LCD_4bit_init+0x3b0>
	else if (__tmp > 65535)
    1f62:	fe 01       	movw	r30, r28
    1f64:	ea 5b       	subi	r30, 0xBA	; 186
    1f66:	ff 4f       	sbci	r31, 0xFF	; 255
    1f68:	60 81       	ld	r22, Z
    1f6a:	71 81       	ldd	r23, Z+1	; 0x01
    1f6c:	82 81       	ldd	r24, Z+2	; 0x02
    1f6e:	93 81       	ldd	r25, Z+3	; 0x03
    1f70:	20 e0       	ldi	r18, 0x00	; 0
    1f72:	3f ef       	ldi	r19, 0xFF	; 255
    1f74:	4f e7       	ldi	r20, 0x7F	; 127
    1f76:	57 e4       	ldi	r21, 0x47	; 71
    1f78:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    1f7c:	18 16       	cp	r1, r24
    1f7e:	0c f0       	brlt	.+2      	; 0x1f82 <LCD_4bit_init+0x308>
    1f80:	43 c0       	rjmp	.+134    	; 0x2008 <LCD_4bit_init+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f82:	fe 01       	movw	r30, r28
    1f84:	e6 5b       	subi	r30, 0xB6	; 182
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	20 e0       	ldi	r18, 0x00	; 0
    1f92:	30 e0       	ldi	r19, 0x00	; 0
    1f94:	40 e2       	ldi	r20, 0x20	; 32
    1f96:	51 e4       	ldi	r21, 0x41	; 65
    1f98:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f9c:	dc 01       	movw	r26, r24
    1f9e:	cb 01       	movw	r24, r22
    1fa0:	8e 01       	movw	r16, r28
    1fa2:	0c 5b       	subi	r16, 0xBC	; 188
    1fa4:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa6:	bc 01       	movw	r22, r24
    1fa8:	cd 01       	movw	r24, r26
    1faa:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	f8 01       	movw	r30, r16
    1fb4:	91 83       	std	Z+1, r25	; 0x01
    1fb6:	80 83       	st	Z, r24
    1fb8:	1f c0       	rjmp	.+62     	; 0x1ff8 <LCD_4bit_init+0x37e>
    1fba:	fe 01       	movw	r30, r28
    1fbc:	ee 5b       	subi	r30, 0xBE	; 190
    1fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc0:	89 e1       	ldi	r24, 0x19	; 25
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	91 83       	std	Z+1, r25	; 0x01
    1fc6:	80 83       	st	Z, r24
    1fc8:	fe 01       	movw	r30, r28
    1fca:	ee 5b       	subi	r30, 0xBE	; 190
    1fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1fce:	80 81       	ld	r24, Z
    1fd0:	91 81       	ldd	r25, Z+1	; 0x01
    1fd2:	01 97       	sbiw	r24, 0x01	; 1
    1fd4:	f1 f7       	brne	.-4      	; 0x1fd2 <LCD_4bit_init+0x358>
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	ee 5b       	subi	r30, 0xBE	; 190
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	91 83       	std	Z+1, r25	; 0x01
    1fde:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe0:	de 01       	movw	r26, r28
    1fe2:	ac 5b       	subi	r26, 0xBC	; 188
    1fe4:	bf 4f       	sbci	r27, 0xFF	; 255
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	ec 5b       	subi	r30, 0xBC	; 188
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 81       	ld	r24, Z
    1fee:	91 81       	ldd	r25, Z+1	; 0x01
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	11 96       	adiw	r26, 0x01	; 1
    1ff4:	9c 93       	st	X, r25
    1ff6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff8:	fe 01       	movw	r30, r28
    1ffa:	ec 5b       	subi	r30, 0xBC	; 188
    1ffc:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffe:	80 81       	ld	r24, Z
    2000:	91 81       	ldd	r25, Z+1	; 0x01
    2002:	00 97       	sbiw	r24, 0x00	; 0
    2004:	d1 f6       	brne	.-76     	; 0x1fba <LCD_4bit_init+0x340>
    2006:	42 c0       	rjmp	.+132    	; 0x208c <LCD_4bit_init+0x412>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2008:	8e 01       	movw	r16, r28
    200a:	0c 5b       	subi	r16, 0xBC	; 188
    200c:	1f 4f       	sbci	r17, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	ea 5b       	subi	r30, 0xBA	; 186
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	82 81       	ldd	r24, Z+2	; 0x02
    201a:	93 81       	ldd	r25, Z+3	; 0x03
    201c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	f8 01       	movw	r30, r16
    2026:	91 83       	std	Z+1, r25	; 0x01
    2028:	80 83       	st	Z, r24
    202a:	de 01       	movw	r26, r28
    202c:	a0 5c       	subi	r26, 0xC0	; 192
    202e:	bf 4f       	sbci	r27, 0xFF	; 255
    2030:	fe 01       	movw	r30, r28
    2032:	ec 5b       	subi	r30, 0xBC	; 188
    2034:	ff 4f       	sbci	r31, 0xFF	; 255
    2036:	80 81       	ld	r24, Z
    2038:	91 81       	ldd	r25, Z+1	; 0x01
    203a:	11 96       	adiw	r26, 0x01	; 1
    203c:	9c 93       	st	X, r25
    203e:	8e 93       	st	-X, r24
    2040:	fe 01       	movw	r30, r28
    2042:	e0 5c       	subi	r30, 0xC0	; 192
    2044:	ff 4f       	sbci	r31, 0xFF	; 255
    2046:	80 81       	ld	r24, Z
    2048:	91 81       	ldd	r25, Z+1	; 0x01
    204a:	01 97       	sbiw	r24, 0x01	; 1
    204c:	f1 f7       	brne	.-4      	; 0x204a <LCD_4bit_init+0x3d0>
    204e:	fe 01       	movw	r30, r28
    2050:	e0 5c       	subi	r30, 0xC0	; 192
    2052:	ff 4f       	sbci	r31, 0xFF	; 255
    2054:	91 83       	std	Z+1, r25	; 0x01
    2056:	80 83       	st	Z, r24
    2058:	19 c0       	rjmp	.+50     	; 0x208c <LCD_4bit_init+0x412>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    205a:	8e 01       	movw	r16, r28
    205c:	02 5b       	subi	r16, 0xB2	; 178
    205e:	1f 4f       	sbci	r17, 0xFF	; 255
    2060:	fe 01       	movw	r30, r28
    2062:	e1 5b       	subi	r30, 0xB1	; 177
    2064:	ff 4f       	sbci	r31, 0xFF	; 255
    2066:	60 81       	ld	r22, Z
    2068:	71 81       	ldd	r23, Z+1	; 0x01
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	93 81       	ldd	r25, Z+3	; 0x03
    206e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2072:	dc 01       	movw	r26, r24
    2074:	cb 01       	movw	r24, r22
    2076:	f8 01       	movw	r30, r16
    2078:	80 83       	st	Z, r24
    207a:	fe 01       	movw	r30, r28
    207c:	e2 5b       	subi	r30, 0xB2	; 178
    207e:	ff 4f       	sbci	r31, 0xFF	; 255
    2080:	80 81       	ld	r24, Z
    2082:	8f af       	std	Y+63, r24	; 0x3f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2084:	8f ad       	ldd	r24, Y+63	; 0x3f
    2086:	8a 95       	dec	r24
    2088:	f1 f7       	brne	.-4      	; 0x2086 <LCD_4bit_init+0x40c>
    208a:	8f af       	std	Y+63, r24	; 0x3f
	_delay_us(40);

	//Display ON/OFF control
	LCD_4bit_sendcmd (0x00);
    208c:	80 e0       	ldi	r24, 0x00	; 0
    208e:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(Disp);
    2092:	8e e0       	ldi	r24, 0x0E	; 14
    2094:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	a0 e2       	ldi	r26, 0x20	; 32
    209e:	b2 e4       	ldi	r27, 0x42	; 66
    20a0:	8b af       	std	Y+59, r24	; 0x3b
    20a2:	9c af       	std	Y+60, r25	; 0x3c
    20a4:	ad af       	std	Y+61, r26	; 0x3d
    20a6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20a8:	6b ad       	ldd	r22, Y+59	; 0x3b
    20aa:	7c ad       	ldd	r23, Y+60	; 0x3c
    20ac:	8d ad       	ldd	r24, Y+61	; 0x3d
    20ae:	9e ad       	ldd	r25, Y+62	; 0x3e
    20b0:	2b ea       	ldi	r18, 0xAB	; 171
    20b2:	3a ea       	ldi	r19, 0xAA	; 170
    20b4:	4a ea       	ldi	r20, 0xAA	; 170
    20b6:	5e e3       	ldi	r21, 0x3E	; 62
    20b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	8f ab       	std	Y+55, r24	; 0x37
    20c2:	98 af       	std	Y+56, r25	; 0x38
    20c4:	a9 af       	std	Y+57, r26	; 0x39
    20c6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    20c8:	6f a9       	ldd	r22, Y+55	; 0x37
    20ca:	78 ad       	ldd	r23, Y+56	; 0x38
    20cc:	89 ad       	ldd	r24, Y+57	; 0x39
    20ce:	9a ad       	ldd	r25, Y+58	; 0x3a
    20d0:	20 e0       	ldi	r18, 0x00	; 0
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	40 e8       	ldi	r20, 0x80	; 128
    20d6:	5f e3       	ldi	r21, 0x3F	; 63
    20d8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    20dc:	88 23       	and	r24, r24
    20de:	1c f4       	brge	.+6      	; 0x20e6 <LCD_4bit_init+0x46c>
		__ticks = 1;
    20e0:	81 e0       	ldi	r24, 0x01	; 1
    20e2:	8e ab       	std	Y+54, r24	; 0x36
    20e4:	91 c0       	rjmp	.+290    	; 0x2208 <LCD_4bit_init+0x58e>
	else if (__tmp > 255)
    20e6:	6f a9       	ldd	r22, Y+55	; 0x37
    20e8:	78 ad       	ldd	r23, Y+56	; 0x38
    20ea:	89 ad       	ldd	r24, Y+57	; 0x39
    20ec:	9a ad       	ldd	r25, Y+58	; 0x3a
    20ee:	20 e0       	ldi	r18, 0x00	; 0
    20f0:	30 e0       	ldi	r19, 0x00	; 0
    20f2:	4f e7       	ldi	r20, 0x7F	; 127
    20f4:	53 e4       	ldi	r21, 0x43	; 67
    20f6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    20fa:	18 16       	cp	r1, r24
    20fc:	0c f0       	brlt	.+2      	; 0x2100 <LCD_4bit_init+0x486>
    20fe:	7b c0       	rjmp	.+246    	; 0x21f6 <LCD_4bit_init+0x57c>
	{
		_delay_ms(__us / 1000.0);
    2100:	6b ad       	ldd	r22, Y+59	; 0x3b
    2102:	7c ad       	ldd	r23, Y+60	; 0x3c
    2104:	8d ad       	ldd	r24, Y+61	; 0x3d
    2106:	9e ad       	ldd	r25, Y+62	; 0x3e
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4a e7       	ldi	r20, 0x7A	; 122
    210e:	54 e4       	ldi	r21, 0x44	; 68
    2110:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2114:	dc 01       	movw	r26, r24
    2116:	cb 01       	movw	r24, r22
    2118:	8a ab       	std	Y+50, r24	; 0x32
    211a:	9b ab       	std	Y+51, r25	; 0x33
    211c:	ac ab       	std	Y+52, r26	; 0x34
    211e:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2120:	6a a9       	ldd	r22, Y+50	; 0x32
    2122:	7b a9       	ldd	r23, Y+51	; 0x33
    2124:	8c a9       	ldd	r24, Y+52	; 0x34
    2126:	9d a9       	ldd	r25, Y+53	; 0x35
    2128:	20 e0       	ldi	r18, 0x00	; 0
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	4a e7       	ldi	r20, 0x7A	; 122
    212e:	53 e4       	ldi	r21, 0x43	; 67
    2130:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2134:	dc 01       	movw	r26, r24
    2136:	cb 01       	movw	r24, r22
    2138:	8e a7       	std	Y+46, r24	; 0x2e
    213a:	9f a7       	std	Y+47, r25	; 0x2f
    213c:	a8 ab       	std	Y+48, r26	; 0x30
    213e:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2140:	6e a5       	ldd	r22, Y+46	; 0x2e
    2142:	7f a5       	ldd	r23, Y+47	; 0x2f
    2144:	88 a9       	ldd	r24, Y+48	; 0x30
    2146:	99 a9       	ldd	r25, Y+49	; 0x31
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	40 e8       	ldi	r20, 0x80	; 128
    214e:	5f e3       	ldi	r21, 0x3F	; 63
    2150:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2154:	88 23       	and	r24, r24
    2156:	2c f4       	brge	.+10     	; 0x2162 <LCD_4bit_init+0x4e8>
		__ticks = 1;
    2158:	81 e0       	ldi	r24, 0x01	; 1
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	9d a7       	std	Y+45, r25	; 0x2d
    215e:	8c a7       	std	Y+44, r24	; 0x2c
    2160:	3f c0       	rjmp	.+126    	; 0x21e0 <LCD_4bit_init+0x566>
	else if (__tmp > 65535)
    2162:	6e a5       	ldd	r22, Y+46	; 0x2e
    2164:	7f a5       	ldd	r23, Y+47	; 0x2f
    2166:	88 a9       	ldd	r24, Y+48	; 0x30
    2168:	99 a9       	ldd	r25, Y+49	; 0x31
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	3f ef       	ldi	r19, 0xFF	; 255
    216e:	4f e7       	ldi	r20, 0x7F	; 127
    2170:	57 e4       	ldi	r21, 0x47	; 71
    2172:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2176:	18 16       	cp	r1, r24
    2178:	4c f5       	brge	.+82     	; 0x21cc <LCD_4bit_init+0x552>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    217a:	6a a9       	ldd	r22, Y+50	; 0x32
    217c:	7b a9       	ldd	r23, Y+51	; 0x33
    217e:	8c a9       	ldd	r24, Y+52	; 0x34
    2180:	9d a9       	ldd	r25, Y+53	; 0x35
    2182:	20 e0       	ldi	r18, 0x00	; 0
    2184:	30 e0       	ldi	r19, 0x00	; 0
    2186:	40 e2       	ldi	r20, 0x20	; 32
    2188:	51 e4       	ldi	r21, 0x41	; 65
    218a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    218e:	dc 01       	movw	r26, r24
    2190:	cb 01       	movw	r24, r22
    2192:	bc 01       	movw	r22, r24
    2194:	cd 01       	movw	r24, r26
    2196:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    219a:	dc 01       	movw	r26, r24
    219c:	cb 01       	movw	r24, r22
    219e:	9d a7       	std	Y+45, r25	; 0x2d
    21a0:	8c a7       	std	Y+44, r24	; 0x2c
    21a2:	0f c0       	rjmp	.+30     	; 0x21c2 <LCD_4bit_init+0x548>
    21a4:	89 e1       	ldi	r24, 0x19	; 25
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9b a7       	std	Y+43, r25	; 0x2b
    21aa:	8a a7       	std	Y+42, r24	; 0x2a
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21ac:	8a a5       	ldd	r24, Y+42	; 0x2a
    21ae:	9b a5       	ldd	r25, Y+43	; 0x2b
    21b0:	01 97       	sbiw	r24, 0x01	; 1
    21b2:	f1 f7       	brne	.-4      	; 0x21b0 <LCD_4bit_init+0x536>
    21b4:	9b a7       	std	Y+43, r25	; 0x2b
    21b6:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21b8:	8c a5       	ldd	r24, Y+44	; 0x2c
    21ba:	9d a5       	ldd	r25, Y+45	; 0x2d
    21bc:	01 97       	sbiw	r24, 0x01	; 1
    21be:	9d a7       	std	Y+45, r25	; 0x2d
    21c0:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c2:	8c a5       	ldd	r24, Y+44	; 0x2c
    21c4:	9d a5       	ldd	r25, Y+45	; 0x2d
    21c6:	00 97       	sbiw	r24, 0x00	; 0
    21c8:	69 f7       	brne	.-38     	; 0x21a4 <LCD_4bit_init+0x52a>
    21ca:	24 c0       	rjmp	.+72     	; 0x2214 <LCD_4bit_init+0x59a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21cc:	6e a5       	ldd	r22, Y+46	; 0x2e
    21ce:	7f a5       	ldd	r23, Y+47	; 0x2f
    21d0:	88 a9       	ldd	r24, Y+48	; 0x30
    21d2:	99 a9       	ldd	r25, Y+49	; 0x31
    21d4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21d8:	dc 01       	movw	r26, r24
    21da:	cb 01       	movw	r24, r22
    21dc:	9d a7       	std	Y+45, r25	; 0x2d
    21de:	8c a7       	std	Y+44, r24	; 0x2c
    21e0:	8c a5       	ldd	r24, Y+44	; 0x2c
    21e2:	9d a5       	ldd	r25, Y+45	; 0x2d
    21e4:	99 a7       	std	Y+41, r25	; 0x29
    21e6:	88 a7       	std	Y+40, r24	; 0x28
    21e8:	88 a5       	ldd	r24, Y+40	; 0x28
    21ea:	99 a5       	ldd	r25, Y+41	; 0x29
    21ec:	01 97       	sbiw	r24, 0x01	; 1
    21ee:	f1 f7       	brne	.-4      	; 0x21ec <LCD_4bit_init+0x572>
    21f0:	99 a7       	std	Y+41, r25	; 0x29
    21f2:	88 a7       	std	Y+40, r24	; 0x28
    21f4:	0f c0       	rjmp	.+30     	; 0x2214 <LCD_4bit_init+0x59a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21f6:	6f a9       	ldd	r22, Y+55	; 0x37
    21f8:	78 ad       	ldd	r23, Y+56	; 0x38
    21fa:	89 ad       	ldd	r24, Y+57	; 0x39
    21fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    21fe:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8e ab       	std	Y+54, r24	; 0x36
    2208:	8e a9       	ldd	r24, Y+54	; 0x36
    220a:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    220c:	8f a1       	ldd	r24, Y+39	; 0x27
    220e:	8a 95       	dec	r24
    2210:	f1 f7       	brne	.-4      	; 0x220e <LCD_4bit_init+0x594>
    2212:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);

	LCD_4bit_sendcmd (0x00);
    2214:	80 e0       	ldi	r24, 0x00	; 0
    2216:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(CLRSc); // Clear Display screen
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
    2224:	a0 e0       	ldi	r26, 0x00	; 0
    2226:	b0 e4       	ldi	r27, 0x40	; 64
    2228:	8b a3       	std	Y+35, r24	; 0x23
    222a:	9c a3       	std	Y+36, r25	; 0x24
    222c:	ad a3       	std	Y+37, r26	; 0x25
    222e:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2230:	6b a1       	ldd	r22, Y+35	; 0x23
    2232:	7c a1       	ldd	r23, Y+36	; 0x24
    2234:	8d a1       	ldd	r24, Y+37	; 0x25
    2236:	9e a1       	ldd	r25, Y+38	; 0x26
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	30 e0       	ldi	r19, 0x00	; 0
    223c:	4a e7       	ldi	r20, 0x7A	; 122
    223e:	53 e4       	ldi	r21, 0x43	; 67
    2240:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2244:	dc 01       	movw	r26, r24
    2246:	cb 01       	movw	r24, r22
    2248:	8f 8f       	std	Y+31, r24	; 0x1f
    224a:	98 a3       	std	Y+32, r25	; 0x20
    224c:	a9 a3       	std	Y+33, r26	; 0x21
    224e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2250:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2252:	78 a1       	ldd	r23, Y+32	; 0x20
    2254:	89 a1       	ldd	r24, Y+33	; 0x21
    2256:	9a a1       	ldd	r25, Y+34	; 0x22
    2258:	20 e0       	ldi	r18, 0x00	; 0
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	5f e3       	ldi	r21, 0x3F	; 63
    2260:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2264:	88 23       	and	r24, r24
    2266:	2c f4       	brge	.+10     	; 0x2272 <LCD_4bit_init+0x5f8>
		__ticks = 1;
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	90 e0       	ldi	r25, 0x00	; 0
    226c:	9e 8f       	std	Y+30, r25	; 0x1e
    226e:	8d 8f       	std	Y+29, r24	; 0x1d
    2270:	3f c0       	rjmp	.+126    	; 0x22f0 <LCD_4bit_init+0x676>
	else if (__tmp > 65535)
    2272:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2274:	78 a1       	ldd	r23, Y+32	; 0x20
    2276:	89 a1       	ldd	r24, Y+33	; 0x21
    2278:	9a a1       	ldd	r25, Y+34	; 0x22
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	3f ef       	ldi	r19, 0xFF	; 255
    227e:	4f e7       	ldi	r20, 0x7F	; 127
    2280:	57 e4       	ldi	r21, 0x47	; 71
    2282:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2286:	18 16       	cp	r1, r24
    2288:	4c f5       	brge	.+82     	; 0x22dc <LCD_4bit_init+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    228a:	6b a1       	ldd	r22, Y+35	; 0x23
    228c:	7c a1       	ldd	r23, Y+36	; 0x24
    228e:	8d a1       	ldd	r24, Y+37	; 0x25
    2290:	9e a1       	ldd	r25, Y+38	; 0x26
    2292:	20 e0       	ldi	r18, 0x00	; 0
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	40 e2       	ldi	r20, 0x20	; 32
    2298:	51 e4       	ldi	r21, 0x41	; 65
    229a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	bc 01       	movw	r22, r24
    22a4:	cd 01       	movw	r24, r26
    22a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22aa:	dc 01       	movw	r26, r24
    22ac:	cb 01       	movw	r24, r22
    22ae:	9e 8f       	std	Y+30, r25	; 0x1e
    22b0:	8d 8f       	std	Y+29, r24	; 0x1d
    22b2:	0f c0       	rjmp	.+30     	; 0x22d2 <LCD_4bit_init+0x658>
    22b4:	89 e1       	ldi	r24, 0x19	; 25
    22b6:	90 e0       	ldi	r25, 0x00	; 0
    22b8:	9c 8f       	std	Y+28, r25	; 0x1c
    22ba:	8b 8f       	std	Y+27, r24	; 0x1b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22c0:	01 97       	sbiw	r24, 0x01	; 1
    22c2:	f1 f7       	brne	.-4      	; 0x22c0 <LCD_4bit_init+0x646>
    22c4:	9c 8f       	std	Y+28, r25	; 0x1c
    22c6:	8b 8f       	std	Y+27, r24	; 0x1b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22c8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22ca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	9e 8f       	std	Y+30, r25	; 0x1e
    22d0:	8d 8f       	std	Y+29, r24	; 0x1d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22d6:	00 97       	sbiw	r24, 0x00	; 0
    22d8:	69 f7       	brne	.-38     	; 0x22b4 <LCD_4bit_init+0x63a>
    22da:	14 c0       	rjmp	.+40     	; 0x2304 <LCD_4bit_init+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22dc:	6f 8d       	ldd	r22, Y+31	; 0x1f
    22de:	78 a1       	ldd	r23, Y+32	; 0x20
    22e0:	89 a1       	ldd	r24, Y+33	; 0x21
    22e2:	9a a1       	ldd	r25, Y+34	; 0x22
    22e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    22e8:	dc 01       	movw	r26, r24
    22ea:	cb 01       	movw	r24, r22
    22ec:	9e 8f       	std	Y+30, r25	; 0x1e
    22ee:	8d 8f       	std	Y+29, r24	; 0x1d
    22f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    22f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    22f4:	9a 8f       	std	Y+26, r25	; 0x1a
    22f6:	89 8f       	std	Y+25, r24	; 0x19
    22f8:	89 8d       	ldd	r24, Y+25	; 0x19
    22fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    22fc:	01 97       	sbiw	r24, 0x01	; 1
    22fe:	f1 f7       	brne	.-4      	; 0x22fc <LCD_4bit_init+0x682>
    2300:	9a 8f       	std	Y+26, r25	; 0x1a
    2302:	89 8f       	std	Y+25, r24	; 0x19
	_delay_ms(2);

	LCD_4bit_sendcmd(0x00);
    2304:	80 e0       	ldi	r24, 0x00	; 0
    2306:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
	LCD_4bit_sendcmd(IncMode);
    230a:	86 e0       	ldi	r24, 0x06	; 6
    230c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    2310:	80 e0       	ldi	r24, 0x00	; 0
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	a0 e2       	ldi	r26, 0x20	; 32
    2316:	b2 e4       	ldi	r27, 0x42	; 66
    2318:	8d 8b       	std	Y+21, r24	; 0x15
    231a:	9e 8b       	std	Y+22, r25	; 0x16
    231c:	af 8b       	std	Y+23, r26	; 0x17
    231e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2320:	6d 89       	ldd	r22, Y+21	; 0x15
    2322:	7e 89       	ldd	r23, Y+22	; 0x16
    2324:	8f 89       	ldd	r24, Y+23	; 0x17
    2326:	98 8d       	ldd	r25, Y+24	; 0x18
    2328:	2b ea       	ldi	r18, 0xAB	; 171
    232a:	3a ea       	ldi	r19, 0xAA	; 170
    232c:	4a ea       	ldi	r20, 0xAA	; 170
    232e:	5e e3       	ldi	r21, 0x3E	; 62
    2330:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2334:	dc 01       	movw	r26, r24
    2336:	cb 01       	movw	r24, r22
    2338:	89 8b       	std	Y+17, r24	; 0x11
    233a:	9a 8b       	std	Y+18, r25	; 0x12
    233c:	ab 8b       	std	Y+19, r26	; 0x13
    233e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2340:	69 89       	ldd	r22, Y+17	; 0x11
    2342:	7a 89       	ldd	r23, Y+18	; 0x12
    2344:	8b 89       	ldd	r24, Y+19	; 0x13
    2346:	9c 89       	ldd	r25, Y+20	; 0x14
    2348:	20 e0       	ldi	r18, 0x00	; 0
    234a:	30 e0       	ldi	r19, 0x00	; 0
    234c:	40 e8       	ldi	r20, 0x80	; 128
    234e:	5f e3       	ldi	r21, 0x3F	; 63
    2350:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2354:	88 23       	and	r24, r24
    2356:	1c f4       	brge	.+6      	; 0x235e <LCD_4bit_init+0x6e4>
		__ticks = 1;
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	88 8b       	std	Y+16, r24	; 0x10
    235c:	91 c0       	rjmp	.+290    	; 0x2480 <LCD_4bit_init+0x806>
	else if (__tmp > 255)
    235e:	69 89       	ldd	r22, Y+17	; 0x11
    2360:	7a 89       	ldd	r23, Y+18	; 0x12
    2362:	8b 89       	ldd	r24, Y+19	; 0x13
    2364:	9c 89       	ldd	r25, Y+20	; 0x14
    2366:	20 e0       	ldi	r18, 0x00	; 0
    2368:	30 e0       	ldi	r19, 0x00	; 0
    236a:	4f e7       	ldi	r20, 0x7F	; 127
    236c:	53 e4       	ldi	r21, 0x43	; 67
    236e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2372:	18 16       	cp	r1, r24
    2374:	0c f0       	brlt	.+2      	; 0x2378 <LCD_4bit_init+0x6fe>
    2376:	7b c0       	rjmp	.+246    	; 0x246e <LCD_4bit_init+0x7f4>
	{
		_delay_ms(__us / 1000.0);
    2378:	6d 89       	ldd	r22, Y+21	; 0x15
    237a:	7e 89       	ldd	r23, Y+22	; 0x16
    237c:	8f 89       	ldd	r24, Y+23	; 0x17
    237e:	98 8d       	ldd	r25, Y+24	; 0x18
    2380:	20 e0       	ldi	r18, 0x00	; 0
    2382:	30 e0       	ldi	r19, 0x00	; 0
    2384:	4a e7       	ldi	r20, 0x7A	; 122
    2386:	54 e4       	ldi	r21, 0x44	; 68
    2388:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    238c:	dc 01       	movw	r26, r24
    238e:	cb 01       	movw	r24, r22
    2390:	8c 87       	std	Y+12, r24	; 0x0c
    2392:	9d 87       	std	Y+13, r25	; 0x0d
    2394:	ae 87       	std	Y+14, r26	; 0x0e
    2396:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2398:	6c 85       	ldd	r22, Y+12	; 0x0c
    239a:	7d 85       	ldd	r23, Y+13	; 0x0d
    239c:	8e 85       	ldd	r24, Y+14	; 0x0e
    239e:	9f 85       	ldd	r25, Y+15	; 0x0f
    23a0:	20 e0       	ldi	r18, 0x00	; 0
    23a2:	30 e0       	ldi	r19, 0x00	; 0
    23a4:	4a e7       	ldi	r20, 0x7A	; 122
    23a6:	53 e4       	ldi	r21, 0x43	; 67
    23a8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23ac:	dc 01       	movw	r26, r24
    23ae:	cb 01       	movw	r24, r22
    23b0:	88 87       	std	Y+8, r24	; 0x08
    23b2:	99 87       	std	Y+9, r25	; 0x09
    23b4:	aa 87       	std	Y+10, r26	; 0x0a
    23b6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    23b8:	68 85       	ldd	r22, Y+8	; 0x08
    23ba:	79 85       	ldd	r23, Y+9	; 0x09
    23bc:	8a 85       	ldd	r24, Y+10	; 0x0a
    23be:	9b 85       	ldd	r25, Y+11	; 0x0b
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	40 e8       	ldi	r20, 0x80	; 128
    23c6:	5f e3       	ldi	r21, 0x3F	; 63
    23c8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    23cc:	88 23       	and	r24, r24
    23ce:	2c f4       	brge	.+10     	; 0x23da <LCD_4bit_init+0x760>
		__ticks = 1;
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	90 e0       	ldi	r25, 0x00	; 0
    23d4:	9f 83       	std	Y+7, r25	; 0x07
    23d6:	8e 83       	std	Y+6, r24	; 0x06
    23d8:	3f c0       	rjmp	.+126    	; 0x2458 <LCD_4bit_init+0x7de>
	else if (__tmp > 65535)
    23da:	68 85       	ldd	r22, Y+8	; 0x08
    23dc:	79 85       	ldd	r23, Y+9	; 0x09
    23de:	8a 85       	ldd	r24, Y+10	; 0x0a
    23e0:	9b 85       	ldd	r25, Y+11	; 0x0b
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	3f ef       	ldi	r19, 0xFF	; 255
    23e6:	4f e7       	ldi	r20, 0x7F	; 127
    23e8:	57 e4       	ldi	r21, 0x47	; 71
    23ea:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    23ee:	18 16       	cp	r1, r24
    23f0:	4c f5       	brge	.+82     	; 0x2444 <LCD_4bit_init+0x7ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23f2:	6c 85       	ldd	r22, Y+12	; 0x0c
    23f4:	7d 85       	ldd	r23, Y+13	; 0x0d
    23f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    23f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    23fa:	20 e0       	ldi	r18, 0x00	; 0
    23fc:	30 e0       	ldi	r19, 0x00	; 0
    23fe:	40 e2       	ldi	r20, 0x20	; 32
    2400:	51 e4       	ldi	r21, 0x41	; 65
    2402:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	9f 83       	std	Y+7, r25	; 0x07
    2418:	8e 83       	std	Y+6, r24	; 0x06
    241a:	0f c0       	rjmp	.+30     	; 0x243a <LCD_4bit_init+0x7c0>
    241c:	89 e1       	ldi	r24, 0x19	; 25
    241e:	90 e0       	ldi	r25, 0x00	; 0
    2420:	9d 83       	std	Y+5, r25	; 0x05
    2422:	8c 83       	std	Y+4, r24	; 0x04
    2424:	8c 81       	ldd	r24, Y+4	; 0x04
    2426:	9d 81       	ldd	r25, Y+5	; 0x05
    2428:	01 97       	sbiw	r24, 0x01	; 1
    242a:	f1 f7       	brne	.-4      	; 0x2428 <LCD_4bit_init+0x7ae>
    242c:	9d 83       	std	Y+5, r25	; 0x05
    242e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2430:	8e 81       	ldd	r24, Y+6	; 0x06
    2432:	9f 81       	ldd	r25, Y+7	; 0x07
    2434:	01 97       	sbiw	r24, 0x01	; 1
    2436:	9f 83       	std	Y+7, r25	; 0x07
    2438:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    243a:	8e 81       	ldd	r24, Y+6	; 0x06
    243c:	9f 81       	ldd	r25, Y+7	; 0x07
    243e:	00 97       	sbiw	r24, 0x00	; 0
    2440:	69 f7       	brne	.-38     	; 0x241c <LCD_4bit_init+0x7a2>
    2442:	24 c0       	rjmp	.+72     	; 0x248c <LCD_4bit_init+0x812>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2444:	68 85       	ldd	r22, Y+8	; 0x08
    2446:	79 85       	ldd	r23, Y+9	; 0x09
    2448:	8a 85       	ldd	r24, Y+10	; 0x0a
    244a:	9b 85       	ldd	r25, Y+11	; 0x0b
    244c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	9f 83       	std	Y+7, r25	; 0x07
    2456:	8e 83       	std	Y+6, r24	; 0x06
    2458:	8e 81       	ldd	r24, Y+6	; 0x06
    245a:	9f 81       	ldd	r25, Y+7	; 0x07
    245c:	9b 83       	std	Y+3, r25	; 0x03
    245e:	8a 83       	std	Y+2, r24	; 0x02
    2460:	8a 81       	ldd	r24, Y+2	; 0x02
    2462:	9b 81       	ldd	r25, Y+3	; 0x03
    2464:	01 97       	sbiw	r24, 0x01	; 1
    2466:	f1 f7       	brne	.-4      	; 0x2464 <LCD_4bit_init+0x7ea>
    2468:	9b 83       	std	Y+3, r25	; 0x03
    246a:	8a 83       	std	Y+2, r24	; 0x02
    246c:	0f c0       	rjmp	.+30     	; 0x248c <LCD_4bit_init+0x812>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    246e:	69 89       	ldd	r22, Y+17	; 0x11
    2470:	7a 89       	ldd	r23, Y+18	; 0x12
    2472:	8b 89       	ldd	r24, Y+19	; 0x13
    2474:	9c 89       	ldd	r25, Y+20	; 0x14
    2476:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	88 8b       	std	Y+16, r24	; 0x10
    2480:	88 89       	ldd	r24, Y+16	; 0x10
    2482:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2484:	89 81       	ldd	r24, Y+1	; 0x01
    2486:	8a 95       	dec	r24
    2488:	f1 f7       	brne	.-4      	; 0x2486 <LCD_4bit_init+0x80c>
    248a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(40);
	
}
    248c:	cc 59       	subi	r28, 0x9C	; 156
    248e:	df 4f       	sbci	r29, 0xFF	; 255
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	cf 91       	pop	r28
    249c:	df 91       	pop	r29
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	08 95       	ret

000024a4 <LCD_4bit_sendcmd>:

void LCD_4bit_sendcmd(uint8_t cmd)
{ 	DIO_write(RS,RS_PORT,LOW) ; // write 0 on RS to write command
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	0f 92       	push	r0
    24aa:	cd b7       	in	r28, 0x3d	; 61
    24ac:	de b7       	in	r29, 0x3e	; 62
    24ae:	89 83       	std	Y+1, r24	; 0x01
    24b0:	81 e0       	ldi	r24, 0x01	; 1
    24b2:	62 e4       	ldi	r22, 0x42	; 66
    24b4:	40 e0       	ldi	r20, 0x00	; 0
    24b6:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(RW,RW_PORT,LOW) ; // write 0 on RW to write
    24ba:	82 e0       	ldi	r24, 0x02	; 2
    24bc:	62 e4       	ldi	r22, 0x42	; 66
    24be:	40 e0       	ldi	r20, 0x00	; 0
    24c0:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,7)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    24c4:	89 81       	ldd	r24, Y+1	; 0x01
    24c6:	88 1f       	adc	r24, r24
    24c8:	88 27       	eor	r24, r24
    24ca:	88 1f       	adc	r24, r24
    24cc:	88 2f       	mov	r24, r24
    24ce:	90 e0       	ldi	r25, 0x00	; 0
    24d0:	90 70       	andi	r25, 0x00	; 0
    24d2:	00 97       	sbiw	r24, 0x00	; 0
    24d4:	31 f0       	breq	.+12     	; 0x24e2 <LCD_4bit_sendcmd+0x3e>
    24d6:	87 e0       	ldi	r24, 0x07	; 7
    24d8:	61 e4       	ldi	r22, 0x41	; 65
    24da:	41 e0       	ldi	r20, 0x01	; 1
    24dc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    24e0:	05 c0       	rjmp	.+10     	; 0x24ec <LCD_4bit_sendcmd+0x48>
    24e2:	87 e0       	ldi	r24, 0x07	; 7
    24e4:	61 e4       	ldi	r22, 0x41	; 65
    24e6:	40 e0       	ldi	r20, 0x00	; 0
    24e8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,6)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    24ec:	89 81       	ldd	r24, Y+1	; 0x01
    24ee:	88 2f       	mov	r24, r24
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	80 74       	andi	r24, 0x40	; 64
    24f4:	90 70       	andi	r25, 0x00	; 0
    24f6:	08 2e       	mov	r0, r24
    24f8:	89 2f       	mov	r24, r25
    24fa:	00 0c       	add	r0, r0
    24fc:	88 1f       	adc	r24, r24
    24fe:	99 0b       	sbc	r25, r25
    2500:	00 0c       	add	r0, r0
    2502:	88 1f       	adc	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	00 97       	sbiw	r24, 0x00	; 0
    2508:	31 f0       	breq	.+12     	; 0x2516 <LCD_4bit_sendcmd+0x72>
    250a:	86 e0       	ldi	r24, 0x06	; 6
    250c:	61 e4       	ldi	r22, 0x41	; 65
    250e:	41 e0       	ldi	r20, 0x01	; 1
    2510:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2514:	05 c0       	rjmp	.+10     	; 0x2520 <LCD_4bit_sendcmd+0x7c>
    2516:	86 e0       	ldi	r24, 0x06	; 6
    2518:	61 e4       	ldi	r22, 0x41	; 65
    251a:	40 e0       	ldi	r20, 0x00	; 0
    251c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,5)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	88 2f       	mov	r24, r24
    2524:	90 e0       	ldi	r25, 0x00	; 0
    2526:	80 72       	andi	r24, 0x20	; 32
    2528:	90 70       	andi	r25, 0x00	; 0
    252a:	95 95       	asr	r25
    252c:	87 95       	ror	r24
    252e:	95 95       	asr	r25
    2530:	87 95       	ror	r24
    2532:	95 95       	asr	r25
    2534:	87 95       	ror	r24
    2536:	95 95       	asr	r25
    2538:	87 95       	ror	r24
    253a:	95 95       	asr	r25
    253c:	87 95       	ror	r24
    253e:	00 97       	sbiw	r24, 0x00	; 0
    2540:	31 f0       	breq	.+12     	; 0x254e <LCD_4bit_sendcmd+0xaa>
    2542:	85 e0       	ldi	r24, 0x05	; 5
    2544:	61 e4       	ldi	r22, 0x41	; 65
    2546:	41 e0       	ldi	r20, 0x01	; 1
    2548:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    254c:	05 c0       	rjmp	.+10     	; 0x2558 <LCD_4bit_sendcmd+0xb4>
    254e:	85 e0       	ldi	r24, 0x05	; 5
    2550:	61 e4       	ldi	r22, 0x41	; 65
    2552:	40 e0       	ldi	r20, 0x00	; 0
    2554:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,4)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	88 2f       	mov	r24, r24
    255c:	90 e0       	ldi	r25, 0x00	; 0
    255e:	80 71       	andi	r24, 0x10	; 16
    2560:	90 70       	andi	r25, 0x00	; 0
    2562:	95 95       	asr	r25
    2564:	87 95       	ror	r24
    2566:	95 95       	asr	r25
    2568:	87 95       	ror	r24
    256a:	95 95       	asr	r25
    256c:	87 95       	ror	r24
    256e:	95 95       	asr	r25
    2570:	87 95       	ror	r24
    2572:	00 97       	sbiw	r24, 0x00	; 0
    2574:	31 f0       	breq	.+12     	; 0x2582 <LCD_4bit_sendcmd+0xde>
    2576:	84 e0       	ldi	r24, 0x04	; 4
    2578:	61 e4       	ldi	r22, 0x41	; 65
    257a:	41 e0       	ldi	r20, 0x01	; 1
    257c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2580:	05 c0       	rjmp	.+10     	; 0x258c <LCD_4bit_sendcmd+0xe8>
    2582:	84 e0       	ldi	r24, 0x04	; 4
    2584:	61 e4       	ldi	r22, 0x41	; 65
    2586:	40 e0       	ldi	r20, 0x00	; 0
    2588:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	LCD_trig_EN() ;
    258c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <LCD_trig_EN>
	(GET_BIT(cmd,3)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2590:	89 81       	ldd	r24, Y+1	; 0x01
    2592:	88 2f       	mov	r24, r24
    2594:	90 e0       	ldi	r25, 0x00	; 0
    2596:	88 70       	andi	r24, 0x08	; 8
    2598:	90 70       	andi	r25, 0x00	; 0
    259a:	95 95       	asr	r25
    259c:	87 95       	ror	r24
    259e:	95 95       	asr	r25
    25a0:	87 95       	ror	r24
    25a2:	95 95       	asr	r25
    25a4:	87 95       	ror	r24
    25a6:	00 97       	sbiw	r24, 0x00	; 0
    25a8:	31 f0       	breq	.+12     	; 0x25b6 <LCD_4bit_sendcmd+0x112>
    25aa:	87 e0       	ldi	r24, 0x07	; 7
    25ac:	61 e4       	ldi	r22, 0x41	; 65
    25ae:	41 e0       	ldi	r20, 0x01	; 1
    25b0:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    25b4:	05 c0       	rjmp	.+10     	; 0x25c0 <LCD_4bit_sendcmd+0x11c>
    25b6:	87 e0       	ldi	r24, 0x07	; 7
    25b8:	61 e4       	ldi	r22, 0x41	; 65
    25ba:	40 e0       	ldi	r20, 0x00	; 0
    25bc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,2)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	88 2f       	mov	r24, r24
    25c4:	90 e0       	ldi	r25, 0x00	; 0
    25c6:	84 70       	andi	r24, 0x04	; 4
    25c8:	90 70       	andi	r25, 0x00	; 0
    25ca:	95 95       	asr	r25
    25cc:	87 95       	ror	r24
    25ce:	95 95       	asr	r25
    25d0:	87 95       	ror	r24
    25d2:	00 97       	sbiw	r24, 0x00	; 0
    25d4:	31 f0       	breq	.+12     	; 0x25e2 <LCD_4bit_sendcmd+0x13e>
    25d6:	86 e0       	ldi	r24, 0x06	; 6
    25d8:	61 e4       	ldi	r22, 0x41	; 65
    25da:	41 e0       	ldi	r20, 0x01	; 1
    25dc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    25e0:	05 c0       	rjmp	.+10     	; 0x25ec <LCD_4bit_sendcmd+0x148>
    25e2:	86 e0       	ldi	r24, 0x06	; 6
    25e4:	61 e4       	ldi	r22, 0x41	; 65
    25e6:	40 e0       	ldi	r20, 0x00	; 0
    25e8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,1)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    25ec:	89 81       	ldd	r24, Y+1	; 0x01
    25ee:	88 2f       	mov	r24, r24
    25f0:	90 e0       	ldi	r25, 0x00	; 0
    25f2:	82 70       	andi	r24, 0x02	; 2
    25f4:	90 70       	andi	r25, 0x00	; 0
    25f6:	95 95       	asr	r25
    25f8:	87 95       	ror	r24
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	31 f0       	breq	.+12     	; 0x260a <LCD_4bit_sendcmd+0x166>
    25fe:	85 e0       	ldi	r24, 0x05	; 5
    2600:	61 e4       	ldi	r22, 0x41	; 65
    2602:	41 e0       	ldi	r20, 0x01	; 1
    2604:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2608:	05 c0       	rjmp	.+10     	; 0x2614 <LCD_4bit_sendcmd+0x170>
    260a:	85 e0       	ldi	r24, 0x05	; 5
    260c:	61 e4       	ldi	r22, 0x41	; 65
    260e:	40 e0       	ldi	r20, 0x00	; 0
    2610:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(cmd,0)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	88 2f       	mov	r24, r24
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	81 70       	andi	r24, 0x01	; 1
    261c:	90 70       	andi	r25, 0x00	; 0
    261e:	88 23       	and	r24, r24
    2620:	31 f0       	breq	.+12     	; 0x262e <LCD_4bit_sendcmd+0x18a>
    2622:	84 e0       	ldi	r24, 0x04	; 4
    2624:	61 e4       	ldi	r22, 0x41	; 65
    2626:	41 e0       	ldi	r20, 0x01	; 1
    2628:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    262c:	05 c0       	rjmp	.+10     	; 0x2638 <LCD_4bit_sendcmd+0x194>
    262e:	84 e0       	ldi	r24, 0x04	; 4
    2630:	61 e4       	ldi	r22, 0x41	; 65
    2632:	40 e0       	ldi	r20, 0x00	; 0
    2634:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
		LCD_trig_EN() ;
    2638:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <LCD_trig_EN>
}	
    263c:	0f 90       	pop	r0
    263e:	cf 91       	pop	r28
    2640:	df 91       	pop	r29
    2642:	08 95       	ret

00002644 <LCD_4bit_sendchar>:
void LCD_4bit_sendchar(uint8_t Char)
{ 	DIO_write(RS,RS_PORT,HIGH) ; // write 1 on RS to write Data
    2644:	df 93       	push	r29
    2646:	cf 93       	push	r28
    2648:	0f 92       	push	r0
    264a:	cd b7       	in	r28, 0x3d	; 61
    264c:	de b7       	in	r29, 0x3e	; 62
    264e:	89 83       	std	Y+1, r24	; 0x01
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	62 e4       	ldi	r22, 0x42	; 66
    2654:	41 e0       	ldi	r20, 0x01	; 1
    2656:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(RW,RW_PORT,LOW) ; // write 0 on RW to write
    265a:	82 e0       	ldi	r24, 0x02	; 2
    265c:	62 e4       	ldi	r22, 0x42	; 66
    265e:	40 e0       	ldi	r20, 0x00	; 0
    2660:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,7)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2664:	89 81       	ldd	r24, Y+1	; 0x01
    2666:	88 1f       	adc	r24, r24
    2668:	88 27       	eor	r24, r24
    266a:	88 1f       	adc	r24, r24
    266c:	88 2f       	mov	r24, r24
    266e:	90 e0       	ldi	r25, 0x00	; 0
    2670:	90 70       	andi	r25, 0x00	; 0
    2672:	00 97       	sbiw	r24, 0x00	; 0
    2674:	31 f0       	breq	.+12     	; 0x2682 <LCD_4bit_sendchar+0x3e>
    2676:	87 e0       	ldi	r24, 0x07	; 7
    2678:	61 e4       	ldi	r22, 0x41	; 65
    267a:	41 e0       	ldi	r20, 0x01	; 1
    267c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2680:	05 c0       	rjmp	.+10     	; 0x268c <LCD_4bit_sendchar+0x48>
    2682:	87 e0       	ldi	r24, 0x07	; 7
    2684:	61 e4       	ldi	r22, 0x41	; 65
    2686:	40 e0       	ldi	r20, 0x00	; 0
    2688:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,6)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    268c:	89 81       	ldd	r24, Y+1	; 0x01
    268e:	88 2f       	mov	r24, r24
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	80 74       	andi	r24, 0x40	; 64
    2694:	90 70       	andi	r25, 0x00	; 0
    2696:	08 2e       	mov	r0, r24
    2698:	89 2f       	mov	r24, r25
    269a:	00 0c       	add	r0, r0
    269c:	88 1f       	adc	r24, r24
    269e:	99 0b       	sbc	r25, r25
    26a0:	00 0c       	add	r0, r0
    26a2:	88 1f       	adc	r24, r24
    26a4:	99 1f       	adc	r25, r25
    26a6:	00 97       	sbiw	r24, 0x00	; 0
    26a8:	31 f0       	breq	.+12     	; 0x26b6 <LCD_4bit_sendchar+0x72>
    26aa:	86 e0       	ldi	r24, 0x06	; 6
    26ac:	61 e4       	ldi	r22, 0x41	; 65
    26ae:	41 e0       	ldi	r20, 0x01	; 1
    26b0:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    26b4:	05 c0       	rjmp	.+10     	; 0x26c0 <LCD_4bit_sendchar+0x7c>
    26b6:	86 e0       	ldi	r24, 0x06	; 6
    26b8:	61 e4       	ldi	r22, 0x41	; 65
    26ba:	40 e0       	ldi	r20, 0x00	; 0
    26bc:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,5)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	88 2f       	mov	r24, r24
    26c4:	90 e0       	ldi	r25, 0x00	; 0
    26c6:	80 72       	andi	r24, 0x20	; 32
    26c8:	90 70       	andi	r25, 0x00	; 0
    26ca:	95 95       	asr	r25
    26cc:	87 95       	ror	r24
    26ce:	95 95       	asr	r25
    26d0:	87 95       	ror	r24
    26d2:	95 95       	asr	r25
    26d4:	87 95       	ror	r24
    26d6:	95 95       	asr	r25
    26d8:	87 95       	ror	r24
    26da:	95 95       	asr	r25
    26dc:	87 95       	ror	r24
    26de:	00 97       	sbiw	r24, 0x00	; 0
    26e0:	31 f0       	breq	.+12     	; 0x26ee <LCD_4bit_sendchar+0xaa>
    26e2:	85 e0       	ldi	r24, 0x05	; 5
    26e4:	61 e4       	ldi	r22, 0x41	; 65
    26e6:	41 e0       	ldi	r20, 0x01	; 1
    26e8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    26ec:	05 c0       	rjmp	.+10     	; 0x26f8 <LCD_4bit_sendchar+0xb4>
    26ee:	85 e0       	ldi	r24, 0x05	; 5
    26f0:	61 e4       	ldi	r22, 0x41	; 65
    26f2:	40 e0       	ldi	r20, 0x00	; 0
    26f4:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,4)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    26f8:	89 81       	ldd	r24, Y+1	; 0x01
    26fa:	88 2f       	mov	r24, r24
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	80 71       	andi	r24, 0x10	; 16
    2700:	90 70       	andi	r25, 0x00	; 0
    2702:	95 95       	asr	r25
    2704:	87 95       	ror	r24
    2706:	95 95       	asr	r25
    2708:	87 95       	ror	r24
    270a:	95 95       	asr	r25
    270c:	87 95       	ror	r24
    270e:	95 95       	asr	r25
    2710:	87 95       	ror	r24
    2712:	00 97       	sbiw	r24, 0x00	; 0
    2714:	31 f0       	breq	.+12     	; 0x2722 <LCD_4bit_sendchar+0xde>
    2716:	84 e0       	ldi	r24, 0x04	; 4
    2718:	61 e4       	ldi	r22, 0x41	; 65
    271a:	41 e0       	ldi	r20, 0x01	; 1
    271c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2720:	05 c0       	rjmp	.+10     	; 0x272c <LCD_4bit_sendchar+0xe8>
    2722:	84 e0       	ldi	r24, 0x04	; 4
    2724:	61 e4       	ldi	r22, 0x41	; 65
    2726:	40 e0       	ldi	r20, 0x00	; 0
    2728:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	LCD_trig_EN() ;
    272c:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <LCD_trig_EN>
	(GET_BIT(Char,3)) ? DIO_write(D7,LCD_PORT,HIGH) : DIO_write(D7,LCD_PORT,LOW) ;
    2730:	89 81       	ldd	r24, Y+1	; 0x01
    2732:	88 2f       	mov	r24, r24
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	88 70       	andi	r24, 0x08	; 8
    2738:	90 70       	andi	r25, 0x00	; 0
    273a:	95 95       	asr	r25
    273c:	87 95       	ror	r24
    273e:	95 95       	asr	r25
    2740:	87 95       	ror	r24
    2742:	95 95       	asr	r25
    2744:	87 95       	ror	r24
    2746:	00 97       	sbiw	r24, 0x00	; 0
    2748:	31 f0       	breq	.+12     	; 0x2756 <LCD_4bit_sendchar+0x112>
    274a:	87 e0       	ldi	r24, 0x07	; 7
    274c:	61 e4       	ldi	r22, 0x41	; 65
    274e:	41 e0       	ldi	r20, 0x01	; 1
    2750:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2754:	05 c0       	rjmp	.+10     	; 0x2760 <LCD_4bit_sendchar+0x11c>
    2756:	87 e0       	ldi	r24, 0x07	; 7
    2758:	61 e4       	ldi	r22, 0x41	; 65
    275a:	40 e0       	ldi	r20, 0x00	; 0
    275c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,2)) ? DIO_write(D6,LCD_PORT,HIGH) : DIO_write(D6,LCD_PORT,LOW) ;
    2760:	89 81       	ldd	r24, Y+1	; 0x01
    2762:	88 2f       	mov	r24, r24
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	84 70       	andi	r24, 0x04	; 4
    2768:	90 70       	andi	r25, 0x00	; 0
    276a:	95 95       	asr	r25
    276c:	87 95       	ror	r24
    276e:	95 95       	asr	r25
    2770:	87 95       	ror	r24
    2772:	00 97       	sbiw	r24, 0x00	; 0
    2774:	31 f0       	breq	.+12     	; 0x2782 <LCD_4bit_sendchar+0x13e>
    2776:	86 e0       	ldi	r24, 0x06	; 6
    2778:	61 e4       	ldi	r22, 0x41	; 65
    277a:	41 e0       	ldi	r20, 0x01	; 1
    277c:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2780:	05 c0       	rjmp	.+10     	; 0x278c <LCD_4bit_sendchar+0x148>
    2782:	86 e0       	ldi	r24, 0x06	; 6
    2784:	61 e4       	ldi	r22, 0x41	; 65
    2786:	40 e0       	ldi	r20, 0x00	; 0
    2788:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,1)) ? DIO_write(D5,LCD_PORT,HIGH) : DIO_write(D5,LCD_PORT,LOW) ;
    278c:	89 81       	ldd	r24, Y+1	; 0x01
    278e:	88 2f       	mov	r24, r24
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	82 70       	andi	r24, 0x02	; 2
    2794:	90 70       	andi	r25, 0x00	; 0
    2796:	95 95       	asr	r25
    2798:	87 95       	ror	r24
    279a:	00 97       	sbiw	r24, 0x00	; 0
    279c:	31 f0       	breq	.+12     	; 0x27aa <LCD_4bit_sendchar+0x166>
    279e:	85 e0       	ldi	r24, 0x05	; 5
    27a0:	61 e4       	ldi	r22, 0x41	; 65
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    27a8:	05 c0       	rjmp	.+10     	; 0x27b4 <LCD_4bit_sendchar+0x170>
    27aa:	85 e0       	ldi	r24, 0x05	; 5
    27ac:	61 e4       	ldi	r22, 0x41	; 65
    27ae:	40 e0       	ldi	r20, 0x00	; 0
    27b0:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	(GET_BIT(Char,0)) ? DIO_write(D4,LCD_PORT,HIGH) : DIO_write(D4,LCD_PORT,LOW) ;
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	88 2f       	mov	r24, r24
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	81 70       	andi	r24, 0x01	; 1
    27bc:	90 70       	andi	r25, 0x00	; 0
    27be:	88 23       	and	r24, r24
    27c0:	31 f0       	breq	.+12     	; 0x27ce <LCD_4bit_sendchar+0x18a>
    27c2:	84 e0       	ldi	r24, 0x04	; 4
    27c4:	61 e4       	ldi	r22, 0x41	; 65
    27c6:	41 e0       	ldi	r20, 0x01	; 1
    27c8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    27cc:	05 c0       	rjmp	.+10     	; 0x27d8 <LCD_4bit_sendchar+0x194>
    27ce:	84 e0       	ldi	r24, 0x04	; 4
    27d0:	61 e4       	ldi	r22, 0x41	; 65
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	LCD_trig_EN() ;
    27d8:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <LCD_trig_EN>
}
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <LCD_4bit_sendstring>:

void LCD_4bit_sendstring (uint8_t* string)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <LCD_4bit_sendstring+0x6>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
    27f2:	0b c0       	rjmp	.+22     	; 0x280a <LCD_4bit_sendstring+0x26>
	while (*string !='\0')
	{
		LCD_4bit_sendchar(*string++) ;
    27f4:	e9 81       	ldd	r30, Y+1	; 0x01
    27f6:	fa 81       	ldd	r31, Y+2	; 0x02
    27f8:	20 81       	ld	r18, Z
    27fa:	89 81       	ldd	r24, Y+1	; 0x01
    27fc:	9a 81       	ldd	r25, Y+2	; 0x02
    27fe:	01 96       	adiw	r24, 0x01	; 1
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
    2804:	82 2f       	mov	r24, r18
    2806:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_4bit_sendchar>
	LCD_trig_EN() ;
}

void LCD_4bit_sendstring (uint8_t* string)
{
	while (*string !='\0')
    280a:	e9 81       	ldd	r30, Y+1	; 0x01
    280c:	fa 81       	ldd	r31, Y+2	; 0x02
    280e:	80 81       	ld	r24, Z
    2810:	88 23       	and	r24, r24
    2812:	81 f7       	brne	.-32     	; 0x27f4 <LCD_4bit_sendstring+0x10>
	{
		LCD_4bit_sendchar(*string++) ;
	}
}
    2814:	0f 90       	pop	r0
    2816:	0f 90       	pop	r0
    2818:	cf 91       	pop	r28
    281a:	df 91       	pop	r29
    281c:	08 95       	ret

0000281e <LCD_4bit_sendstring_x_y>:

 void LCD_4bit_sendstring_x_y(uint8_t x , uint8_t y ,uint8_t* string)
 {
    281e:	df 93       	push	r29
    2820:	cf 93       	push	r28
    2822:	00 d0       	rcall	.+0      	; 0x2824 <LCD_4bit_sendstring_x_y+0x6>
    2824:	00 d0       	rcall	.+0      	; 0x2826 <LCD_4bit_sendstring_x_y+0x8>
    2826:	cd b7       	in	r28, 0x3d	; 61
    2828:	de b7       	in	r29, 0x3e	; 62
    282a:	89 83       	std	Y+1, r24	; 0x01
    282c:	6a 83       	std	Y+2, r22	; 0x02
    282e:	5c 83       	std	Y+4, r21	; 0x04
    2830:	4b 83       	std	Y+3, r20	; 0x03
	  // x 0--->15
	  // y 0 -->1
 if (0==y)
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	88 23       	and	r24, r24
    2836:	21 f4       	brne	.+8      	; 0x2840 <LCD_4bit_sendstring_x_y+0x22>
	 LCD_4bit_sendcmd(0x80) ; // forces cursor to the first line
    2838:	80 e8       	ldi	r24, 0x80	; 128
    283a:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    283e:	0b c0       	rjmp	.+22     	; 0x2856 <LCD_4bit_sendstring_x_y+0x38>
 else if (1==y)
    2840:	8a 81       	ldd	r24, Y+2	; 0x02
    2842:	81 30       	cpi	r24, 0x01	; 1
    2844:	21 f4       	brne	.+8      	; 0x284e <LCD_4bit_sendstring_x_y+0x30>
	 LCD_4bit_sendcmd(0xC0) ; // forces cursor to second line
    2846:	80 ec       	ldi	r24, 0xC0	; 192
    2848:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    284c:	04 c0       	rjmp	.+8      	; 0x2856 <LCD_4bit_sendstring_x_y+0x38>
 else
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
    284e:	84 e7       	ldi	r24, 0x74	; 116
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
if (x>15)
    2856:	89 81       	ldd	r24, Y+1	; 0x01
    2858:	80 31       	cpi	r24, 0x10	; 16
    285a:	58 f0       	brcs	.+22     	; 0x2872 <LCD_4bit_sendstring_x_y+0x54>
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
    285c:	84 e7       	ldi	r24, 0x74	; 116
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    2864:	0d c0       	rjmp	.+26     	; 0x2880 <LCD_4bit_sendstring_x_y+0x62>
else
{		while (x)
	{ LCD_4bit_sendcmd(0x14) ;
    2866:	84 e1       	ldi	r24, 0x14	; 20
    2868:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
		x-- ;
    286c:	89 81       	ldd	r24, Y+1	; 0x01
    286e:	81 50       	subi	r24, 0x01	; 1
    2870:	89 83       	std	Y+1, r24	; 0x01
 else
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
if (x>15)
	 LCD_4bit_sendstring("ERROR_OUT_RANGE") ;
else
{		while (x)
    2872:	89 81       	ldd	r24, Y+1	; 0x01
    2874:	88 23       	and	r24, r24
    2876:	b9 f7       	brne	.-18     	; 0x2866 <LCD_4bit_sendstring_x_y+0x48>
	{ LCD_4bit_sendcmd(0x14) ;
		x-- ;
	}
	LCD_4bit_sendstring(string) ;
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
}

}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	0f 90       	pop	r0
    2886:	0f 90       	pop	r0
    2888:	cf 91       	pop	r28
    288a:	df 91       	pop	r29
    288c:	08 95       	ret

0000288e <LCD_4bit_clear>:


void LCD_4bit_clear()
{
    288e:	df 93       	push	r29
    2890:	cf 93       	push	r28
    2892:	cd b7       	in	r28, 0x3d	; 61
    2894:	de b7       	in	r29, 0x3e	; 62
    2896:	68 97       	sbiw	r28, 0x18	; 24
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
LCD_4bit_sendcmd(CLRSc) ;
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	0e 94 52 12 	call	0x24a4	; 0x24a4 <LCD_4bit_sendcmd>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	a0 e2       	ldi	r26, 0x20	; 32
    28ae:	b2 e4       	ldi	r27, 0x42	; 66
    28b0:	8d 8b       	std	Y+21, r24	; 0x15
    28b2:	9e 8b       	std	Y+22, r25	; 0x16
    28b4:	af 8b       	std	Y+23, r26	; 0x17
    28b6:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    28b8:	6d 89       	ldd	r22, Y+21	; 0x15
    28ba:	7e 89       	ldd	r23, Y+22	; 0x16
    28bc:	8f 89       	ldd	r24, Y+23	; 0x17
    28be:	98 8d       	ldd	r25, Y+24	; 0x18
    28c0:	2b ea       	ldi	r18, 0xAB	; 171
    28c2:	3a ea       	ldi	r19, 0xAA	; 170
    28c4:	4a ea       	ldi	r20, 0xAA	; 170
    28c6:	5e e3       	ldi	r21, 0x3E	; 62
    28c8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	89 8b       	std	Y+17, r24	; 0x11
    28d2:	9a 8b       	std	Y+18, r25	; 0x12
    28d4:	ab 8b       	std	Y+19, r26	; 0x13
    28d6:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    28d8:	69 89       	ldd	r22, Y+17	; 0x11
    28da:	7a 89       	ldd	r23, Y+18	; 0x12
    28dc:	8b 89       	ldd	r24, Y+19	; 0x13
    28de:	9c 89       	ldd	r25, Y+20	; 0x14
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	40 e8       	ldi	r20, 0x80	; 128
    28e6:	5f e3       	ldi	r21, 0x3F	; 63
    28e8:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    28ec:	88 23       	and	r24, r24
    28ee:	1c f4       	brge	.+6      	; 0x28f6 <LCD_4bit_clear+0x68>
		__ticks = 1;
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	88 8b       	std	Y+16, r24	; 0x10
    28f4:	91 c0       	rjmp	.+290    	; 0x2a18 <LCD_4bit_clear+0x18a>
	else if (__tmp > 255)
    28f6:	69 89       	ldd	r22, Y+17	; 0x11
    28f8:	7a 89       	ldd	r23, Y+18	; 0x12
    28fa:	8b 89       	ldd	r24, Y+19	; 0x13
    28fc:	9c 89       	ldd	r25, Y+20	; 0x14
    28fe:	20 e0       	ldi	r18, 0x00	; 0
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	4f e7       	ldi	r20, 0x7F	; 127
    2904:	53 e4       	ldi	r21, 0x43	; 67
    2906:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    290a:	18 16       	cp	r1, r24
    290c:	0c f0       	brlt	.+2      	; 0x2910 <LCD_4bit_clear+0x82>
    290e:	7b c0       	rjmp	.+246    	; 0x2a06 <LCD_4bit_clear+0x178>
	{
		_delay_ms(__us / 1000.0);
    2910:	6d 89       	ldd	r22, Y+21	; 0x15
    2912:	7e 89       	ldd	r23, Y+22	; 0x16
    2914:	8f 89       	ldd	r24, Y+23	; 0x17
    2916:	98 8d       	ldd	r25, Y+24	; 0x18
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	4a e7       	ldi	r20, 0x7A	; 122
    291e:	54 e4       	ldi	r21, 0x44	; 68
    2920:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	8c 87       	std	Y+12, r24	; 0x0c
    292a:	9d 87       	std	Y+13, r25	; 0x0d
    292c:	ae 87       	std	Y+14, r26	; 0x0e
    292e:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2930:	6c 85       	ldd	r22, Y+12	; 0x0c
    2932:	7d 85       	ldd	r23, Y+13	; 0x0d
    2934:	8e 85       	ldd	r24, Y+14	; 0x0e
    2936:	9f 85       	ldd	r25, Y+15	; 0x0f
    2938:	20 e0       	ldi	r18, 0x00	; 0
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	4a e7       	ldi	r20, 0x7A	; 122
    293e:	53 e4       	ldi	r21, 0x43	; 67
    2940:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	88 87       	std	Y+8, r24	; 0x08
    294a:	99 87       	std	Y+9, r25	; 0x09
    294c:	aa 87       	std	Y+10, r26	; 0x0a
    294e:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2950:	68 85       	ldd	r22, Y+8	; 0x08
    2952:	79 85       	ldd	r23, Y+9	; 0x09
    2954:	8a 85       	ldd	r24, Y+10	; 0x0a
    2956:	9b 85       	ldd	r25, Y+11	; 0x0b
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2964:	88 23       	and	r24, r24
    2966:	2c f4       	brge	.+10     	; 0x2972 <LCD_4bit_clear+0xe4>
		__ticks = 1;
    2968:	81 e0       	ldi	r24, 0x01	; 1
    296a:	90 e0       	ldi	r25, 0x00	; 0
    296c:	9f 83       	std	Y+7, r25	; 0x07
    296e:	8e 83       	std	Y+6, r24	; 0x06
    2970:	3f c0       	rjmp	.+126    	; 0x29f0 <LCD_4bit_clear+0x162>
	else if (__tmp > 65535)
    2972:	68 85       	ldd	r22, Y+8	; 0x08
    2974:	79 85       	ldd	r23, Y+9	; 0x09
    2976:	8a 85       	ldd	r24, Y+10	; 0x0a
    2978:	9b 85       	ldd	r25, Y+11	; 0x0b
    297a:	20 e0       	ldi	r18, 0x00	; 0
    297c:	3f ef       	ldi	r19, 0xFF	; 255
    297e:	4f e7       	ldi	r20, 0x7F	; 127
    2980:	57 e4       	ldi	r21, 0x47	; 71
    2982:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2986:	18 16       	cp	r1, r24
    2988:	4c f5       	brge	.+82     	; 0x29dc <LCD_4bit_clear+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    298a:	6c 85       	ldd	r22, Y+12	; 0x0c
    298c:	7d 85       	ldd	r23, Y+13	; 0x0d
    298e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2990:	9f 85       	ldd	r25, Y+15	; 0x0f
    2992:	20 e0       	ldi	r18, 0x00	; 0
    2994:	30 e0       	ldi	r19, 0x00	; 0
    2996:	40 e2       	ldi	r20, 0x20	; 32
    2998:	51 e4       	ldi	r21, 0x41	; 65
    299a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    299e:	dc 01       	movw	r26, r24
    29a0:	cb 01       	movw	r24, r22
    29a2:	bc 01       	movw	r22, r24
    29a4:	cd 01       	movw	r24, r26
    29a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29aa:	dc 01       	movw	r26, r24
    29ac:	cb 01       	movw	r24, r22
    29ae:	9f 83       	std	Y+7, r25	; 0x07
    29b0:	8e 83       	std	Y+6, r24	; 0x06
    29b2:	0f c0       	rjmp	.+30     	; 0x29d2 <LCD_4bit_clear+0x144>
    29b4:	89 e1       	ldi	r24, 0x19	; 25
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	9d 83       	std	Y+5, r25	; 0x05
    29ba:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    29bc:	8c 81       	ldd	r24, Y+4	; 0x04
    29be:	9d 81       	ldd	r25, Y+5	; 0x05
    29c0:	01 97       	sbiw	r24, 0x01	; 1
    29c2:	f1 f7       	brne	.-4      	; 0x29c0 <LCD_4bit_clear+0x132>
    29c4:	9d 83       	std	Y+5, r25	; 0x05
    29c6:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29c8:	8e 81       	ldd	r24, Y+6	; 0x06
    29ca:	9f 81       	ldd	r25, Y+7	; 0x07
    29cc:	01 97       	sbiw	r24, 0x01	; 1
    29ce:	9f 83       	std	Y+7, r25	; 0x07
    29d0:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29d2:	8e 81       	ldd	r24, Y+6	; 0x06
    29d4:	9f 81       	ldd	r25, Y+7	; 0x07
    29d6:	00 97       	sbiw	r24, 0x00	; 0
    29d8:	69 f7       	brne	.-38     	; 0x29b4 <LCD_4bit_clear+0x126>
    29da:	24 c0       	rjmp	.+72     	; 0x2a24 <LCD_4bit_clear+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29dc:	68 85       	ldd	r22, Y+8	; 0x08
    29de:	79 85       	ldd	r23, Y+9	; 0x09
    29e0:	8a 85       	ldd	r24, Y+10	; 0x0a
    29e2:	9b 85       	ldd	r25, Y+11	; 0x0b
    29e4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    29e8:	dc 01       	movw	r26, r24
    29ea:	cb 01       	movw	r24, r22
    29ec:	9f 83       	std	Y+7, r25	; 0x07
    29ee:	8e 83       	std	Y+6, r24	; 0x06
    29f0:	8e 81       	ldd	r24, Y+6	; 0x06
    29f2:	9f 81       	ldd	r25, Y+7	; 0x07
    29f4:	9b 83       	std	Y+3, r25	; 0x03
    29f6:	8a 83       	std	Y+2, r24	; 0x02
    29f8:	8a 81       	ldd	r24, Y+2	; 0x02
    29fa:	9b 81       	ldd	r25, Y+3	; 0x03
    29fc:	01 97       	sbiw	r24, 0x01	; 1
    29fe:	f1 f7       	brne	.-4      	; 0x29fc <LCD_4bit_clear+0x16e>
    2a00:	9b 83       	std	Y+3, r25	; 0x03
    2a02:	8a 83       	std	Y+2, r24	; 0x02
    2a04:	0f c0       	rjmp	.+30     	; 0x2a24 <LCD_4bit_clear+0x196>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2a06:	69 89       	ldd	r22, Y+17	; 0x11
    2a08:	7a 89       	ldd	r23, Y+18	; 0x12
    2a0a:	8b 89       	ldd	r24, Y+19	; 0x13
    2a0c:	9c 89       	ldd	r25, Y+20	; 0x14
    2a0e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2a12:	dc 01       	movw	r26, r24
    2a14:	cb 01       	movw	r24, r22
    2a16:	88 8b       	std	Y+16, r24	; 0x10
    2a18:	88 89       	ldd	r24, Y+16	; 0x10
    2a1a:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	8a 95       	dec	r24
    2a20:	f1 f7       	brne	.-4      	; 0x2a1e <LCD_4bit_clear+0x190>
    2a22:	89 83       	std	Y+1, r24	; 0x01
_delay_us(40) ;
}
    2a24:	68 96       	adiw	r28, 0x18	; 24
    2a26:	0f b6       	in	r0, 0x3f	; 63
    2a28:	f8 94       	cli
    2a2a:	de bf       	out	0x3e, r29	; 62
    2a2c:	0f be       	out	0x3f, r0	; 63
    2a2e:	cd bf       	out	0x3d, r28	; 61
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <LCD_trig_EN>:




void LCD_trig_EN(void)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
    2a3e:	68 97       	sbiw	r28, 0x18	; 24
    2a40:	0f b6       	in	r0, 0x3f	; 63
    2a42:	f8 94       	cli
    2a44:	de bf       	out	0x3e, r29	; 62
    2a46:	0f be       	out	0x3f, r0	; 63
    2a48:	cd bf       	out	0x3d, r28	; 61
	
	DIO_write(EN,EN_PORT,HIGH) ;
    2a4a:	83 e0       	ldi	r24, 0x03	; 3
    2a4c:	62 e4       	ldi	r22, 0x42	; 66
    2a4e:	41 e0       	ldi	r20, 0x01	; 1
    2a50:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	a0 e2       	ldi	r26, 0x20	; 32
    2a5a:	b1 e4       	ldi	r27, 0x41	; 65
    2a5c:	8d 8b       	std	Y+21, r24	; 0x15
    2a5e:	9e 8b       	std	Y+22, r25	; 0x16
    2a60:	af 8b       	std	Y+23, r26	; 0x17
    2a62:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2a64:	6d 89       	ldd	r22, Y+21	; 0x15
    2a66:	7e 89       	ldd	r23, Y+22	; 0x16
    2a68:	8f 89       	ldd	r24, Y+23	; 0x17
    2a6a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a6c:	2b ea       	ldi	r18, 0xAB	; 171
    2a6e:	3a ea       	ldi	r19, 0xAA	; 170
    2a70:	4a ea       	ldi	r20, 0xAA	; 170
    2a72:	5e e3       	ldi	r21, 0x3E	; 62
    2a74:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2a78:	dc 01       	movw	r26, r24
    2a7a:	cb 01       	movw	r24, r22
    2a7c:	89 8b       	std	Y+17, r24	; 0x11
    2a7e:	9a 8b       	std	Y+18, r25	; 0x12
    2a80:	ab 8b       	std	Y+19, r26	; 0x13
    2a82:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2a84:	69 89       	ldd	r22, Y+17	; 0x11
    2a86:	7a 89       	ldd	r23, Y+18	; 0x12
    2a88:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    2a8c:	20 e0       	ldi	r18, 0x00	; 0
    2a8e:	30 e0       	ldi	r19, 0x00	; 0
    2a90:	40 e8       	ldi	r20, 0x80	; 128
    2a92:	5f e3       	ldi	r21, 0x3F	; 63
    2a94:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2a98:	88 23       	and	r24, r24
    2a9a:	1c f4       	brge	.+6      	; 0x2aa2 <LCD_trig_EN+0x6c>
		__ticks = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	88 8b       	std	Y+16, r24	; 0x10
    2aa0:	91 c0       	rjmp	.+290    	; 0x2bc4 <LCD_trig_EN+0x18e>
	else if (__tmp > 255)
    2aa2:	69 89       	ldd	r22, Y+17	; 0x11
    2aa4:	7a 89       	ldd	r23, Y+18	; 0x12
    2aa6:	8b 89       	ldd	r24, Y+19	; 0x13
    2aa8:	9c 89       	ldd	r25, Y+20	; 0x14
    2aaa:	20 e0       	ldi	r18, 0x00	; 0
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	53 e4       	ldi	r21, 0x43	; 67
    2ab2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2ab6:	18 16       	cp	r1, r24
    2ab8:	0c f0       	brlt	.+2      	; 0x2abc <LCD_trig_EN+0x86>
    2aba:	7b c0       	rjmp	.+246    	; 0x2bb2 <LCD_trig_EN+0x17c>
	{
		_delay_ms(__us / 1000.0);
    2abc:	6d 89       	ldd	r22, Y+21	; 0x15
    2abe:	7e 89       	ldd	r23, Y+22	; 0x16
    2ac0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ac2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ac4:	20 e0       	ldi	r18, 0x00	; 0
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	4a e7       	ldi	r20, 0x7A	; 122
    2aca:	54 e4       	ldi	r21, 0x44	; 68
    2acc:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2ad0:	dc 01       	movw	r26, r24
    2ad2:	cb 01       	movw	r24, r22
    2ad4:	8c 87       	std	Y+12, r24	; 0x0c
    2ad6:	9d 87       	std	Y+13, r25	; 0x0d
    2ad8:	ae 87       	std	Y+14, r26	; 0x0e
    2ada:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2adc:	6c 85       	ldd	r22, Y+12	; 0x0c
    2ade:	7d 85       	ldd	r23, Y+13	; 0x0d
    2ae0:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae2:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ae4:	20 e0       	ldi	r18, 0x00	; 0
    2ae6:	30 e0       	ldi	r19, 0x00	; 0
    2ae8:	4a e7       	ldi	r20, 0x7A	; 122
    2aea:	53 e4       	ldi	r21, 0x43	; 67
    2aec:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2af0:	dc 01       	movw	r26, r24
    2af2:	cb 01       	movw	r24, r22
    2af4:	88 87       	std	Y+8, r24	; 0x08
    2af6:	99 87       	std	Y+9, r25	; 0x09
    2af8:	aa 87       	std	Y+10, r26	; 0x0a
    2afa:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2afc:	68 85       	ldd	r22, Y+8	; 0x08
    2afe:	79 85       	ldd	r23, Y+9	; 0x09
    2b00:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b02:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	40 e8       	ldi	r20, 0x80	; 128
    2b0a:	5f e3       	ldi	r21, 0x3F	; 63
    2b0c:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2b10:	88 23       	and	r24, r24
    2b12:	2c f4       	brge	.+10     	; 0x2b1e <LCD_trig_EN+0xe8>
		__ticks = 1;
    2b14:	81 e0       	ldi	r24, 0x01	; 1
    2b16:	90 e0       	ldi	r25, 0x00	; 0
    2b18:	9f 83       	std	Y+7, r25	; 0x07
    2b1a:	8e 83       	std	Y+6, r24	; 0x06
    2b1c:	3f c0       	rjmp	.+126    	; 0x2b9c <LCD_trig_EN+0x166>
	else if (__tmp > 65535)
    2b1e:	68 85       	ldd	r22, Y+8	; 0x08
    2b20:	79 85       	ldd	r23, Y+9	; 0x09
    2b22:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b24:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b26:	20 e0       	ldi	r18, 0x00	; 0
    2b28:	3f ef       	ldi	r19, 0xFF	; 255
    2b2a:	4f e7       	ldi	r20, 0x7F	; 127
    2b2c:	57 e4       	ldi	r21, 0x47	; 71
    2b2e:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2b32:	18 16       	cp	r1, r24
    2b34:	4c f5       	brge	.+82     	; 0x2b88 <LCD_trig_EN+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b36:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b38:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b3a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b3c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e2       	ldi	r20, 0x20	; 32
    2b44:	51 e4       	ldi	r21, 0x41	; 65
    2b46:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2b4a:	dc 01       	movw	r26, r24
    2b4c:	cb 01       	movw	r24, r22
    2b4e:	bc 01       	movw	r22, r24
    2b50:	cd 01       	movw	r24, r26
    2b52:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
    2b5a:	9f 83       	std	Y+7, r25	; 0x07
    2b5c:	8e 83       	std	Y+6, r24	; 0x06
    2b5e:	0f c0       	rjmp	.+30     	; 0x2b7e <LCD_trig_EN+0x148>
    2b60:	89 e1       	ldi	r24, 0x19	; 25
    2b62:	90 e0       	ldi	r25, 0x00	; 0
    2b64:	9d 83       	std	Y+5, r25	; 0x05
    2b66:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2b68:	8c 81       	ldd	r24, Y+4	; 0x04
    2b6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b6c:	01 97       	sbiw	r24, 0x01	; 1
    2b6e:	f1 f7       	brne	.-4      	; 0x2b6c <LCD_trig_EN+0x136>
    2b70:	9d 83       	std	Y+5, r25	; 0x05
    2b72:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b74:	8e 81       	ldd	r24, Y+6	; 0x06
    2b76:	9f 81       	ldd	r25, Y+7	; 0x07
    2b78:	01 97       	sbiw	r24, 0x01	; 1
    2b7a:	9f 83       	std	Y+7, r25	; 0x07
    2b7c:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b80:	9f 81       	ldd	r25, Y+7	; 0x07
    2b82:	00 97       	sbiw	r24, 0x00	; 0
    2b84:	69 f7       	brne	.-38     	; 0x2b60 <LCD_trig_EN+0x12a>
    2b86:	24 c0       	rjmp	.+72     	; 0x2bd0 <LCD_trig_EN+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b88:	68 85       	ldd	r22, Y+8	; 0x08
    2b8a:	79 85       	ldd	r23, Y+9	; 0x09
    2b8c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b90:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2b94:	dc 01       	movw	r26, r24
    2b96:	cb 01       	movw	r24, r22
    2b98:	9f 83       	std	Y+7, r25	; 0x07
    2b9a:	8e 83       	std	Y+6, r24	; 0x06
    2b9c:	8e 81       	ldd	r24, Y+6	; 0x06
    2b9e:	9f 81       	ldd	r25, Y+7	; 0x07
    2ba0:	9b 83       	std	Y+3, r25	; 0x03
    2ba2:	8a 83       	std	Y+2, r24	; 0x02
    2ba4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ba8:	01 97       	sbiw	r24, 0x01	; 1
    2baa:	f1 f7       	brne	.-4      	; 0x2ba8 <LCD_trig_EN+0x172>
    2bac:	9b 83       	std	Y+3, r25	; 0x03
    2bae:	8a 83       	std	Y+2, r24	; 0x02
    2bb0:	0f c0       	rjmp	.+30     	; 0x2bd0 <LCD_trig_EN+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2bb2:	69 89       	ldd	r22, Y+17	; 0x11
    2bb4:	7a 89       	ldd	r23, Y+18	; 0x12
    2bb6:	8b 89       	ldd	r24, Y+19	; 0x13
    2bb8:	9c 89       	ldd	r25, Y+20	; 0x14
    2bba:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2bbe:	dc 01       	movw	r26, r24
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	88 8b       	std	Y+16, r24	; 0x10
    2bc4:	88 89       	ldd	r24, Y+16	; 0x10
    2bc6:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	8a 95       	dec	r24
    2bcc:	f1 f7       	brne	.-4      	; 0x2bca <LCD_trig_EN+0x194>
    2bce:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10) ;
	DIO_write(EN,EN_PORT,LOW) ;
    2bd0:	83 e0       	ldi	r24, 0x03	; 3
    2bd2:	62 e4       	ldi	r22, 0x42	; 66
    2bd4:	40 e0       	ldi	r20, 0x00	; 0
    2bd6:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	
}
    2bda:	68 96       	adiw	r28, 0x18	; 24
    2bdc:	0f b6       	in	r0, 0x3f	; 63
    2bde:	f8 94       	cli
    2be0:	de bf       	out	0x3e, r29	; 62
    2be2:	0f be       	out	0x3f, r0	; 63
    2be4:	cd bf       	out	0x3d, r28	; 61
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <KP_4x4_init>:
		{'C','0','=','+'}
} ;


void KP_4x4_init()
{	DIO_init(OUT_A,KP_PORT,OUT) ;
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	63 e4       	ldi	r22, 0x43	; 67
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(OUT_B,KP_PORT,OUT) ;
    2bfe:	81 e0       	ldi	r24, 0x01	; 1
    2c00:	63 e4       	ldi	r22, 0x43	; 67
    2c02:	41 e0       	ldi	r20, 0x01	; 1
    2c04:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(OUT_C,KP_PORT,OUT) ;
    2c08:	82 e0       	ldi	r24, 0x02	; 2
    2c0a:	63 e4       	ldi	r22, 0x43	; 67
    2c0c:	41 e0       	ldi	r20, 0x01	; 1
    2c0e:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(OUT_D,KP_PORT,OUT) ;
    2c12:	83 e0       	ldi	r24, 0x03	; 3
    2c14:	63 e4       	ldi	r22, 0x43	; 67
    2c16:	41 e0       	ldi	r20, 0x01	; 1
    2c18:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(IN_1,KP_PORT,IN_PULLUP_ON) ;
    2c1c:	84 e0       	ldi	r24, 0x04	; 4
    2c1e:	63 e4       	ldi	r22, 0x43	; 67
    2c20:	42 e0       	ldi	r20, 0x02	; 2
    2c22:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(IN_2,KP_PORT,IN_PULLUP_ON) ;
    2c26:	85 e0       	ldi	r24, 0x05	; 5
    2c28:	63 e4       	ldi	r22, 0x43	; 67
    2c2a:	42 e0       	ldi	r20, 0x02	; 2
    2c2c:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(IN_3,KP_PORT,IN_PULLUP_ON) ;
    2c30:	86 e0       	ldi	r24, 0x06	; 6
    2c32:	63 e4       	ldi	r22, 0x43	; 67
    2c34:	42 e0       	ldi	r20, 0x02	; 2
    2c36:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
	DIO_init(IN_4,KP_PORT,IN_PULLUP_ON) ;
    2c3a:	87 e0       	ldi	r24, 0x07	; 7
    2c3c:	63 e4       	ldi	r22, 0x43	; 67
    2c3e:	42 e0       	ldi	r20, 0x02	; 2
    2c40:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
}
    2c44:	cf 91       	pop	r28
    2c46:	df 91       	pop	r29
    2c48:	08 95       	ret

00002c4a <KP_4x4_check_press>:


uint8_t KP_4x4_check_press()
{
    2c4a:	df 93       	push	r29
    2c4c:	cf 93       	push	r28
    2c4e:	cd b7       	in	r28, 0x3d	; 61
    2c50:	de b7       	in	r29, 0x3e	; 62
    2c52:	61 97       	sbiw	r28, 0x11	; 17
    2c54:	0f b6       	in	r0, 0x3f	; 63
    2c56:	f8 94       	cli
    2c58:	de bf       	out	0x3e, r29	; 62
    2c5a:	0f be       	out	0x3f, r0	; 63
    2c5c:	cd bf       	out	0x3d, r28	; 61
	uint8_t i , j ;
	DIO_write(OUT_A,KP_PORT,HIGH) ;
    2c5e:	80 e0       	ldi	r24, 0x00	; 0
    2c60:	63 e4       	ldi	r22, 0x43	; 67
    2c62:	41 e0       	ldi	r20, 0x01	; 1
    2c64:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(OUT_B,KP_PORT,HIGH) ;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	63 e4       	ldi	r22, 0x43	; 67
    2c6c:	41 e0       	ldi	r20, 0x01	; 1
    2c6e:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(OUT_C,KP_PORT,HIGH) ;
    2c72:	82 e0       	ldi	r24, 0x02	; 2
    2c74:	63 e4       	ldi	r22, 0x43	; 67
    2c76:	41 e0       	ldi	r20, 0x01	; 1
    2c78:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(OUT_D,KP_PORT,HIGH) ;
    2c7c:	83 e0       	ldi	r24, 0x03	; 3
    2c7e:	63 e4       	ldi	r22, 0x43	; 67
    2c80:	41 e0       	ldi	r20, 0x01	; 1
    2c82:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
    2c86:	80 e0       	ldi	r24, 0x00	; 0
    2c88:	90 e0       	ldi	r25, 0x00	; 0
    2c8a:	a0 e2       	ldi	r26, 0x20	; 32
    2c8c:	b1 e4       	ldi	r27, 0x41	; 65
    2c8e:	8b 87       	std	Y+11, r24	; 0x0b
    2c90:	9c 87       	std	Y+12, r25	; 0x0c
    2c92:	ad 87       	std	Y+13, r26	; 0x0d
    2c94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c96:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c98:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c9e:	20 e0       	ldi	r18, 0x00	; 0
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	4a e7       	ldi	r20, 0x7A	; 122
    2ca4:	53 e4       	ldi	r21, 0x43	; 67
    2ca6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	8f 83       	std	Y+7, r24	; 0x07
    2cb0:	98 87       	std	Y+8, r25	; 0x08
    2cb2:	a9 87       	std	Y+9, r26	; 0x09
    2cb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2cb6:	6f 81       	ldd	r22, Y+7	; 0x07
    2cb8:	78 85       	ldd	r23, Y+8	; 0x08
    2cba:	89 85       	ldd	r24, Y+9	; 0x09
    2cbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cbe:	20 e0       	ldi	r18, 0x00	; 0
    2cc0:	30 e0       	ldi	r19, 0x00	; 0
    2cc2:	40 e8       	ldi	r20, 0x80	; 128
    2cc4:	5f e3       	ldi	r21, 0x3F	; 63
    2cc6:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2cca:	88 23       	and	r24, r24
    2ccc:	2c f4       	brge	.+10     	; 0x2cd8 <KP_4x4_check_press+0x8e>
		__ticks = 1;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	90 e0       	ldi	r25, 0x00	; 0
    2cd2:	9e 83       	std	Y+6, r25	; 0x06
    2cd4:	8d 83       	std	Y+5, r24	; 0x05
    2cd6:	3f c0       	rjmp	.+126    	; 0x2d56 <KP_4x4_check_press+0x10c>
	else if (__tmp > 65535)
    2cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    2cda:	78 85       	ldd	r23, Y+8	; 0x08
    2cdc:	89 85       	ldd	r24, Y+9	; 0x09
    2cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	3f ef       	ldi	r19, 0xFF	; 255
    2ce4:	4f e7       	ldi	r20, 0x7F	; 127
    2ce6:	57 e4       	ldi	r21, 0x47	; 71
    2ce8:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2cec:	18 16       	cp	r1, r24
    2cee:	4c f5       	brge	.+82     	; 0x2d42 <KP_4x4_check_press+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cf8:	20 e0       	ldi	r18, 0x00	; 0
    2cfa:	30 e0       	ldi	r19, 0x00	; 0
    2cfc:	40 e2       	ldi	r20, 0x20	; 32
    2cfe:	51 e4       	ldi	r21, 0x41	; 65
    2d00:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2d04:	dc 01       	movw	r26, r24
    2d06:	cb 01       	movw	r24, r22
    2d08:	bc 01       	movw	r22, r24
    2d0a:	cd 01       	movw	r24, r26
    2d0c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	9e 83       	std	Y+6, r25	; 0x06
    2d16:	8d 83       	std	Y+5, r24	; 0x05
    2d18:	0f c0       	rjmp	.+30     	; 0x2d38 <KP_4x4_check_press+0xee>
    2d1a:	89 e1       	ldi	r24, 0x19	; 25
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	9c 83       	std	Y+4, r25	; 0x04
    2d20:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2d22:	8b 81       	ldd	r24, Y+3	; 0x03
    2d24:	9c 81       	ldd	r25, Y+4	; 0x04
    2d26:	01 97       	sbiw	r24, 0x01	; 1
    2d28:	f1 f7       	brne	.-4      	; 0x2d26 <KP_4x4_check_press+0xdc>
    2d2a:	9c 83       	std	Y+4, r25	; 0x04
    2d2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    2d30:	9e 81       	ldd	r25, Y+6	; 0x06
    2d32:	01 97       	sbiw	r24, 0x01	; 1
    2d34:	9e 83       	std	Y+6, r25	; 0x06
    2d36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d38:	8d 81       	ldd	r24, Y+5	; 0x05
    2d3a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d3c:	00 97       	sbiw	r24, 0x00	; 0
    2d3e:	69 f7       	brne	.-38     	; 0x2d1a <KP_4x4_check_press+0xd0>
    2d40:	14 c0       	rjmp	.+40     	; 0x2d6a <KP_4x4_check_press+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d42:	6f 81       	ldd	r22, Y+7	; 0x07
    2d44:	78 85       	ldd	r23, Y+8	; 0x08
    2d46:	89 85       	ldd	r24, Y+9	; 0x09
    2d48:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d4a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9e 83       	std	Y+6, r25	; 0x06
    2d54:	8d 83       	std	Y+5, r24	; 0x05
    2d56:	8d 81       	ldd	r24, Y+5	; 0x05
    2d58:	9e 81       	ldd	r25, Y+6	; 0x06
    2d5a:	9a 83       	std	Y+2, r25	; 0x02
    2d5c:	89 83       	std	Y+1, r24	; 0x01
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	9a 81       	ldd	r25, Y+2	; 0x02
    2d62:	01 97       	sbiw	r24, 0x01	; 1
    2d64:	f1 f7       	brne	.-4      	; 0x2d62 <KP_4x4_check_press+0x118>
    2d66:	9a 83       	std	Y+2, r25	; 0x02
    2d68:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10) ;
		for (i = OUT_A ; i<=OUT_D ; i++)
    2d6a:	18 8a       	std	Y+16, r1	; 0x10
    2d6c:	32 c0       	rjmp	.+100    	; 0x2dd2 <KP_4x4_check_press+0x188>
		{		DIO_write(i,KP_PORT,LOW) ;
    2d6e:	88 89       	ldd	r24, Y+16	; 0x10
    2d70:	63 e4       	ldi	r22, 0x43	; 67
    2d72:	40 e0       	ldi	r20, 0x00	; 0
    2d74:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
			for (j =IN_1 ; j<=IN_4 ; j++)
    2d78:	84 e0       	ldi	r24, 0x04	; 4
    2d7a:	8f 87       	std	Y+15, r24	; 0x0f
    2d7c:	1f c0       	rjmp	.+62     	; 0x2dbc <KP_4x4_check_press+0x172>
			{
				if (!DIO_returnbit(j,KP_PORT))
    2d7e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d80:	63 e4       	ldi	r22, 0x43	; 67
    2d82:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <DIO_returnbit>
    2d86:	88 23       	and	r24, r24
    2d88:	b1 f4       	brne	.+44     	; 0x2db6 <KP_4x4_check_press+0x16c>
				{
					return (KP_MapArr[i][j-4]) ;
    2d8a:	88 89       	ldd	r24, Y+16	; 0x10
    2d8c:	48 2f       	mov	r20, r24
    2d8e:	50 e0       	ldi	r21, 0x00	; 0
    2d90:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d92:	88 2f       	mov	r24, r24
    2d94:	90 e0       	ldi	r25, 0x00	; 0
    2d96:	9c 01       	movw	r18, r24
    2d98:	24 50       	subi	r18, 0x04	; 4
    2d9a:	30 40       	sbci	r19, 0x00	; 0
    2d9c:	ca 01       	movw	r24, r20
    2d9e:	88 0f       	add	r24, r24
    2da0:	99 1f       	adc	r25, r25
    2da2:	88 0f       	add	r24, r24
    2da4:	99 1f       	adc	r25, r25
    2da6:	82 0f       	add	r24, r18
    2da8:	93 1f       	adc	r25, r19
    2daa:	fc 01       	movw	r30, r24
    2dac:	ec 51       	subi	r30, 0x1C	; 28
    2dae:	fe 4f       	sbci	r31, 0xFE	; 254
    2db0:	80 81       	ld	r24, Z
    2db2:	89 8b       	std	Y+17, r24	; 0x11
    2db4:	13 c0       	rjmp	.+38     	; 0x2ddc <KP_4x4_check_press+0x192>
	DIO_write(OUT_C,KP_PORT,HIGH) ;
	DIO_write(OUT_D,KP_PORT,HIGH) ;
	_delay_ms(10) ;
		for (i = OUT_A ; i<=OUT_D ; i++)
		{		DIO_write(i,KP_PORT,LOW) ;
			for (j =IN_1 ; j<=IN_4 ; j++)
    2db6:	8f 85       	ldd	r24, Y+15	; 0x0f
    2db8:	8f 5f       	subi	r24, 0xFF	; 255
    2dba:	8f 87       	std	Y+15, r24	; 0x0f
    2dbc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dbe:	88 30       	cpi	r24, 0x08	; 8
    2dc0:	f0 f2       	brcs	.-68     	; 0x2d7e <KP_4x4_check_press+0x134>
				{
					return (KP_MapArr[i][j-4]) ;
				}

			}
			DIO_write(i,KP_PORT,HIGH) ;
    2dc2:	88 89       	ldd	r24, Y+16	; 0x10
    2dc4:	63 e4       	ldi	r22, 0x43	; 67
    2dc6:	41 e0       	ldi	r20, 0x01	; 1
    2dc8:	0e 94 44 0a 	call	0x1488	; 0x1488 <DIO_write>
	DIO_write(OUT_A,KP_PORT,HIGH) ;
	DIO_write(OUT_B,KP_PORT,HIGH) ;
	DIO_write(OUT_C,KP_PORT,HIGH) ;
	DIO_write(OUT_D,KP_PORT,HIGH) ;
	_delay_ms(10) ;
		for (i = OUT_A ; i<=OUT_D ; i++)
    2dcc:	88 89       	ldd	r24, Y+16	; 0x10
    2dce:	8f 5f       	subi	r24, 0xFF	; 255
    2dd0:	88 8b       	std	Y+16, r24	; 0x10
    2dd2:	88 89       	ldd	r24, Y+16	; 0x10
    2dd4:	84 30       	cpi	r24, 0x04	; 4
    2dd6:	58 f2       	brcs	.-106    	; 0x2d6e <KP_4x4_check_press+0x124>
				}

			}
			DIO_write(i,KP_PORT,HIGH) ;
		}
return (KP_NOTPRESSED) ;
    2dd8:	8f ef       	ldi	r24, 0xFF	; 255
    2dda:	89 8b       	std	Y+17, r24	; 0x11
    2ddc:	89 89       	ldd	r24, Y+17	; 0x11
}
    2dde:	61 96       	adiw	r28, 0x11	; 17
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	f8 94       	cli
    2de4:	de bf       	out	0x3e, r29	; 62
    2de6:	0f be       	out	0x3f, r0	; 63
    2de8:	cd bf       	out	0x3d, r28	; 61
    2dea:	cf 91       	pop	r28
    2dec:	df 91       	pop	r29
    2dee:	08 95       	ret

00002df0 <BUTTON_init>:
 *  Author: mohamed
 */ 
#include "button.h"

void BUTTON_init(uint8_t ButtonPin , uint8_t ButtonPort)
{
    2df0:	df 93       	push	r29
    2df2:	cf 93       	push	r28
    2df4:	00 d0       	rcall	.+0      	; 0x2df6 <BUTTON_init+0x6>
    2df6:	cd b7       	in	r28, 0x3d	; 61
    2df8:	de b7       	in	r29, 0x3e	; 62
    2dfa:	89 83       	std	Y+1, r24	; 0x01
    2dfc:	6a 83       	std	Y+2, r22	; 0x02
	DIO_init(ButtonPin,ButtonPort,IN) ; // button is input device
    2dfe:	89 81       	ldd	r24, Y+1	; 0x01
    2e00:	6a 81       	ldd	r22, Y+2	; 0x02
    2e02:	40 e0       	ldi	r20, 0x00	; 0
    2e04:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <DIO_init>
}
    2e08:	0f 90       	pop	r0
    2e0a:	0f 90       	pop	r0
    2e0c:	cf 91       	pop	r28
    2e0e:	df 91       	pop	r29
    2e10:	08 95       	ret

00002e12 <BUTTON_read>:
void BUTTON_read(uint8_t ButtonPin , uint8_t ButtonPort,uint8_t*retrnstate)
{
    2e12:	df 93       	push	r29
    2e14:	cf 93       	push	r28
    2e16:	00 d0       	rcall	.+0      	; 0x2e18 <BUTTON_read+0x6>
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <BUTTON_read+0x8>
    2e1a:	cd b7       	in	r28, 0x3d	; 61
    2e1c:	de b7       	in	r29, 0x3e	; 62
    2e1e:	89 83       	std	Y+1, r24	; 0x01
    2e20:	6a 83       	std	Y+2, r22	; 0x02
    2e22:	5c 83       	std	Y+4, r21	; 0x04
    2e24:	4b 83       	std	Y+3, r20	; 0x03
	DIO_read(ButtonPin,ButtonPort,retrnstate) ;
    2e26:	2b 81       	ldd	r18, Y+3	; 0x03
    2e28:	3c 81       	ldd	r19, Y+4	; 0x04
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	6a 81       	ldd	r22, Y+2	; 0x02
    2e2e:	a9 01       	movw	r20, r18
    2e30:	0e 94 92 0c 	call	0x1924	; 0x1924 <DIO_read>
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	0f 90       	pop	r0
    2e3a:	0f 90       	pop	r0
    2e3c:	cf 91       	pop	r28
    2e3e:	df 91       	pop	r29
    2e40:	08 95       	ret

00002e42 <APP_init>:

// control flag
volatile uint8_t C_flag = 0 ;

void APP_init ()
{	KP_4x4_init() ; // initialization of keypad
    2e42:	df 93       	push	r29
    2e44:	cf 93       	push	r28
    2e46:	cd b7       	in	r28, 0x3d	; 61
    2e48:	de b7       	in	r29, 0x3e	; 62
    2e4a:	0e 94 f6 15 	call	0x2bec	; 0x2bec <KP_4x4_init>
	LCD_4bit_init() ; // lcd initialization
    2e4e:	0e 94 3d 0e 	call	0x1c7a	; 0x1c7a <LCD_4bit_init>
	LED_init(PORT_D,PIN_7) ; // led initialization
    2e52:	84 e4       	ldi	r24, 0x44	; 68
    2e54:	67 e0       	ldi	r22, 0x07	; 7
    2e56:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LED_init>
	BUTTON_init(PORT_D,PIN_2) ; // button initialization
    2e5a:	84 e4       	ldi	r24, 0x44	; 68
    2e5c:	90 e0       	ldi	r25, 0x00	; 0
    2e5e:	62 e0       	ldi	r22, 0x02	; 2
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <BUTTON_init>
	EXTINT_init() ; // interrupt initialization
    2e66:	0e 94 a9 07 	call	0xf52	; 0xf52 <EXTINT_init>
	SET_CALLBACK_INT0(locked_press) ;
    2e6a:	85 e6       	ldi	r24, 0x65	; 101
    2e6c:	9d e1       	ldi	r25, 0x1D	; 29
    2e6e:	0e 94 b4 08 	call	0x1168	; 0x1168 <SET_CALLBACK_INT0>
}
    2e72:	cf 91       	pop	r28
    2e74:	df 91       	pop	r29
    2e76:	08 95       	ret

00002e78 <APP_start>:


void APP_start () // control the modes if security key passed with flag
{
    2e78:	df 93       	push	r29
    2e7a:	cf 93       	push	r28
    2e7c:	cd b7       	in	r28, 0x3d	; 61
    2e7e:	de b7       	in	r29, 0x3e	; 62
    2e80:	2e 97       	sbiw	r28, 0x0e	; 14
    2e82:	0f b6       	in	r0, 0x3f	; 63
    2e84:	f8 94       	cli
    2e86:	de bf       	out	0x3e, r29	; 62
    2e88:	0f be       	out	0x3f, r0	; 63
    2e8a:	cd bf       	out	0x3d, r28	; 61
while (1) // C_flag starts with zero value
{
	if (C_flag==CALC_MODE) // if flag ==1 go to calculator mode
    2e8c:	80 91 0f 02 	lds	r24, 0x020F
    2e90:	81 30       	cpi	r24, 0x01	; 1
    2e92:	19 f4       	brne	.+6      	; 0x2e9a <APP_start+0x22>
	{
		calculator_mode() ;
    2e94:	0e 94 11 1a 	call	0x3422	; 0x3422 <calculator_mode>
    2e98:	f9 cf       	rjmp	.-14     	; 0x2e8c <APP_start+0x14>
    }

	else if (C_flag == LED_BLINK_MODE) //if flag ==2 go to LED BLINKING mode
    2e9a:	80 91 0f 02 	lds	r24, 0x020F
    2e9e:	82 30       	cpi	r24, 0x02	; 2
    2ea0:	09 f0       	breq	.+2      	; 0x2ea4 <APP_start+0x2c>
    2ea2:	83 c0       	rjmp	.+262    	; 0x2faa <APP_start+0x132>
	{	LCD_4bit_clear() ; // clear lcd
    2ea4:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
		LCD_4bit_sendstring("LED_Blinking :D"); // print on lcd
    2ea8:	84 e8       	ldi	r24, 0x84	; 132
    2eaa:	90 e0       	ldi	r25, 0x00	; 0
    2eac:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    2eb0:	76 c0       	rjmp	.+236    	; 0x2f9e <APP_start+0x126>
		while (C_flag==LED_BLINK_MODE)
	{
		LED_toggle(PORT_D,PIN_7) ;
    2eb2:	84 e4       	ldi	r24, 0x44	; 68
    2eb4:	67 e0       	ldi	r22, 0x07	; 7
    2eb6:	0e 94 2d 0e 	call	0x1c5a	; 0x1c5a <LED_toggle>
    2eba:	80 e0       	ldi	r24, 0x00	; 0
    2ebc:	90 e0       	ldi	r25, 0x00	; 0
    2ebe:	a6 e9       	ldi	r26, 0x96	; 150
    2ec0:	b3 e4       	ldi	r27, 0x43	; 67
    2ec2:	8b 87       	std	Y+11, r24	; 0x0b
    2ec4:	9c 87       	std	Y+12, r25	; 0x0c
    2ec6:	ad 87       	std	Y+13, r26	; 0x0d
    2ec8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eca:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ecc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ece:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ed0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a e7       	ldi	r20, 0x7A	; 122
    2ed8:	53 e4       	ldi	r21, 0x43	; 67
    2eda:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	8f 83       	std	Y+7, r24	; 0x07
    2ee4:	98 87       	std	Y+8, r25	; 0x08
    2ee6:	a9 87       	std	Y+9, r26	; 0x09
    2ee8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2eea:	6f 81       	ldd	r22, Y+7	; 0x07
    2eec:	78 85       	ldd	r23, Y+8	; 0x08
    2eee:	89 85       	ldd	r24, Y+9	; 0x09
    2ef0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ef2:	20 e0       	ldi	r18, 0x00	; 0
    2ef4:	30 e0       	ldi	r19, 0x00	; 0
    2ef6:	40 e8       	ldi	r20, 0x80	; 128
    2ef8:	5f e3       	ldi	r21, 0x3F	; 63
    2efa:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    2efe:	88 23       	and	r24, r24
    2f00:	2c f4       	brge	.+10     	; 0x2f0c <APP_start+0x94>
		__ticks = 1;
    2f02:	81 e0       	ldi	r24, 0x01	; 1
    2f04:	90 e0       	ldi	r25, 0x00	; 0
    2f06:	9e 83       	std	Y+6, r25	; 0x06
    2f08:	8d 83       	std	Y+5, r24	; 0x05
    2f0a:	3f c0       	rjmp	.+126    	; 0x2f8a <APP_start+0x112>
	else if (__tmp > 65535)
    2f0c:	6f 81       	ldd	r22, Y+7	; 0x07
    2f0e:	78 85       	ldd	r23, Y+8	; 0x08
    2f10:	89 85       	ldd	r24, Y+9	; 0x09
    2f12:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f14:	20 e0       	ldi	r18, 0x00	; 0
    2f16:	3f ef       	ldi	r19, 0xFF	; 255
    2f18:	4f e7       	ldi	r20, 0x7F	; 127
    2f1a:	57 e4       	ldi	r21, 0x47	; 71
    2f1c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    2f20:	18 16       	cp	r1, r24
    2f22:	4c f5       	brge	.+82     	; 0x2f76 <APP_start+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f2c:	20 e0       	ldi	r18, 0x00	; 0
    2f2e:	30 e0       	ldi	r19, 0x00	; 0
    2f30:	40 e2       	ldi	r20, 0x20	; 32
    2f32:	51 e4       	ldi	r21, 0x41	; 65
    2f34:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2f38:	dc 01       	movw	r26, r24
    2f3a:	cb 01       	movw	r24, r22
    2f3c:	bc 01       	movw	r22, r24
    2f3e:	cd 01       	movw	r24, r26
    2f40:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f44:	dc 01       	movw	r26, r24
    2f46:	cb 01       	movw	r24, r22
    2f48:	9e 83       	std	Y+6, r25	; 0x06
    2f4a:	8d 83       	std	Y+5, r24	; 0x05
    2f4c:	0f c0       	rjmp	.+30     	; 0x2f6c <APP_start+0xf4>
    2f4e:	89 e1       	ldi	r24, 0x19	; 25
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	9c 83       	std	Y+4, r25	; 0x04
    2f54:	8b 83       	std	Y+3, r24	; 0x03
    2f56:	8b 81       	ldd	r24, Y+3	; 0x03
    2f58:	9c 81       	ldd	r25, Y+4	; 0x04
    2f5a:	01 97       	sbiw	r24, 0x01	; 1
    2f5c:	f1 f7       	brne	.-4      	; 0x2f5a <APP_start+0xe2>
    2f5e:	9c 83       	std	Y+4, r25	; 0x04
    2f60:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f62:	8d 81       	ldd	r24, Y+5	; 0x05
    2f64:	9e 81       	ldd	r25, Y+6	; 0x06
    2f66:	01 97       	sbiw	r24, 0x01	; 1
    2f68:	9e 83       	std	Y+6, r25	; 0x06
    2f6a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f6e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f70:	00 97       	sbiw	r24, 0x00	; 0
    2f72:	69 f7       	brne	.-38     	; 0x2f4e <APP_start+0xd6>
    2f74:	14 c0       	rjmp	.+40     	; 0x2f9e <APP_start+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f76:	6f 81       	ldd	r22, Y+7	; 0x07
    2f78:	78 85       	ldd	r23, Y+8	; 0x08
    2f7a:	89 85       	ldd	r24, Y+9	; 0x09
    2f7c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f7e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2f82:	dc 01       	movw	r26, r24
    2f84:	cb 01       	movw	r24, r22
    2f86:	9e 83       	std	Y+6, r25	; 0x06
    2f88:	8d 83       	std	Y+5, r24	; 0x05
    2f8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2f8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2f8e:	9a 83       	std	Y+2, r25	; 0x02
    2f90:	89 83       	std	Y+1, r24	; 0x01
    2f92:	89 81       	ldd	r24, Y+1	; 0x01
    2f94:	9a 81       	ldd	r25, Y+2	; 0x02
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	f1 f7       	brne	.-4      	; 0x2f96 <APP_start+0x11e>
    2f9a:	9a 83       	std	Y+2, r25	; 0x02
    2f9c:	89 83       	std	Y+1, r24	; 0x01
    }

	else if (C_flag == LED_BLINK_MODE) //if flag ==2 go to LED BLINKING mode
	{	LCD_4bit_clear() ; // clear lcd
		LCD_4bit_sendstring("LED_Blinking :D"); // print on lcd
		while (C_flag==LED_BLINK_MODE)
    2f9e:	80 91 0f 02 	lds	r24, 0x020F
    2fa2:	82 30       	cpi	r24, 0x02	; 2
    2fa4:	09 f4       	brne	.+2      	; 0x2fa8 <APP_start+0x130>
    2fa6:	85 cf       	rjmp	.-246    	; 0x2eb2 <APP_start+0x3a>
    2fa8:	71 cf       	rjmp	.-286    	; 0x2e8c <APP_start+0x14>
		_delay_ms(300) ;
	}
	}
	else
	{
		check_pass() ; // check key passed
    2faa:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <check_pass>
    2fae:	6e cf       	rjmp	.-292    	; 0x2e8c <APP_start+0x14>

00002fb0 <check_pass>:




void check_pass()
{while (!passed)
    2fb0:	0f 93       	push	r16
    2fb2:	1f 93       	push	r17
    2fb4:	df 93       	push	r29
    2fb6:	cf 93       	push	r28
    2fb8:	cd b7       	in	r28, 0x3d	; 61
    2fba:	de b7       	in	r29, 0x3e	; 62
    2fbc:	e9 97       	sbiw	r28, 0x39	; 57
    2fbe:	0f b6       	in	r0, 0x3f	; 63
    2fc0:	f8 94       	cli
    2fc2:	de bf       	out	0x3e, r29	; 62
    2fc4:	0f be       	out	0x3f, r0	; 63
    2fc6:	cd bf       	out	0x3d, r28	; 61
    2fc8:	1c c2       	rjmp	.+1080   	; 0x3402 <check_pass+0x452>
  {
		LCD_4bit_clear() ;
    2fca:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
		uint8_t i=0 ;
    2fce:	19 ae       	std	Y+57, r1	; 0x39
		LCD_4bit_sendstring(" Enter PIN: ") ;
    2fd0:	84 e9       	ldi	r24, 0x94	; 148
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    2fd8:	ff c0       	rjmp	.+510    	; 0x31d8 <check_pass+0x228>
		while (i<4)
		{ 	while (text==KP_NOTPRESSED)
		{
			text = KP_4x4_check_press() ;
    2fda:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <KP_4x4_check_press>
    2fde:	80 93 f4 01 	sts	0x01F4, r24
  {
		LCD_4bit_clear() ;
		uint8_t i=0 ;
		LCD_4bit_sendstring(" Enter PIN: ") ;
		while (i<4)
		{ 	while (text==KP_NOTPRESSED)
    2fe2:	80 91 f4 01 	lds	r24, 0x01F4
    2fe6:	8f 3f       	cpi	r24, 0xFF	; 255
    2fe8:	c1 f3       	breq	.-16     	; 0x2fda <check_pass+0x2a>
    2fea:	80 e0       	ldi	r24, 0x00	; 0
    2fec:	90 e0       	ldi	r25, 0x00	; 0
    2fee:	a0 e2       	ldi	r26, 0x20	; 32
    2ff0:	b3 e4       	ldi	r27, 0x43	; 67
    2ff2:	8d ab       	std	Y+53, r24	; 0x35
    2ff4:	9e ab       	std	Y+54, r25	; 0x36
    2ff6:	af ab       	std	Y+55, r26	; 0x37
    2ff8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ffa:	6d a9       	ldd	r22, Y+53	; 0x35
    2ffc:	7e a9       	ldd	r23, Y+54	; 0x36
    2ffe:	8f a9       	ldd	r24, Y+55	; 0x37
    3000:	98 ad       	ldd	r25, Y+56	; 0x38
    3002:	20 e0       	ldi	r18, 0x00	; 0
    3004:	30 e0       	ldi	r19, 0x00	; 0
    3006:	4a e7       	ldi	r20, 0x7A	; 122
    3008:	53 e4       	ldi	r21, 0x43	; 67
    300a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    300e:	dc 01       	movw	r26, r24
    3010:	cb 01       	movw	r24, r22
    3012:	89 ab       	std	Y+49, r24	; 0x31
    3014:	9a ab       	std	Y+50, r25	; 0x32
    3016:	ab ab       	std	Y+51, r26	; 0x33
    3018:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    301a:	69 a9       	ldd	r22, Y+49	; 0x31
    301c:	7a a9       	ldd	r23, Y+50	; 0x32
    301e:	8b a9       	ldd	r24, Y+51	; 0x33
    3020:	9c a9       	ldd	r25, Y+52	; 0x34
    3022:	20 e0       	ldi	r18, 0x00	; 0
    3024:	30 e0       	ldi	r19, 0x00	; 0
    3026:	40 e8       	ldi	r20, 0x80	; 128
    3028:	5f e3       	ldi	r21, 0x3F	; 63
    302a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    302e:	88 23       	and	r24, r24
    3030:	2c f4       	brge	.+10     	; 0x303c <check_pass+0x8c>
		__ticks = 1;
    3032:	81 e0       	ldi	r24, 0x01	; 1
    3034:	90 e0       	ldi	r25, 0x00	; 0
    3036:	98 ab       	std	Y+48, r25	; 0x30
    3038:	8f a7       	std	Y+47, r24	; 0x2f
    303a:	3f c0       	rjmp	.+126    	; 0x30ba <check_pass+0x10a>
	else if (__tmp > 65535)
    303c:	69 a9       	ldd	r22, Y+49	; 0x31
    303e:	7a a9       	ldd	r23, Y+50	; 0x32
    3040:	8b a9       	ldd	r24, Y+51	; 0x33
    3042:	9c a9       	ldd	r25, Y+52	; 0x34
    3044:	20 e0       	ldi	r18, 0x00	; 0
    3046:	3f ef       	ldi	r19, 0xFF	; 255
    3048:	4f e7       	ldi	r20, 0x7F	; 127
    304a:	57 e4       	ldi	r21, 0x47	; 71
    304c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3050:	18 16       	cp	r1, r24
    3052:	4c f5       	brge	.+82     	; 0x30a6 <check_pass+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3054:	6d a9       	ldd	r22, Y+53	; 0x35
    3056:	7e a9       	ldd	r23, Y+54	; 0x36
    3058:	8f a9       	ldd	r24, Y+55	; 0x37
    305a:	98 ad       	ldd	r25, Y+56	; 0x38
    305c:	20 e0       	ldi	r18, 0x00	; 0
    305e:	30 e0       	ldi	r19, 0x00	; 0
    3060:	40 e2       	ldi	r20, 0x20	; 32
    3062:	51 e4       	ldi	r21, 0x41	; 65
    3064:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3068:	dc 01       	movw	r26, r24
    306a:	cb 01       	movw	r24, r22
    306c:	bc 01       	movw	r22, r24
    306e:	cd 01       	movw	r24, r26
    3070:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3074:	dc 01       	movw	r26, r24
    3076:	cb 01       	movw	r24, r22
    3078:	98 ab       	std	Y+48, r25	; 0x30
    307a:	8f a7       	std	Y+47, r24	; 0x2f
    307c:	0f c0       	rjmp	.+30     	; 0x309c <check_pass+0xec>
    307e:	89 e1       	ldi	r24, 0x19	; 25
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	9e a7       	std	Y+46, r25	; 0x2e
    3084:	8d a7       	std	Y+45, r24	; 0x2d
    3086:	8d a5       	ldd	r24, Y+45	; 0x2d
    3088:	9e a5       	ldd	r25, Y+46	; 0x2e
    308a:	01 97       	sbiw	r24, 0x01	; 1
    308c:	f1 f7       	brne	.-4      	; 0x308a <check_pass+0xda>
    308e:	9e a7       	std	Y+46, r25	; 0x2e
    3090:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3092:	8f a5       	ldd	r24, Y+47	; 0x2f
    3094:	98 a9       	ldd	r25, Y+48	; 0x30
    3096:	01 97       	sbiw	r24, 0x01	; 1
    3098:	98 ab       	std	Y+48, r25	; 0x30
    309a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    309c:	8f a5       	ldd	r24, Y+47	; 0x2f
    309e:	98 a9       	ldd	r25, Y+48	; 0x30
    30a0:	00 97       	sbiw	r24, 0x00	; 0
    30a2:	69 f7       	brne	.-38     	; 0x307e <check_pass+0xce>
    30a4:	14 c0       	rjmp	.+40     	; 0x30ce <check_pass+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30a6:	69 a9       	ldd	r22, Y+49	; 0x31
    30a8:	7a a9       	ldd	r23, Y+50	; 0x32
    30aa:	8b a9       	ldd	r24, Y+51	; 0x33
    30ac:	9c a9       	ldd	r25, Y+52	; 0x34
    30ae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    30b2:	dc 01       	movw	r26, r24
    30b4:	cb 01       	movw	r24, r22
    30b6:	98 ab       	std	Y+48, r25	; 0x30
    30b8:	8f a7       	std	Y+47, r24	; 0x2f
    30ba:	8f a5       	ldd	r24, Y+47	; 0x2f
    30bc:	98 a9       	ldd	r25, Y+48	; 0x30
    30be:	9c a7       	std	Y+44, r25	; 0x2c
    30c0:	8b a7       	std	Y+43, r24	; 0x2b
    30c2:	8b a5       	ldd	r24, Y+43	; 0x2b
    30c4:	9c a5       	ldd	r25, Y+44	; 0x2c
    30c6:	01 97       	sbiw	r24, 0x01	; 1
    30c8:	f1 f7       	brne	.-4      	; 0x30c6 <check_pass+0x116>
    30ca:	9c a7       	std	Y+44, r25	; 0x2c
    30cc:	8b a7       	std	Y+43, r24	; 0x2b
		{
			text = KP_4x4_check_press() ;
		}
			_delay_ms(160) ;
			LCD_4bit_sendchar(text) ;
    30ce:	80 91 f4 01 	lds	r24, 0x01F4
    30d2:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_4bit_sendchar>
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	90 e0       	ldi	r25, 0x00	; 0
    30da:	a0 e2       	ldi	r26, 0x20	; 32
    30dc:	b3 e4       	ldi	r27, 0x43	; 67
    30de:	8f a3       	std	Y+39, r24	; 0x27
    30e0:	98 a7       	std	Y+40, r25	; 0x28
    30e2:	a9 a7       	std	Y+41, r26	; 0x29
    30e4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30e6:	6f a1       	ldd	r22, Y+39	; 0x27
    30e8:	78 a5       	ldd	r23, Y+40	; 0x28
    30ea:	89 a5       	ldd	r24, Y+41	; 0x29
    30ec:	9a a5       	ldd	r25, Y+42	; 0x2a
    30ee:	20 e0       	ldi	r18, 0x00	; 0
    30f0:	30 e0       	ldi	r19, 0x00	; 0
    30f2:	4a e7       	ldi	r20, 0x7A	; 122
    30f4:	53 e4       	ldi	r21, 0x43	; 67
    30f6:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    30fa:	dc 01       	movw	r26, r24
    30fc:	cb 01       	movw	r24, r22
    30fe:	8b a3       	std	Y+35, r24	; 0x23
    3100:	9c a3       	std	Y+36, r25	; 0x24
    3102:	ad a3       	std	Y+37, r26	; 0x25
    3104:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3106:	6b a1       	ldd	r22, Y+35	; 0x23
    3108:	7c a1       	ldd	r23, Y+36	; 0x24
    310a:	8d a1       	ldd	r24, Y+37	; 0x25
    310c:	9e a1       	ldd	r25, Y+38	; 0x26
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	30 e0       	ldi	r19, 0x00	; 0
    3112:	40 e8       	ldi	r20, 0x80	; 128
    3114:	5f e3       	ldi	r21, 0x3F	; 63
    3116:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    311a:	88 23       	and	r24, r24
    311c:	2c f4       	brge	.+10     	; 0x3128 <check_pass+0x178>
		__ticks = 1;
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	90 e0       	ldi	r25, 0x00	; 0
    3122:	9a a3       	std	Y+34, r25	; 0x22
    3124:	89 a3       	std	Y+33, r24	; 0x21
    3126:	3f c0       	rjmp	.+126    	; 0x31a6 <check_pass+0x1f6>
	else if (__tmp > 65535)
    3128:	6b a1       	ldd	r22, Y+35	; 0x23
    312a:	7c a1       	ldd	r23, Y+36	; 0x24
    312c:	8d a1       	ldd	r24, Y+37	; 0x25
    312e:	9e a1       	ldd	r25, Y+38	; 0x26
    3130:	20 e0       	ldi	r18, 0x00	; 0
    3132:	3f ef       	ldi	r19, 0xFF	; 255
    3134:	4f e7       	ldi	r20, 0x7F	; 127
    3136:	57 e4       	ldi	r21, 0x47	; 71
    3138:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    313c:	18 16       	cp	r1, r24
    313e:	4c f5       	brge	.+82     	; 0x3192 <check_pass+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3140:	6f a1       	ldd	r22, Y+39	; 0x27
    3142:	78 a5       	ldd	r23, Y+40	; 0x28
    3144:	89 a5       	ldd	r24, Y+41	; 0x29
    3146:	9a a5       	ldd	r25, Y+42	; 0x2a
    3148:	20 e0       	ldi	r18, 0x00	; 0
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	40 e2       	ldi	r20, 0x20	; 32
    314e:	51 e4       	ldi	r21, 0x41	; 65
    3150:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3154:	dc 01       	movw	r26, r24
    3156:	cb 01       	movw	r24, r22
    3158:	bc 01       	movw	r22, r24
    315a:	cd 01       	movw	r24, r26
    315c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3160:	dc 01       	movw	r26, r24
    3162:	cb 01       	movw	r24, r22
    3164:	9a a3       	std	Y+34, r25	; 0x22
    3166:	89 a3       	std	Y+33, r24	; 0x21
    3168:	0f c0       	rjmp	.+30     	; 0x3188 <check_pass+0x1d8>
    316a:	89 e1       	ldi	r24, 0x19	; 25
    316c:	90 e0       	ldi	r25, 0x00	; 0
    316e:	98 a3       	std	Y+32, r25	; 0x20
    3170:	8f 8f       	std	Y+31, r24	; 0x1f
    3172:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3174:	98 a1       	ldd	r25, Y+32	; 0x20
    3176:	01 97       	sbiw	r24, 0x01	; 1
    3178:	f1 f7       	brne	.-4      	; 0x3176 <check_pass+0x1c6>
    317a:	98 a3       	std	Y+32, r25	; 0x20
    317c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    317e:	89 a1       	ldd	r24, Y+33	; 0x21
    3180:	9a a1       	ldd	r25, Y+34	; 0x22
    3182:	01 97       	sbiw	r24, 0x01	; 1
    3184:	9a a3       	std	Y+34, r25	; 0x22
    3186:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3188:	89 a1       	ldd	r24, Y+33	; 0x21
    318a:	9a a1       	ldd	r25, Y+34	; 0x22
    318c:	00 97       	sbiw	r24, 0x00	; 0
    318e:	69 f7       	brne	.-38     	; 0x316a <check_pass+0x1ba>
    3190:	14 c0       	rjmp	.+40     	; 0x31ba <check_pass+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3192:	6b a1       	ldd	r22, Y+35	; 0x23
    3194:	7c a1       	ldd	r23, Y+36	; 0x24
    3196:	8d a1       	ldd	r24, Y+37	; 0x25
    3198:	9e a1       	ldd	r25, Y+38	; 0x26
    319a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    319e:	dc 01       	movw	r26, r24
    31a0:	cb 01       	movw	r24, r22
    31a2:	9a a3       	std	Y+34, r25	; 0x22
    31a4:	89 a3       	std	Y+33, r24	; 0x21
    31a6:	89 a1       	ldd	r24, Y+33	; 0x21
    31a8:	9a a1       	ldd	r25, Y+34	; 0x22
    31aa:	9e 8f       	std	Y+30, r25	; 0x1e
    31ac:	8d 8f       	std	Y+29, r24	; 0x1d
    31ae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31b0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31b2:	01 97       	sbiw	r24, 0x01	; 1
    31b4:	f1 f7       	brne	.-4      	; 0x31b2 <check_pass+0x202>
    31b6:	9e 8f       	std	Y+30, r25	; 0x1e
    31b8:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(160) ;
			Try[i]=text ;
    31ba:	89 ad       	ldd	r24, Y+57	; 0x39
    31bc:	88 2f       	mov	r24, r24
    31be:	90 e0       	ldi	r25, 0x00	; 0
    31c0:	20 91 f4 01 	lds	r18, 0x01F4
    31c4:	fc 01       	movw	r30, r24
    31c6:	e0 5f       	subi	r30, 0xF0	; 240
    31c8:	fd 4f       	sbci	r31, 0xFD	; 253
    31ca:	20 83       	st	Z, r18
			i++ ;
    31cc:	89 ad       	ldd	r24, Y+57	; 0x39
    31ce:	8f 5f       	subi	r24, 0xFF	; 255
    31d0:	89 af       	std	Y+57, r24	; 0x39
			text=KP_NOTPRESSED ;
    31d2:	8f ef       	ldi	r24, 0xFF	; 255
    31d4:	80 93 f4 01 	sts	0x01F4, r24
{while (!passed)
  {
		LCD_4bit_clear() ;
		uint8_t i=0 ;
		LCD_4bit_sendstring(" Enter PIN: ") ;
		while (i<4)
    31d8:	89 ad       	ldd	r24, Y+57	; 0x39
    31da:	84 30       	cpi	r24, 0x04	; 4
    31dc:	08 f4       	brcc	.+2      	; 0x31e0 <check_pass+0x230>
    31de:	01 cf       	rjmp	.-510    	; 0x2fe2 <check_pass+0x32>
			_delay_ms(160) ;
			Try[i]=text ;
			i++ ;
			text=KP_NOTPRESSED ;
		}
		if ((atoi(Try))==(atoi(Security_Key)))
    31e0:	80 e1       	ldi	r24, 0x10	; 16
    31e2:	92 e0       	ldi	r25, 0x02	; 2
    31e4:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <atoi>
    31e8:	8c 01       	movw	r16, r24
    31ea:	85 ef       	ldi	r24, 0xF5	; 245
    31ec:	91 e0       	ldi	r25, 0x01	; 1
    31ee:	0e 94 5b 1e 	call	0x3cb6	; 0x3cb6 <atoi>
    31f2:	08 17       	cp	r16, r24
    31f4:	19 07       	cpc	r17, r25
    31f6:	09 f0       	breq	.+2      	; 0x31fa <check_pass+0x24a>
    31f8:	8c c0       	rjmp	.+280    	; 0x3312 <check_pass+0x362>
		{ 	LCD_4bit_clear() ;
    31fa:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
			LCD_4bit_sendstring("Passed") ;
    31fe:	81 ea       	ldi	r24, 0xA1	; 161
    3200:	90 e0       	ldi	r25, 0x00	; 0
    3202:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    3206:	80 e0       	ldi	r24, 0x00	; 0
    3208:	90 e0       	ldi	r25, 0x00	; 0
    320a:	aa ef       	ldi	r26, 0xFA	; 250
    320c:	b3 e4       	ldi	r27, 0x43	; 67
    320e:	89 8f       	std	Y+25, r24	; 0x19
    3210:	9a 8f       	std	Y+26, r25	; 0x1a
    3212:	ab 8f       	std	Y+27, r26	; 0x1b
    3214:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3216:	69 8d       	ldd	r22, Y+25	; 0x19
    3218:	7a 8d       	ldd	r23, Y+26	; 0x1a
    321a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    321c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	4a e7       	ldi	r20, 0x7A	; 122
    3224:	53 e4       	ldi	r21, 0x43	; 67
    3226:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    322a:	dc 01       	movw	r26, r24
    322c:	cb 01       	movw	r24, r22
    322e:	8d 8b       	std	Y+21, r24	; 0x15
    3230:	9e 8b       	std	Y+22, r25	; 0x16
    3232:	af 8b       	std	Y+23, r26	; 0x17
    3234:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3236:	6d 89       	ldd	r22, Y+21	; 0x15
    3238:	7e 89       	ldd	r23, Y+22	; 0x16
    323a:	8f 89       	ldd	r24, Y+23	; 0x17
    323c:	98 8d       	ldd	r25, Y+24	; 0x18
    323e:	20 e0       	ldi	r18, 0x00	; 0
    3240:	30 e0       	ldi	r19, 0x00	; 0
    3242:	40 e8       	ldi	r20, 0x80	; 128
    3244:	5f e3       	ldi	r21, 0x3F	; 63
    3246:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    324a:	88 23       	and	r24, r24
    324c:	2c f4       	brge	.+10     	; 0x3258 <check_pass+0x2a8>
		__ticks = 1;
    324e:	81 e0       	ldi	r24, 0x01	; 1
    3250:	90 e0       	ldi	r25, 0x00	; 0
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	3f c0       	rjmp	.+126    	; 0x32d6 <check_pass+0x326>
	else if (__tmp > 65535)
    3258:	6d 89       	ldd	r22, Y+21	; 0x15
    325a:	7e 89       	ldd	r23, Y+22	; 0x16
    325c:	8f 89       	ldd	r24, Y+23	; 0x17
    325e:	98 8d       	ldd	r25, Y+24	; 0x18
    3260:	20 e0       	ldi	r18, 0x00	; 0
    3262:	3f ef       	ldi	r19, 0xFF	; 255
    3264:	4f e7       	ldi	r20, 0x7F	; 127
    3266:	57 e4       	ldi	r21, 0x47	; 71
    3268:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    326c:	18 16       	cp	r1, r24
    326e:	4c f5       	brge	.+82     	; 0x32c2 <check_pass+0x312>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3270:	69 8d       	ldd	r22, Y+25	; 0x19
    3272:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3274:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3276:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3278:	20 e0       	ldi	r18, 0x00	; 0
    327a:	30 e0       	ldi	r19, 0x00	; 0
    327c:	40 e2       	ldi	r20, 0x20	; 32
    327e:	51 e4       	ldi	r21, 0x41	; 65
    3280:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3284:	dc 01       	movw	r26, r24
    3286:	cb 01       	movw	r24, r22
    3288:	bc 01       	movw	r22, r24
    328a:	cd 01       	movw	r24, r26
    328c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3290:	dc 01       	movw	r26, r24
    3292:	cb 01       	movw	r24, r22
    3294:	9c 8b       	std	Y+20, r25	; 0x14
    3296:	8b 8b       	std	Y+19, r24	; 0x13
    3298:	0f c0       	rjmp	.+30     	; 0x32b8 <check_pass+0x308>
    329a:	89 e1       	ldi	r24, 0x19	; 25
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	9a 8b       	std	Y+18, r25	; 0x12
    32a0:	89 8b       	std	Y+17, r24	; 0x11
    32a2:	89 89       	ldd	r24, Y+17	; 0x11
    32a4:	9a 89       	ldd	r25, Y+18	; 0x12
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <check_pass+0x2f6>
    32aa:	9a 8b       	std	Y+18, r25	; 0x12
    32ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    32ae:	8b 89       	ldd	r24, Y+19	; 0x13
    32b0:	9c 89       	ldd	r25, Y+20	; 0x14
    32b2:	01 97       	sbiw	r24, 0x01	; 1
    32b4:	9c 8b       	std	Y+20, r25	; 0x14
    32b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    32b8:	8b 89       	ldd	r24, Y+19	; 0x13
    32ba:	9c 89       	ldd	r25, Y+20	; 0x14
    32bc:	00 97       	sbiw	r24, 0x00	; 0
    32be:	69 f7       	brne	.-38     	; 0x329a <check_pass+0x2ea>
    32c0:	14 c0       	rjmp	.+40     	; 0x32ea <check_pass+0x33a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    32c2:	6d 89       	ldd	r22, Y+21	; 0x15
    32c4:	7e 89       	ldd	r23, Y+22	; 0x16
    32c6:	8f 89       	ldd	r24, Y+23	; 0x17
    32c8:	98 8d       	ldd	r25, Y+24	; 0x18
    32ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    32ce:	dc 01       	movw	r26, r24
    32d0:	cb 01       	movw	r24, r22
    32d2:	9c 8b       	std	Y+20, r25	; 0x14
    32d4:	8b 8b       	std	Y+19, r24	; 0x13
    32d6:	8b 89       	ldd	r24, Y+19	; 0x13
    32d8:	9c 89       	ldd	r25, Y+20	; 0x14
    32da:	98 8b       	std	Y+16, r25	; 0x10
    32dc:	8f 87       	std	Y+15, r24	; 0x0f
    32de:	8f 85       	ldd	r24, Y+15	; 0x0f
    32e0:	98 89       	ldd	r25, Y+16	; 0x10
    32e2:	01 97       	sbiw	r24, 0x01	; 1
    32e4:	f1 f7       	brne	.-4      	; 0x32e2 <check_pass+0x332>
    32e6:	98 8b       	std	Y+16, r25	; 0x10
    32e8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500) ;
			LCD_4bit_clear() ;
    32ea:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
			LCD_4bit_sendstring_x_y(3,0,"Press Button");
    32ee:	28 ea       	ldi	r18, 0xA8	; 168
    32f0:	30 e0       	ldi	r19, 0x00	; 0
    32f2:	83 e0       	ldi	r24, 0x03	; 3
    32f4:	60 e0       	ldi	r22, 0x00	; 0
    32f6:	a9 01       	movw	r20, r18
    32f8:	0e 94 0f 14 	call	0x281e	; 0x281e <LCD_4bit_sendstring_x_y>
			LCD_4bit_sendstring_x_y(3,1,"to start");
    32fc:	25 eb       	ldi	r18, 0xB5	; 181
    32fe:	30 e0       	ldi	r19, 0x00	; 0
    3300:	83 e0       	ldi	r24, 0x03	; 3
    3302:	61 e0       	ldi	r22, 0x01	; 1
    3304:	a9 01       	movw	r20, r18
    3306:	0e 94 0f 14 	call	0x281e	; 0x281e <LCD_4bit_sendstring_x_y>

			passed = 1 ;
    330a:	81 e0       	ldi	r24, 0x01	; 1
    330c:	80 93 0e 02 	sts	0x020E, r24
    3310:	78 c0       	rjmp	.+240    	; 0x3402 <check_pass+0x452>
		}
		else
		{ LCD_4bit_clear() ;
    3312:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
			LCD_4bit_sendstring("TRY Again !!") ;
    3316:	8e eb       	ldi	r24, 0xBE	; 190
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    331e:	80 e0       	ldi	r24, 0x00	; 0
    3320:	90 e0       	ldi	r25, 0x00	; 0
    3322:	aa ef       	ldi	r26, 0xFA	; 250
    3324:	b3 e4       	ldi	r27, 0x43	; 67
    3326:	8b 87       	std	Y+11, r24	; 0x0b
    3328:	9c 87       	std	Y+12, r25	; 0x0c
    332a:	ad 87       	std	Y+13, r26	; 0x0d
    332c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    332e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3330:	7c 85       	ldd	r23, Y+12	; 0x0c
    3332:	8d 85       	ldd	r24, Y+13	; 0x0d
    3334:	9e 85       	ldd	r25, Y+14	; 0x0e
    3336:	20 e0       	ldi	r18, 0x00	; 0
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	4a e7       	ldi	r20, 0x7A	; 122
    333c:	53 e4       	ldi	r21, 0x43	; 67
    333e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3342:	dc 01       	movw	r26, r24
    3344:	cb 01       	movw	r24, r22
    3346:	8f 83       	std	Y+7, r24	; 0x07
    3348:	98 87       	std	Y+8, r25	; 0x08
    334a:	a9 87       	std	Y+9, r26	; 0x09
    334c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    334e:	6f 81       	ldd	r22, Y+7	; 0x07
    3350:	78 85       	ldd	r23, Y+8	; 0x08
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	9a 85       	ldd	r25, Y+10	; 0x0a
    3356:	20 e0       	ldi	r18, 0x00	; 0
    3358:	30 e0       	ldi	r19, 0x00	; 0
    335a:	40 e8       	ldi	r20, 0x80	; 128
    335c:	5f e3       	ldi	r21, 0x3F	; 63
    335e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3362:	88 23       	and	r24, r24
    3364:	2c f4       	brge	.+10     	; 0x3370 <check_pass+0x3c0>
		__ticks = 1;
    3366:	81 e0       	ldi	r24, 0x01	; 1
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	9e 83       	std	Y+6, r25	; 0x06
    336c:	8d 83       	std	Y+5, r24	; 0x05
    336e:	3f c0       	rjmp	.+126    	; 0x33ee <check_pass+0x43e>
	else if (__tmp > 65535)
    3370:	6f 81       	ldd	r22, Y+7	; 0x07
    3372:	78 85       	ldd	r23, Y+8	; 0x08
    3374:	89 85       	ldd	r24, Y+9	; 0x09
    3376:	9a 85       	ldd	r25, Y+10	; 0x0a
    3378:	20 e0       	ldi	r18, 0x00	; 0
    337a:	3f ef       	ldi	r19, 0xFF	; 255
    337c:	4f e7       	ldi	r20, 0x7F	; 127
    337e:	57 e4       	ldi	r21, 0x47	; 71
    3380:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3384:	18 16       	cp	r1, r24
    3386:	4c f5       	brge	.+82     	; 0x33da <check_pass+0x42a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3388:	6b 85       	ldd	r22, Y+11	; 0x0b
    338a:	7c 85       	ldd	r23, Y+12	; 0x0c
    338c:	8d 85       	ldd	r24, Y+13	; 0x0d
    338e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3390:	20 e0       	ldi	r18, 0x00	; 0
    3392:	30 e0       	ldi	r19, 0x00	; 0
    3394:	40 e2       	ldi	r20, 0x20	; 32
    3396:	51 e4       	ldi	r21, 0x41	; 65
    3398:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    339c:	dc 01       	movw	r26, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	bc 01       	movw	r22, r24
    33a2:	cd 01       	movw	r24, r26
    33a4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33a8:	dc 01       	movw	r26, r24
    33aa:	cb 01       	movw	r24, r22
    33ac:	9e 83       	std	Y+6, r25	; 0x06
    33ae:	8d 83       	std	Y+5, r24	; 0x05
    33b0:	0f c0       	rjmp	.+30     	; 0x33d0 <check_pass+0x420>
    33b2:	89 e1       	ldi	r24, 0x19	; 25
    33b4:	90 e0       	ldi	r25, 0x00	; 0
    33b6:	9c 83       	std	Y+4, r25	; 0x04
    33b8:	8b 83       	std	Y+3, r24	; 0x03
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	9c 81       	ldd	r25, Y+4	; 0x04
    33be:	01 97       	sbiw	r24, 0x01	; 1
    33c0:	f1 f7       	brne	.-4      	; 0x33be <check_pass+0x40e>
    33c2:	9c 83       	std	Y+4, r25	; 0x04
    33c4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33c6:	8d 81       	ldd	r24, Y+5	; 0x05
    33c8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ca:	01 97       	sbiw	r24, 0x01	; 1
    33cc:	9e 83       	std	Y+6, r25	; 0x06
    33ce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33d0:	8d 81       	ldd	r24, Y+5	; 0x05
    33d2:	9e 81       	ldd	r25, Y+6	; 0x06
    33d4:	00 97       	sbiw	r24, 0x00	; 0
    33d6:	69 f7       	brne	.-38     	; 0x33b2 <check_pass+0x402>
    33d8:	14 c0       	rjmp	.+40     	; 0x3402 <check_pass+0x452>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33da:	6f 81       	ldd	r22, Y+7	; 0x07
    33dc:	78 85       	ldd	r23, Y+8	; 0x08
    33de:	89 85       	ldd	r24, Y+9	; 0x09
    33e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    33e2:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	9e 83       	std	Y+6, r25	; 0x06
    33ec:	8d 83       	std	Y+5, r24	; 0x05
    33ee:	8d 81       	ldd	r24, Y+5	; 0x05
    33f0:	9e 81       	ldd	r25, Y+6	; 0x06
    33f2:	9a 83       	std	Y+2, r25	; 0x02
    33f4:	89 83       	std	Y+1, r24	; 0x01
    33f6:	89 81       	ldd	r24, Y+1	; 0x01
    33f8:	9a 81       	ldd	r25, Y+2	; 0x02
    33fa:	01 97       	sbiw	r24, 0x01	; 1
    33fc:	f1 f7       	brne	.-4      	; 0x33fa <check_pass+0x44a>
    33fe:	9a 83       	std	Y+2, r25	; 0x02
    3400:	89 83       	std	Y+1, r24	; 0x01




void check_pass()
{while (!passed)
    3402:	80 91 0e 02 	lds	r24, 0x020E
    3406:	88 23       	and	r24, r24
    3408:	09 f4       	brne	.+2      	; 0x340c <check_pass+0x45c>
    340a:	df cd       	rjmp	.-1090   	; 0x2fca <check_pass+0x1a>
		{ LCD_4bit_clear() ;
			LCD_4bit_sendstring("TRY Again !!") ;
			_delay_ms(500) ;
		}
	}
}
    340c:	e9 96       	adiw	r28, 0x39	; 57
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	1f 91       	pop	r17
    341e:	0f 91       	pop	r16
    3420:	08 95       	ret

00003422 <calculator_mode>:

void calculator_mode()
{ 	LCD_4bit_clear() ;
    3422:	0f 93       	push	r16
    3424:	1f 93       	push	r17
    3426:	df 93       	push	r29
    3428:	cf 93       	push	r28
    342a:	cd b7       	in	r28, 0x3d	; 61
    342c:	de b7       	in	r29, 0x3e	; 62
    342e:	ac 97       	sbiw	r28, 0x2c	; 44
    3430:	0f b6       	in	r0, 0x3f	; 63
    3432:	f8 94       	cli
    3434:	de bf       	out	0x3e, r29	; 62
    3436:	0f be       	out	0x3f, r0	; 63
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
    343e:	35 c3       	rjmp	.+1642   	; 0x3aaa <calculator_mode+0x688>
	while (C_flag ==1)
{ while (text==KP_NOTPRESSED && C_flag==1)
{
	text= KP_4x4_check_press() ;
    3440:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <KP_4x4_check_press>
    3444:	80 93 f4 01 	sts	0x01F4, r24
}

void calculator_mode()
{ 	LCD_4bit_clear() ;
	while (C_flag ==1)
{ while (text==KP_NOTPRESSED && C_flag==1)
    3448:	80 91 f4 01 	lds	r24, 0x01F4
    344c:	8f 3f       	cpi	r24, 0xFF	; 255
    344e:	21 f4       	brne	.+8      	; 0x3458 <calculator_mode+0x36>
    3450:	80 91 0f 02 	lds	r24, 0x020F
    3454:	81 30       	cpi	r24, 0x01	; 1
    3456:	a1 f3       	breq	.-24     	; 0x3440 <calculator_mode+0x1e>
    3458:	80 e0       	ldi	r24, 0x00	; 0
    345a:	90 e0       	ldi	r25, 0x00	; 0
    345c:	a0 e2       	ldi	r26, 0x20	; 32
    345e:	b3 e4       	ldi	r27, 0x43	; 67
    3460:	8f a3       	std	Y+39, r24	; 0x27
    3462:	98 a7       	std	Y+40, r25	; 0x28
    3464:	a9 a7       	std	Y+41, r26	; 0x29
    3466:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3468:	6f a1       	ldd	r22, Y+39	; 0x27
    346a:	78 a5       	ldd	r23, Y+40	; 0x28
    346c:	89 a5       	ldd	r24, Y+41	; 0x29
    346e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	4a e7       	ldi	r20, 0x7A	; 122
    3476:	53 e4       	ldi	r21, 0x43	; 67
    3478:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	8b a3       	std	Y+35, r24	; 0x23
    3482:	9c a3       	std	Y+36, r25	; 0x24
    3484:	ad a3       	std	Y+37, r26	; 0x25
    3486:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3488:	6b a1       	ldd	r22, Y+35	; 0x23
    348a:	7c a1       	ldd	r23, Y+36	; 0x24
    348c:	8d a1       	ldd	r24, Y+37	; 0x25
    348e:	9e a1       	ldd	r25, Y+38	; 0x26
    3490:	20 e0       	ldi	r18, 0x00	; 0
    3492:	30 e0       	ldi	r19, 0x00	; 0
    3494:	40 e8       	ldi	r20, 0x80	; 128
    3496:	5f e3       	ldi	r21, 0x3F	; 63
    3498:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    349c:	88 23       	and	r24, r24
    349e:	2c f4       	brge	.+10     	; 0x34aa <calculator_mode+0x88>
		__ticks = 1;
    34a0:	81 e0       	ldi	r24, 0x01	; 1
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	9a a3       	std	Y+34, r25	; 0x22
    34a6:	89 a3       	std	Y+33, r24	; 0x21
    34a8:	3f c0       	rjmp	.+126    	; 0x3528 <calculator_mode+0x106>
	else if (__tmp > 65535)
    34aa:	6b a1       	ldd	r22, Y+35	; 0x23
    34ac:	7c a1       	ldd	r23, Y+36	; 0x24
    34ae:	8d a1       	ldd	r24, Y+37	; 0x25
    34b0:	9e a1       	ldd	r25, Y+38	; 0x26
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	3f ef       	ldi	r19, 0xFF	; 255
    34b6:	4f e7       	ldi	r20, 0x7F	; 127
    34b8:	57 e4       	ldi	r21, 0x47	; 71
    34ba:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    34be:	18 16       	cp	r1, r24
    34c0:	4c f5       	brge	.+82     	; 0x3514 <calculator_mode+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c2:	6f a1       	ldd	r22, Y+39	; 0x27
    34c4:	78 a5       	ldd	r23, Y+40	; 0x28
    34c6:	89 a5       	ldd	r24, Y+41	; 0x29
    34c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    34ca:	20 e0       	ldi	r18, 0x00	; 0
    34cc:	30 e0       	ldi	r19, 0x00	; 0
    34ce:	40 e2       	ldi	r20, 0x20	; 32
    34d0:	51 e4       	ldi	r21, 0x41	; 65
    34d2:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    34d6:	dc 01       	movw	r26, r24
    34d8:	cb 01       	movw	r24, r22
    34da:	bc 01       	movw	r22, r24
    34dc:	cd 01       	movw	r24, r26
    34de:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    34e2:	dc 01       	movw	r26, r24
    34e4:	cb 01       	movw	r24, r22
    34e6:	9a a3       	std	Y+34, r25	; 0x22
    34e8:	89 a3       	std	Y+33, r24	; 0x21
    34ea:	0f c0       	rjmp	.+30     	; 0x350a <calculator_mode+0xe8>
    34ec:	89 e1       	ldi	r24, 0x19	; 25
    34ee:	90 e0       	ldi	r25, 0x00	; 0
    34f0:	98 a3       	std	Y+32, r25	; 0x20
    34f2:	8f 8f       	std	Y+31, r24	; 0x1f
    34f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    34f6:	98 a1       	ldd	r25, Y+32	; 0x20
    34f8:	01 97       	sbiw	r24, 0x01	; 1
    34fa:	f1 f7       	brne	.-4      	; 0x34f8 <calculator_mode+0xd6>
    34fc:	98 a3       	std	Y+32, r25	; 0x20
    34fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3500:	89 a1       	ldd	r24, Y+33	; 0x21
    3502:	9a a1       	ldd	r25, Y+34	; 0x22
    3504:	01 97       	sbiw	r24, 0x01	; 1
    3506:	9a a3       	std	Y+34, r25	; 0x22
    3508:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    350a:	89 a1       	ldd	r24, Y+33	; 0x21
    350c:	9a a1       	ldd	r25, Y+34	; 0x22
    350e:	00 97       	sbiw	r24, 0x00	; 0
    3510:	69 f7       	brne	.-38     	; 0x34ec <calculator_mode+0xca>
    3512:	14 c0       	rjmp	.+40     	; 0x353c <calculator_mode+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3514:	6b a1       	ldd	r22, Y+35	; 0x23
    3516:	7c a1       	ldd	r23, Y+36	; 0x24
    3518:	8d a1       	ldd	r24, Y+37	; 0x25
    351a:	9e a1       	ldd	r25, Y+38	; 0x26
    351c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	9a a3       	std	Y+34, r25	; 0x22
    3526:	89 a3       	std	Y+33, r24	; 0x21
    3528:	89 a1       	ldd	r24, Y+33	; 0x21
    352a:	9a a1       	ldd	r25, Y+34	; 0x22
    352c:	9e 8f       	std	Y+30, r25	; 0x1e
    352e:	8d 8f       	std	Y+29, r24	; 0x1d
    3530:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3532:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3534:	01 97       	sbiw	r24, 0x01	; 1
    3536:	f1 f7       	brne	.-4      	; 0x3534 <calculator_mode+0x112>
    3538:	9e 8f       	std	Y+30, r25	; 0x1e
    353a:	8d 8f       	std	Y+29, r24	; 0x1d
{
	text= KP_4x4_check_press() ;
}
			_delay_ms(160) ;
			LCD_4bit_sendchar(text) ;
    353c:	80 91 f4 01 	lds	r24, 0x01F4
    3540:	0e 94 22 13 	call	0x2644	; 0x2644 <LCD_4bit_sendchar>
    3544:	80 e0       	ldi	r24, 0x00	; 0
    3546:	90 e0       	ldi	r25, 0x00	; 0
    3548:	a0 e2       	ldi	r26, 0x20	; 32
    354a:	b3 e4       	ldi	r27, 0x43	; 67
    354c:	89 8f       	std	Y+25, r24	; 0x19
    354e:	9a 8f       	std	Y+26, r25	; 0x1a
    3550:	ab 8f       	std	Y+27, r26	; 0x1b
    3552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3554:	69 8d       	ldd	r22, Y+25	; 0x19
    3556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    355a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    355c:	20 e0       	ldi	r18, 0x00	; 0
    355e:	30 e0       	ldi	r19, 0x00	; 0
    3560:	4a e7       	ldi	r20, 0x7A	; 122
    3562:	53 e4       	ldi	r21, 0x43	; 67
    3564:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3568:	dc 01       	movw	r26, r24
    356a:	cb 01       	movw	r24, r22
    356c:	8d 8b       	std	Y+21, r24	; 0x15
    356e:	9e 8b       	std	Y+22, r25	; 0x16
    3570:	af 8b       	std	Y+23, r26	; 0x17
    3572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3574:	6d 89       	ldd	r22, Y+21	; 0x15
    3576:	7e 89       	ldd	r23, Y+22	; 0x16
    3578:	8f 89       	ldd	r24, Y+23	; 0x17
    357a:	98 8d       	ldd	r25, Y+24	; 0x18
    357c:	20 e0       	ldi	r18, 0x00	; 0
    357e:	30 e0       	ldi	r19, 0x00	; 0
    3580:	40 e8       	ldi	r20, 0x80	; 128
    3582:	5f e3       	ldi	r21, 0x3F	; 63
    3584:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3588:	88 23       	and	r24, r24
    358a:	2c f4       	brge	.+10     	; 0x3596 <calculator_mode+0x174>
		__ticks = 1;
    358c:	81 e0       	ldi	r24, 0x01	; 1
    358e:	90 e0       	ldi	r25, 0x00	; 0
    3590:	9c 8b       	std	Y+20, r25	; 0x14
    3592:	8b 8b       	std	Y+19, r24	; 0x13
    3594:	3f c0       	rjmp	.+126    	; 0x3614 <calculator_mode+0x1f2>
	else if (__tmp > 65535)
    3596:	6d 89       	ldd	r22, Y+21	; 0x15
    3598:	7e 89       	ldd	r23, Y+22	; 0x16
    359a:	8f 89       	ldd	r24, Y+23	; 0x17
    359c:	98 8d       	ldd	r25, Y+24	; 0x18
    359e:	20 e0       	ldi	r18, 0x00	; 0
    35a0:	3f ef       	ldi	r19, 0xFF	; 255
    35a2:	4f e7       	ldi	r20, 0x7F	; 127
    35a4:	57 e4       	ldi	r21, 0x47	; 71
    35a6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    35aa:	18 16       	cp	r1, r24
    35ac:	4c f5       	brge	.+82     	; 0x3600 <calculator_mode+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    35ae:	69 8d       	ldd	r22, Y+25	; 0x19
    35b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    35b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    35b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    35b6:	20 e0       	ldi	r18, 0x00	; 0
    35b8:	30 e0       	ldi	r19, 0x00	; 0
    35ba:	40 e2       	ldi	r20, 0x20	; 32
    35bc:	51 e4       	ldi	r21, 0x41	; 65
    35be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    35c2:	dc 01       	movw	r26, r24
    35c4:	cb 01       	movw	r24, r22
    35c6:	bc 01       	movw	r22, r24
    35c8:	cd 01       	movw	r24, r26
    35ca:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    35ce:	dc 01       	movw	r26, r24
    35d0:	cb 01       	movw	r24, r22
    35d2:	9c 8b       	std	Y+20, r25	; 0x14
    35d4:	8b 8b       	std	Y+19, r24	; 0x13
    35d6:	0f c0       	rjmp	.+30     	; 0x35f6 <calculator_mode+0x1d4>
    35d8:	89 e1       	ldi	r24, 0x19	; 25
    35da:	90 e0       	ldi	r25, 0x00	; 0
    35dc:	9a 8b       	std	Y+18, r25	; 0x12
    35de:	89 8b       	std	Y+17, r24	; 0x11
    35e0:	89 89       	ldd	r24, Y+17	; 0x11
    35e2:	9a 89       	ldd	r25, Y+18	; 0x12
    35e4:	01 97       	sbiw	r24, 0x01	; 1
    35e6:	f1 f7       	brne	.-4      	; 0x35e4 <calculator_mode+0x1c2>
    35e8:	9a 8b       	std	Y+18, r25	; 0x12
    35ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35ec:	8b 89       	ldd	r24, Y+19	; 0x13
    35ee:	9c 89       	ldd	r25, Y+20	; 0x14
    35f0:	01 97       	sbiw	r24, 0x01	; 1
    35f2:	9c 8b       	std	Y+20, r25	; 0x14
    35f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35f6:	8b 89       	ldd	r24, Y+19	; 0x13
    35f8:	9c 89       	ldd	r25, Y+20	; 0x14
    35fa:	00 97       	sbiw	r24, 0x00	; 0
    35fc:	69 f7       	brne	.-38     	; 0x35d8 <calculator_mode+0x1b6>
    35fe:	14 c0       	rjmp	.+40     	; 0x3628 <calculator_mode+0x206>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3600:	6d 89       	ldd	r22, Y+21	; 0x15
    3602:	7e 89       	ldd	r23, Y+22	; 0x16
    3604:	8f 89       	ldd	r24, Y+23	; 0x17
    3606:	98 8d       	ldd	r25, Y+24	; 0x18
    3608:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    360c:	dc 01       	movw	r26, r24
    360e:	cb 01       	movw	r24, r22
    3610:	9c 8b       	std	Y+20, r25	; 0x14
    3612:	8b 8b       	std	Y+19, r24	; 0x13
    3614:	8b 89       	ldd	r24, Y+19	; 0x13
    3616:	9c 89       	ldd	r25, Y+20	; 0x14
    3618:	98 8b       	std	Y+16, r25	; 0x10
    361a:	8f 87       	std	Y+15, r24	; 0x0f
    361c:	8f 85       	ldd	r24, Y+15	; 0x0f
    361e:	98 89       	ldd	r25, Y+16	; 0x10
    3620:	01 97       	sbiw	r24, 0x01	; 1
    3622:	f1 f7       	brne	.-4      	; 0x3620 <calculator_mode+0x1fe>
    3624:	98 8b       	std	Y+16, r25	; 0x10
    3626:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(160) ;
	  	   switch (text)
    3628:	80 91 f4 01 	lds	r24, 0x01F4
    362c:	28 2f       	mov	r18, r24
    362e:	30 e0       	ldi	r19, 0x00	; 0
    3630:	3c a7       	std	Y+44, r19	; 0x2c
    3632:	2b a7       	std	Y+43, r18	; 0x2b
    3634:	8b a5       	ldd	r24, Y+43	; 0x2b
    3636:	9c a5       	ldd	r25, Y+44	; 0x2c
    3638:	80 33       	cpi	r24, 0x30	; 48
    363a:	91 05       	cpc	r25, r1
    363c:	0c f4       	brge	.+2      	; 0x3640 <calculator_mode+0x21e>
    363e:	0b c2       	rjmp	.+1046   	; 0x3a56 <calculator_mode+0x634>
    3640:	2b a5       	ldd	r18, Y+43	; 0x2b
    3642:	3c a5       	ldd	r19, Y+44	; 0x2c
    3644:	2a 33       	cpi	r18, 0x3A	; 58
    3646:	31 05       	cpc	r19, r1
    3648:	bc f1       	brlt	.+110    	; 0x36b8 <calculator_mode+0x296>
    364a:	8b a5       	ldd	r24, Y+43	; 0x2b
    364c:	9c a5       	ldd	r25, Y+44	; 0x2c
    364e:	8d 33       	cpi	r24, 0x3D	; 61
    3650:	91 05       	cpc	r25, r1
    3652:	09 f4       	brne	.+2      	; 0x3656 <calculator_mode+0x234>
    3654:	df c0       	rjmp	.+446    	; 0x3814 <calculator_mode+0x3f2>
    3656:	2b a5       	ldd	r18, Y+43	; 0x2b
    3658:	3c a5       	ldd	r19, Y+44	; 0x2c
    365a:	23 34       	cpi	r18, 0x43	; 67
    365c:	31 05       	cpc	r19, r1
    365e:	09 f0       	breq	.+2      	; 0x3662 <calculator_mode+0x240>
    3660:	fa c1       	rjmp	.+1012   	; 0x3a56 <calculator_mode+0x634>
	  	  	  { case 'C' :
	  	  	  		LCD_4bit_clear() ;
    3662:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
	  	  	  		i=0 ;
    3666:	10 92 00 02 	sts	0x0200, r1
	  	  	  		result =0 ;
    366a:	80 e0       	ldi	r24, 0x00	; 0
    366c:	90 e0       	ldi	r25, 0x00	; 0
    366e:	a0 e0       	ldi	r26, 0x00	; 0
    3670:	b0 e0       	ldi	r27, 0x00	; 0
    3672:	80 93 0a 02 	sts	0x020A, r24
    3676:	90 93 0b 02 	sts	0x020B, r25
    367a:	a0 93 0c 02 	sts	0x020C, r26
    367e:	b0 93 0d 02 	sts	0x020D, r27
	  	  	  		Num1=0 ;
    3682:	80 e0       	ldi	r24, 0x00	; 0
    3684:	90 e0       	ldi	r25, 0x00	; 0
    3686:	a0 e0       	ldi	r26, 0x00	; 0
    3688:	b0 e0       	ldi	r27, 0x00	; 0
    368a:	80 93 02 02 	sts	0x0202, r24
    368e:	90 93 03 02 	sts	0x0203, r25
    3692:	a0 93 04 02 	sts	0x0204, r26
    3696:	b0 93 05 02 	sts	0x0205, r27
	  	  	  		Num2=0 ;
    369a:	80 e0       	ldi	r24, 0x00	; 0
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a0 e0       	ldi	r26, 0x00	; 0
    36a0:	b0 e0       	ldi	r27, 0x00	; 0
    36a2:	80 93 06 02 	sts	0x0206, r24
    36a6:	90 93 07 02 	sts	0x0207, r25
    36aa:	a0 93 08 02 	sts	0x0208, r26
    36ae:	b0 93 09 02 	sts	0x0209, r27
	  	  	  		 flag=0 ;
    36b2:	10 92 01 02 	sts	0x0201, r1
    36b6:	f6 c1       	rjmp	.+1004   	; 0x3aa4 <calculator_mode+0x682>
					break ;
				case 48 ... 57 :
					if (i==0)
    36b8:	80 91 00 02 	lds	r24, 0x0200
    36bc:	88 23       	and	r24, r24
    36be:	09 f0       	breq	.+2      	; 0x36c2 <calculator_mode+0x2a0>
    36c0:	52 c0       	rjmp	.+164    	; 0x3766 <calculator_mode+0x344>
						{	if (Num1!=0)
    36c2:	80 91 02 02 	lds	r24, 0x0202
    36c6:	90 91 03 02 	lds	r25, 0x0203
    36ca:	a0 91 04 02 	lds	r26, 0x0204
    36ce:	b0 91 05 02 	lds	r27, 0x0205
    36d2:	bc 01       	movw	r22, r24
    36d4:	cd 01       	movw	r24, r26
    36d6:	20 e0       	ldi	r18, 0x00	; 0
    36d8:	30 e0       	ldi	r19, 0x00	; 0
    36da:	40 e0       	ldi	r20, 0x00	; 0
    36dc:	50 e0       	ldi	r21, 0x00	; 0
    36de:	0e 94 42 04 	call	0x884	; 0x884 <__nesf2>
    36e2:	88 23       	and	r24, r24
    36e4:	d1 f0       	breq	.+52     	; 0x371a <calculator_mode+0x2f8>
								Num1*=10 ;
    36e6:	80 91 02 02 	lds	r24, 0x0202
    36ea:	90 91 03 02 	lds	r25, 0x0203
    36ee:	a0 91 04 02 	lds	r26, 0x0204
    36f2:	b0 91 05 02 	lds	r27, 0x0205
    36f6:	bc 01       	movw	r22, r24
    36f8:	cd 01       	movw	r24, r26
    36fa:	20 e0       	ldi	r18, 0x00	; 0
    36fc:	30 e0       	ldi	r19, 0x00	; 0
    36fe:	40 e2       	ldi	r20, 0x20	; 32
    3700:	51 e4       	ldi	r21, 0x41	; 65
    3702:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3706:	dc 01       	movw	r26, r24
    3708:	cb 01       	movw	r24, r22
    370a:	80 93 02 02 	sts	0x0202, r24
    370e:	90 93 03 02 	sts	0x0203, r25
    3712:	a0 93 04 02 	sts	0x0204, r26
    3716:	b0 93 05 02 	sts	0x0205, r27
							Num1+=(text-48) ;
    371a:	80 91 f4 01 	lds	r24, 0x01F4
    371e:	88 2f       	mov	r24, r24
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	c0 97       	sbiw	r24, 0x30	; 48
    3724:	aa 27       	eor	r26, r26
    3726:	97 fd       	sbrc	r25, 7
    3728:	a0 95       	com	r26
    372a:	ba 2f       	mov	r27, r26
    372c:	bc 01       	movw	r22, r24
    372e:	cd 01       	movw	r24, r26
    3730:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    3734:	dc 01       	movw	r26, r24
    3736:	cb 01       	movw	r24, r22
    3738:	20 91 02 02 	lds	r18, 0x0202
    373c:	30 91 03 02 	lds	r19, 0x0203
    3740:	40 91 04 02 	lds	r20, 0x0204
    3744:	50 91 05 02 	lds	r21, 0x0205
    3748:	bc 01       	movw	r22, r24
    374a:	cd 01       	movw	r24, r26
    374c:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    3750:	dc 01       	movw	r26, r24
    3752:	cb 01       	movw	r24, r22
    3754:	80 93 02 02 	sts	0x0202, r24
    3758:	90 93 03 02 	sts	0x0203, r25
    375c:	a0 93 04 02 	sts	0x0204, r26
    3760:	b0 93 05 02 	sts	0x0205, r27
    3764:	9f c1       	rjmp	.+830    	; 0x3aa4 <calculator_mode+0x682>
						}
					else if (i==1)
    3766:	80 91 00 02 	lds	r24, 0x0200
    376a:	81 30       	cpi	r24, 0x01	; 1
    376c:	09 f0       	breq	.+2      	; 0x3770 <calculator_mode+0x34e>
    376e:	9a c1       	rjmp	.+820    	; 0x3aa4 <calculator_mode+0x682>
					{
							if (Num2!=0)
    3770:	80 91 06 02 	lds	r24, 0x0206
    3774:	90 91 07 02 	lds	r25, 0x0207
    3778:	a0 91 08 02 	lds	r26, 0x0208
    377c:	b0 91 09 02 	lds	r27, 0x0209
    3780:	bc 01       	movw	r22, r24
    3782:	cd 01       	movw	r24, r26
    3784:	20 e0       	ldi	r18, 0x00	; 0
    3786:	30 e0       	ldi	r19, 0x00	; 0
    3788:	40 e0       	ldi	r20, 0x00	; 0
    378a:	50 e0       	ldi	r21, 0x00	; 0
    378c:	0e 94 42 04 	call	0x884	; 0x884 <__nesf2>
    3790:	88 23       	and	r24, r24
    3792:	d1 f0       	breq	.+52     	; 0x37c8 <calculator_mode+0x3a6>
								Num2*=10 ;
    3794:	80 91 06 02 	lds	r24, 0x0206
    3798:	90 91 07 02 	lds	r25, 0x0207
    379c:	a0 91 08 02 	lds	r26, 0x0208
    37a0:	b0 91 09 02 	lds	r27, 0x0209
    37a4:	bc 01       	movw	r22, r24
    37a6:	cd 01       	movw	r24, r26
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 e2       	ldi	r20, 0x20	; 32
    37ae:	51 e4       	ldi	r21, 0x41	; 65
    37b0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    37b4:	dc 01       	movw	r26, r24
    37b6:	cb 01       	movw	r24, r22
    37b8:	80 93 06 02 	sts	0x0206, r24
    37bc:	90 93 07 02 	sts	0x0207, r25
    37c0:	a0 93 08 02 	sts	0x0208, r26
    37c4:	b0 93 09 02 	sts	0x0209, r27
							Num2+=(text-48) ;
    37c8:	80 91 f4 01 	lds	r24, 0x01F4
    37cc:	88 2f       	mov	r24, r24
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	c0 97       	sbiw	r24, 0x30	; 48
    37d2:	aa 27       	eor	r26, r26
    37d4:	97 fd       	sbrc	r25, 7
    37d6:	a0 95       	com	r26
    37d8:	ba 2f       	mov	r27, r26
    37da:	bc 01       	movw	r22, r24
    37dc:	cd 01       	movw	r24, r26
    37de:	0e 94 02 05 	call	0xa04	; 0xa04 <__floatsisf>
    37e2:	dc 01       	movw	r26, r24
    37e4:	cb 01       	movw	r24, r22
    37e6:	20 91 06 02 	lds	r18, 0x0206
    37ea:	30 91 07 02 	lds	r19, 0x0207
    37ee:	40 91 08 02 	lds	r20, 0x0208
    37f2:	50 91 09 02 	lds	r21, 0x0209
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	80 93 06 02 	sts	0x0206, r24
    3806:	90 93 07 02 	sts	0x0207, r25
    380a:	a0 93 08 02 	sts	0x0208, r26
    380e:	b0 93 09 02 	sts	0x0209, r27
    3812:	48 c1       	rjmp	.+656    	; 0x3aa4 <calculator_mode+0x682>
						{
						// error detection
						}
					break ;
				 case '=' :
					LCD_4bit_clear() ;
    3814:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
					 if (operation =='+')
    3818:	80 91 1e 02 	lds	r24, 0x021E
    381c:	8b 32       	cpi	r24, 0x2B	; 43
    381e:	f9 f4       	brne	.+62     	; 0x385e <calculator_mode+0x43c>
					 {
						 result=Num1+Num2 ;
    3820:	80 91 02 02 	lds	r24, 0x0202
    3824:	90 91 03 02 	lds	r25, 0x0203
    3828:	a0 91 04 02 	lds	r26, 0x0204
    382c:	b0 91 05 02 	lds	r27, 0x0205
    3830:	20 91 06 02 	lds	r18, 0x0206
    3834:	30 91 07 02 	lds	r19, 0x0207
    3838:	40 91 08 02 	lds	r20, 0x0208
    383c:	50 91 09 02 	lds	r21, 0x0209
    3840:	bc 01       	movw	r22, r24
    3842:	cd 01       	movw	r24, r26
    3844:	0e 94 6f 02 	call	0x4de	; 0x4de <__addsf3>
    3848:	dc 01       	movw	r26, r24
    384a:	cb 01       	movw	r24, r22
    384c:	80 93 0a 02 	sts	0x020A, r24
    3850:	90 93 0b 02 	sts	0x020B, r25
    3854:	a0 93 0c 02 	sts	0x020C, r26
    3858:	b0 93 0d 02 	sts	0x020D, r27
    385c:	68 c0       	rjmp	.+208    	; 0x392e <calculator_mode+0x50c>
					 }
					 else if (operation =='-')
    385e:	80 91 1e 02 	lds	r24, 0x021E
    3862:	8d 32       	cpi	r24, 0x2D	; 45
    3864:	f9 f4       	brne	.+62     	; 0x38a4 <calculator_mode+0x482>
					 {
						 result=Num1-Num2 ;
    3866:	80 91 02 02 	lds	r24, 0x0202
    386a:	90 91 03 02 	lds	r25, 0x0203
    386e:	a0 91 04 02 	lds	r26, 0x0204
    3872:	b0 91 05 02 	lds	r27, 0x0205
    3876:	20 91 06 02 	lds	r18, 0x0206
    387a:	30 91 07 02 	lds	r19, 0x0207
    387e:	40 91 08 02 	lds	r20, 0x0208
    3882:	50 91 09 02 	lds	r21, 0x0209
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	80 93 0a 02 	sts	0x020A, r24
    3896:	90 93 0b 02 	sts	0x020B, r25
    389a:	a0 93 0c 02 	sts	0x020C, r26
    389e:	b0 93 0d 02 	sts	0x020D, r27
    38a2:	45 c0       	rjmp	.+138    	; 0x392e <calculator_mode+0x50c>
					 }
					 else if (operation =='*')
    38a4:	80 91 1e 02 	lds	r24, 0x021E
    38a8:	8a 32       	cpi	r24, 0x2A	; 42
    38aa:	f9 f4       	brne	.+62     	; 0x38ea <calculator_mode+0x4c8>
					 {
						 result=Num1*Num2 ;
    38ac:	80 91 02 02 	lds	r24, 0x0202
    38b0:	90 91 03 02 	lds	r25, 0x0203
    38b4:	a0 91 04 02 	lds	r26, 0x0204
    38b8:	b0 91 05 02 	lds	r27, 0x0205
    38bc:	20 91 06 02 	lds	r18, 0x0206
    38c0:	30 91 07 02 	lds	r19, 0x0207
    38c4:	40 91 08 02 	lds	r20, 0x0208
    38c8:	50 91 09 02 	lds	r21, 0x0209
    38cc:	bc 01       	movw	r22, r24
    38ce:	cd 01       	movw	r24, r26
    38d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    38d4:	dc 01       	movw	r26, r24
    38d6:	cb 01       	movw	r24, r22
    38d8:	80 93 0a 02 	sts	0x020A, r24
    38dc:	90 93 0b 02 	sts	0x020B, r25
    38e0:	a0 93 0c 02 	sts	0x020C, r26
    38e4:	b0 93 0d 02 	sts	0x020D, r27
    38e8:	22 c0       	rjmp	.+68     	; 0x392e <calculator_mode+0x50c>
					 }
					 else if (operation =='/')
    38ea:	80 91 1e 02 	lds	r24, 0x021E
    38ee:	8f 32       	cpi	r24, 0x2F	; 47
    38f0:	f1 f4       	brne	.+60     	; 0x392e <calculator_mode+0x50c>
					 {
						 result=Num1/Num2 ;
    38f2:	80 91 02 02 	lds	r24, 0x0202
    38f6:	90 91 03 02 	lds	r25, 0x0203
    38fa:	a0 91 04 02 	lds	r26, 0x0204
    38fe:	b0 91 05 02 	lds	r27, 0x0205
    3902:	20 91 06 02 	lds	r18, 0x0206
    3906:	30 91 07 02 	lds	r19, 0x0207
    390a:	40 91 08 02 	lds	r20, 0x0208
    390e:	50 91 09 02 	lds	r21, 0x0209
    3912:	bc 01       	movw	r22, r24
    3914:	cd 01       	movw	r24, r26
    3916:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    391a:	dc 01       	movw	r26, r24
    391c:	cb 01       	movw	r24, r22
    391e:	80 93 0a 02 	sts	0x020A, r24
    3922:	90 93 0b 02 	sts	0x020B, r25
    3926:	a0 93 0c 02 	sts	0x020C, r26
    392a:	b0 93 0d 02 	sts	0x020D, r27
					 }
					 else
					 {
						  // error detection
					 }
					 dtostrf(result,4,2,temp) ;
    392e:	80 91 0a 02 	lds	r24, 0x020A
    3932:	90 91 0b 02 	lds	r25, 0x020B
    3936:	a0 91 0c 02 	lds	r26, 0x020C
    393a:	b0 91 0d 02 	lds	r27, 0x020D
    393e:	e4 e1       	ldi	r30, 0x14	; 20
    3940:	f2 e0       	ldi	r31, 0x02	; 2
    3942:	bc 01       	movw	r22, r24
    3944:	cd 01       	movw	r24, r26
    3946:	44 e0       	ldi	r20, 0x04	; 4
    3948:	50 e0       	ldi	r21, 0x00	; 0
    394a:	22 e0       	ldi	r18, 0x02	; 2
    394c:	30 e0       	ldi	r19, 0x00	; 0
    394e:	8f 01       	movw	r16, r30
    3950:	0e 94 3a 1e 	call	0x3c74	; 0x3c74 <dtostrf>
					 sprintf(buffer ,"%s", temp) ;
    3954:	8f e1       	ldi	r24, 0x1F	; 31
    3956:	92 e0       	ldi	r25, 0x02	; 2
    3958:	24 e1       	ldi	r18, 0x14	; 20
    395a:	32 e0       	ldi	r19, 0x02	; 2
    395c:	b9 01       	movw	r22, r18
    395e:	0e 94 79 1e 	call	0x3cf2	; 0x3cf2 <strcpy>
					 flag =1 ;
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	80 93 01 02 	sts	0x0201, r24
					 LCD_4bit_sendstring(buffer) ;
    3968:	8f e1       	ldi	r24, 0x1F	; 31
    396a:	92 e0       	ldi	r25, 0x02	; 2
    396c:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	90 e0       	ldi	r25, 0x00	; 0
    3974:	a0 ef       	ldi	r26, 0xF0	; 240
    3976:	b2 e4       	ldi	r27, 0x42	; 66
    3978:	8b 87       	std	Y+11, r24	; 0x0b
    397a:	9c 87       	std	Y+12, r25	; 0x0c
    397c:	ad 87       	std	Y+13, r26	; 0x0d
    397e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3980:	6b 85       	ldd	r22, Y+11	; 0x0b
    3982:	7c 85       	ldd	r23, Y+12	; 0x0c
    3984:	8d 85       	ldd	r24, Y+13	; 0x0d
    3986:	9e 85       	ldd	r25, Y+14	; 0x0e
    3988:	20 e0       	ldi	r18, 0x00	; 0
    398a:	30 e0       	ldi	r19, 0x00	; 0
    398c:	4a e7       	ldi	r20, 0x7A	; 122
    398e:	53 e4       	ldi	r21, 0x43	; 67
    3990:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3994:	dc 01       	movw	r26, r24
    3996:	cb 01       	movw	r24, r22
    3998:	8f 83       	std	Y+7, r24	; 0x07
    399a:	98 87       	std	Y+8, r25	; 0x08
    399c:	a9 87       	std	Y+9, r26	; 0x09
    399e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    39a0:	6f 81       	ldd	r22, Y+7	; 0x07
    39a2:	78 85       	ldd	r23, Y+8	; 0x08
    39a4:	89 85       	ldd	r24, Y+9	; 0x09
    39a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	30 e0       	ldi	r19, 0x00	; 0
    39ac:	40 e8       	ldi	r20, 0x80	; 128
    39ae:	5f e3       	ldi	r21, 0x3F	; 63
    39b0:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    39b4:	88 23       	and	r24, r24
    39b6:	2c f4       	brge	.+10     	; 0x39c2 <calculator_mode+0x5a0>
		__ticks = 1;
    39b8:	81 e0       	ldi	r24, 0x01	; 1
    39ba:	90 e0       	ldi	r25, 0x00	; 0
    39bc:	9e 83       	std	Y+6, r25	; 0x06
    39be:	8d 83       	std	Y+5, r24	; 0x05
    39c0:	3f c0       	rjmp	.+126    	; 0x3a40 <calculator_mode+0x61e>
	else if (__tmp > 65535)
    39c2:	6f 81       	ldd	r22, Y+7	; 0x07
    39c4:	78 85       	ldd	r23, Y+8	; 0x08
    39c6:	89 85       	ldd	r24, Y+9	; 0x09
    39c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    39ca:	20 e0       	ldi	r18, 0x00	; 0
    39cc:	3f ef       	ldi	r19, 0xFF	; 255
    39ce:	4f e7       	ldi	r20, 0x7F	; 127
    39d0:	57 e4       	ldi	r21, 0x47	; 71
    39d2:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    39d6:	18 16       	cp	r1, r24
    39d8:	4c f5       	brge	.+82     	; 0x3a2c <calculator_mode+0x60a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39da:	6b 85       	ldd	r22, Y+11	; 0x0b
    39dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    39de:	8d 85       	ldd	r24, Y+13	; 0x0d
    39e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    39e2:	20 e0       	ldi	r18, 0x00	; 0
    39e4:	30 e0       	ldi	r19, 0x00	; 0
    39e6:	40 e2       	ldi	r20, 0x20	; 32
    39e8:	51 e4       	ldi	r21, 0x41	; 65
    39ea:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    39ee:	dc 01       	movw	r26, r24
    39f0:	cb 01       	movw	r24, r22
    39f2:	bc 01       	movw	r22, r24
    39f4:	cd 01       	movw	r24, r26
    39f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    39fa:	dc 01       	movw	r26, r24
    39fc:	cb 01       	movw	r24, r22
    39fe:	9e 83       	std	Y+6, r25	; 0x06
    3a00:	8d 83       	std	Y+5, r24	; 0x05
    3a02:	0f c0       	rjmp	.+30     	; 0x3a22 <calculator_mode+0x600>
    3a04:	89 e1       	ldi	r24, 0x19	; 25
    3a06:	90 e0       	ldi	r25, 0x00	; 0
    3a08:	9c 83       	std	Y+4, r25	; 0x04
    3a0a:	8b 83       	std	Y+3, r24	; 0x03
    3a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    3a10:	01 97       	sbiw	r24, 0x01	; 1
    3a12:	f1 f7       	brne	.-4      	; 0x3a10 <calculator_mode+0x5ee>
    3a14:	9c 83       	std	Y+4, r25	; 0x04
    3a16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a18:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	9e 83       	std	Y+6, r25	; 0x06
    3a20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a22:	8d 81       	ldd	r24, Y+5	; 0x05
    3a24:	9e 81       	ldd	r25, Y+6	; 0x06
    3a26:	00 97       	sbiw	r24, 0x00	; 0
    3a28:	69 f7       	brne	.-38     	; 0x3a04 <calculator_mode+0x5e2>
    3a2a:	3c c0       	rjmp	.+120    	; 0x3aa4 <calculator_mode+0x682>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a2c:	6f 81       	ldd	r22, Y+7	; 0x07
    3a2e:	78 85       	ldd	r23, Y+8	; 0x08
    3a30:	89 85       	ldd	r24, Y+9	; 0x09
    3a32:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a34:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3a38:	dc 01       	movw	r26, r24
    3a3a:	cb 01       	movw	r24, r22
    3a3c:	9e 83       	std	Y+6, r25	; 0x06
    3a3e:	8d 83       	std	Y+5, r24	; 0x05
    3a40:	8d 81       	ldd	r24, Y+5	; 0x05
    3a42:	9e 81       	ldd	r25, Y+6	; 0x06
    3a44:	9a 83       	std	Y+2, r25	; 0x02
    3a46:	89 83       	std	Y+1, r24	; 0x01
    3a48:	89 81       	ldd	r24, Y+1	; 0x01
    3a4a:	9a 81       	ldd	r25, Y+2	; 0x02
    3a4c:	01 97       	sbiw	r24, 0x01	; 1
    3a4e:	f1 f7       	brne	.-4      	; 0x3a4c <calculator_mode+0x62a>
    3a50:	9a 83       	std	Y+2, r25	; 0x02
    3a52:	89 83       	std	Y+1, r24	; 0x01
    3a54:	27 c0       	rjmp	.+78     	; 0x3aa4 <calculator_mode+0x682>
					 _delay_ms(120) ;
					 break ;
				 default :
					{ if (flag ==1)
    3a56:	80 91 01 02 	lds	r24, 0x0201
    3a5a:	81 30       	cpi	r24, 0x01	; 1
    3a5c:	e1 f4       	brne	.+56     	; 0x3a96 <calculator_mode+0x674>
							{	Num2=0 ;
    3a5e:	80 e0       	ldi	r24, 0x00	; 0
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	a0 e0       	ldi	r26, 0x00	; 0
    3a64:	b0 e0       	ldi	r27, 0x00	; 0
    3a66:	80 93 06 02 	sts	0x0206, r24
    3a6a:	90 93 07 02 	sts	0x0207, r25
    3a6e:	a0 93 08 02 	sts	0x0208, r26
    3a72:	b0 93 09 02 	sts	0x0209, r27
								Num1 = result ;
    3a76:	80 91 0a 02 	lds	r24, 0x020A
    3a7a:	90 91 0b 02 	lds	r25, 0x020B
    3a7e:	a0 91 0c 02 	lds	r26, 0x020C
    3a82:	b0 91 0d 02 	lds	r27, 0x020D
    3a86:	80 93 02 02 	sts	0x0202, r24
    3a8a:	90 93 03 02 	sts	0x0203, r25
    3a8e:	a0 93 04 02 	sts	0x0204, r26
    3a92:	b0 93 05 02 	sts	0x0205, r27
							}
						operation=text ;
    3a96:	80 91 f4 01 	lds	r24, 0x01F4
    3a9a:	80 93 1e 02 	sts	0x021E, r24
						i=1 ;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	80 93 00 02 	sts	0x0200, r24
					}

	  	  	  }

	  	 text = KP_NOTPRESSED ;
    3aa4:	8f ef       	ldi	r24, 0xFF	; 255
    3aa6:	80 93 f4 01 	sts	0x01F4, r24
	}
}

void calculator_mode()
{ 	LCD_4bit_clear() ;
	while (C_flag ==1)
    3aaa:	80 91 0f 02 	lds	r24, 0x020F
    3aae:	81 30       	cpi	r24, 0x01	; 1
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <calculator_mode+0x692>
    3ab2:	ca cc       	rjmp	.-1644   	; 0x3448 <calculator_mode+0x26>

	  	  	  }

	  	 text = KP_NOTPRESSED ;
}
}
    3ab4:	ac 96       	adiw	r28, 0x2c	; 44
    3ab6:	0f b6       	in	r0, 0x3f	; 63
    3ab8:	f8 94       	cli
    3aba:	de bf       	out	0x3e, r29	; 62
    3abc:	0f be       	out	0x3f, r0	; 63
    3abe:	cd bf       	out	0x3d, r28	; 61
    3ac0:	cf 91       	pop	r28
    3ac2:	df 91       	pop	r29
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	08 95       	ret

00003aca <locked_press>:

void locked_press()
{ 			LCD_4bit_clear() ;
    3aca:	df 93       	push	r29
    3acc:	cf 93       	push	r28
    3ace:	cd b7       	in	r28, 0x3d	; 61
    3ad0:	de b7       	in	r29, 0x3e	; 62
    3ad2:	2e 97       	sbiw	r28, 0x0e	; 14
    3ad4:	0f b6       	in	r0, 0x3f	; 63
    3ad6:	f8 94       	cli
    3ad8:	de bf       	out	0x3e, r29	; 62
    3ada:	0f be       	out	0x3f, r0	; 63
    3adc:	cd bf       	out	0x3d, r28	; 61
    3ade:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
			LCD_4bit_sendstring("Enter Pass First") ;
    3ae2:	8b ec       	ldi	r24, 0xCB	; 203
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
    3aea:	80 e0       	ldi	r24, 0x00	; 0
    3aec:	90 e0       	ldi	r25, 0x00	; 0
    3aee:	a8 e4       	ldi	r26, 0x48	; 72
    3af0:	b3 e4       	ldi	r27, 0x43	; 67
    3af2:	8b 87       	std	Y+11, r24	; 0x0b
    3af4:	9c 87       	std	Y+12, r25	; 0x0c
    3af6:	ad 87       	std	Y+13, r26	; 0x0d
    3af8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3afa:	6b 85       	ldd	r22, Y+11	; 0x0b
    3afc:	7c 85       	ldd	r23, Y+12	; 0x0c
    3afe:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b00:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b02:	20 e0       	ldi	r18, 0x00	; 0
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	4a e7       	ldi	r20, 0x7A	; 122
    3b08:	53 e4       	ldi	r21, 0x43	; 67
    3b0a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b0e:	dc 01       	movw	r26, r24
    3b10:	cb 01       	movw	r24, r22
    3b12:	8f 83       	std	Y+7, r24	; 0x07
    3b14:	98 87       	std	Y+8, r25	; 0x08
    3b16:	a9 87       	std	Y+9, r26	; 0x09
    3b18:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b1c:	78 85       	ldd	r23, Y+8	; 0x08
    3b1e:	89 85       	ldd	r24, Y+9	; 0x09
    3b20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b22:	20 e0       	ldi	r18, 0x00	; 0
    3b24:	30 e0       	ldi	r19, 0x00	; 0
    3b26:	40 e8       	ldi	r20, 0x80	; 128
    3b28:	5f e3       	ldi	r21, 0x3F	; 63
    3b2a:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__ltsf2>
    3b2e:	88 23       	and	r24, r24
    3b30:	2c f4       	brge	.+10     	; 0x3b3c <locked_press+0x72>
		__ticks = 1;
    3b32:	81 e0       	ldi	r24, 0x01	; 1
    3b34:	90 e0       	ldi	r25, 0x00	; 0
    3b36:	9e 83       	std	Y+6, r25	; 0x06
    3b38:	8d 83       	std	Y+5, r24	; 0x05
    3b3a:	3f c0       	rjmp	.+126    	; 0x3bba <locked_press+0xf0>
	else if (__tmp > 65535)
    3b3c:	6f 81       	ldd	r22, Y+7	; 0x07
    3b3e:	78 85       	ldd	r23, Y+8	; 0x08
    3b40:	89 85       	ldd	r24, Y+9	; 0x09
    3b42:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b44:	20 e0       	ldi	r18, 0x00	; 0
    3b46:	3f ef       	ldi	r19, 0xFF	; 255
    3b48:	4f e7       	ldi	r20, 0x7F	; 127
    3b4a:	57 e4       	ldi	r21, 0x47	; 71
    3b4c:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gtsf2>
    3b50:	18 16       	cp	r1, r24
    3b52:	4c f5       	brge	.+82     	; 0x3ba6 <locked_press+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b54:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b56:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b58:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b5c:	20 e0       	ldi	r18, 0x00	; 0
    3b5e:	30 e0       	ldi	r19, 0x00	; 0
    3b60:	40 e2       	ldi	r20, 0x20	; 32
    3b62:	51 e4       	ldi	r21, 0x41	; 65
    3b64:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    3b68:	dc 01       	movw	r26, r24
    3b6a:	cb 01       	movw	r24, r22
    3b6c:	bc 01       	movw	r22, r24
    3b6e:	cd 01       	movw	r24, r26
    3b70:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3b74:	dc 01       	movw	r26, r24
    3b76:	cb 01       	movw	r24, r22
    3b78:	9e 83       	std	Y+6, r25	; 0x06
    3b7a:	8d 83       	std	Y+5, r24	; 0x05
    3b7c:	0f c0       	rjmp	.+30     	; 0x3b9c <locked_press+0xd2>
    3b7e:	89 e1       	ldi	r24, 0x19	; 25
    3b80:	90 e0       	ldi	r25, 0x00	; 0
    3b82:	9c 83       	std	Y+4, r25	; 0x04
    3b84:	8b 83       	std	Y+3, r24	; 0x03
    3b86:	8b 81       	ldd	r24, Y+3	; 0x03
    3b88:	9c 81       	ldd	r25, Y+4	; 0x04
    3b8a:	01 97       	sbiw	r24, 0x01	; 1
    3b8c:	f1 f7       	brne	.-4      	; 0x3b8a <locked_press+0xc0>
    3b8e:	9c 83       	std	Y+4, r25	; 0x04
    3b90:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b92:	8d 81       	ldd	r24, Y+5	; 0x05
    3b94:	9e 81       	ldd	r25, Y+6	; 0x06
    3b96:	01 97       	sbiw	r24, 0x01	; 1
    3b98:	9e 83       	std	Y+6, r25	; 0x06
    3b9a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b9c:	8d 81       	ldd	r24, Y+5	; 0x05
    3b9e:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	69 f7       	brne	.-38     	; 0x3b7e <locked_press+0xb4>
    3ba4:	14 c0       	rjmp	.+40     	; 0x3bce <locked_press+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba6:	6f 81       	ldd	r22, Y+7	; 0x07
    3ba8:	78 85       	ldd	r23, Y+8	; 0x08
    3baa:	89 85       	ldd	r24, Y+9	; 0x09
    3bac:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bae:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    3bb2:	dc 01       	movw	r26, r24
    3bb4:	cb 01       	movw	r24, r22
    3bb6:	9e 83       	std	Y+6, r25	; 0x06
    3bb8:	8d 83       	std	Y+5, r24	; 0x05
    3bba:	8d 81       	ldd	r24, Y+5	; 0x05
    3bbc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bbe:	9a 83       	std	Y+2, r25	; 0x02
    3bc0:	89 83       	std	Y+1, r24	; 0x01
    3bc2:	89 81       	ldd	r24, Y+1	; 0x01
    3bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    3bc6:	01 97       	sbiw	r24, 0x01	; 1
    3bc8:	f1 f7       	brne	.-4      	; 0x3bc6 <locked_press+0xfc>
    3bca:	9a 83       	std	Y+2, r25	; 0x02
    3bcc:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(200) ;
			LCD_4bit_clear() ;
    3bce:	0e 94 47 14 	call	0x288e	; 0x288e <LCD_4bit_clear>
			LCD_4bit_sendstring(" Enter PIN: ") ;
    3bd2:	84 e9       	ldi	r24, 0x94	; 148
    3bd4:	90 e0       	ldi	r25, 0x00	; 0
    3bd6:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <LCD_4bit_sendstring>
}
    3bda:	2e 96       	adiw	r28, 0x0e	; 14
    3bdc:	0f b6       	in	r0, 0x3f	; 63
    3bde:	f8 94       	cli
    3be0:	de bf       	out	0x3e, r29	; 62
    3be2:	0f be       	out	0x3f, r0	; 63
    3be4:	cd bf       	out	0x3d, r28	; 61
    3be6:	cf 91       	pop	r28
    3be8:	df 91       	pop	r29
    3bea:	08 95       	ret

00003bec <main>:
 *      Author: mohamed
 */

#include "Application/App.h"
int main (void)
{
    3bec:	df 93       	push	r29
    3bee:	cf 93       	push	r28
    3bf0:	cd b7       	in	r28, 0x3d	; 61
    3bf2:	de b7       	in	r29, 0x3e	; 62
APP_init() ;
    3bf4:	0e 94 21 17 	call	0x2e42	; 0x2e42 <APP_init>
APP_start() ;
    3bf8:	0e 94 3c 17 	call	0x2e78	; 0x2e78 <APP_start>
    3bfc:	80 e0       	ldi	r24, 0x00	; 0
    3bfe:	90 e0       	ldi	r25, 0x00	; 0

}
    3c00:	cf 91       	pop	r28
    3c02:	df 91       	pop	r29
    3c04:	08 95       	ret

00003c06 <__prologue_saves__>:
    3c06:	2f 92       	push	r2
    3c08:	3f 92       	push	r3
    3c0a:	4f 92       	push	r4
    3c0c:	5f 92       	push	r5
    3c0e:	6f 92       	push	r6
    3c10:	7f 92       	push	r7
    3c12:	8f 92       	push	r8
    3c14:	9f 92       	push	r9
    3c16:	af 92       	push	r10
    3c18:	bf 92       	push	r11
    3c1a:	cf 92       	push	r12
    3c1c:	df 92       	push	r13
    3c1e:	ef 92       	push	r14
    3c20:	ff 92       	push	r15
    3c22:	0f 93       	push	r16
    3c24:	1f 93       	push	r17
    3c26:	cf 93       	push	r28
    3c28:	df 93       	push	r29
    3c2a:	cd b7       	in	r28, 0x3d	; 61
    3c2c:	de b7       	in	r29, 0x3e	; 62
    3c2e:	ca 1b       	sub	r28, r26
    3c30:	db 0b       	sbc	r29, r27
    3c32:	0f b6       	in	r0, 0x3f	; 63
    3c34:	f8 94       	cli
    3c36:	de bf       	out	0x3e, r29	; 62
    3c38:	0f be       	out	0x3f, r0	; 63
    3c3a:	cd bf       	out	0x3d, r28	; 61
    3c3c:	09 94       	ijmp

00003c3e <__epilogue_restores__>:
    3c3e:	2a 88       	ldd	r2, Y+18	; 0x12
    3c40:	39 88       	ldd	r3, Y+17	; 0x11
    3c42:	48 88       	ldd	r4, Y+16	; 0x10
    3c44:	5f 84       	ldd	r5, Y+15	; 0x0f
    3c46:	6e 84       	ldd	r6, Y+14	; 0x0e
    3c48:	7d 84       	ldd	r7, Y+13	; 0x0d
    3c4a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3c4c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3c4e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3c50:	b9 84       	ldd	r11, Y+9	; 0x09
    3c52:	c8 84       	ldd	r12, Y+8	; 0x08
    3c54:	df 80       	ldd	r13, Y+7	; 0x07
    3c56:	ee 80       	ldd	r14, Y+6	; 0x06
    3c58:	fd 80       	ldd	r15, Y+5	; 0x05
    3c5a:	0c 81       	ldd	r16, Y+4	; 0x04
    3c5c:	1b 81       	ldd	r17, Y+3	; 0x03
    3c5e:	aa 81       	ldd	r26, Y+2	; 0x02
    3c60:	b9 81       	ldd	r27, Y+1	; 0x01
    3c62:	ce 0f       	add	r28, r30
    3c64:	d1 1d       	adc	r29, r1
    3c66:	0f b6       	in	r0, 0x3f	; 63
    3c68:	f8 94       	cli
    3c6a:	de bf       	out	0x3e, r29	; 62
    3c6c:	0f be       	out	0x3f, r0	; 63
    3c6e:	cd bf       	out	0x3d, r28	; 61
    3c70:	ed 01       	movw	r28, r26
    3c72:	08 95       	ret

00003c74 <dtostrf>:
    3c74:	ef 92       	push	r14
    3c76:	ff 92       	push	r15
    3c78:	0f 93       	push	r16
    3c7a:	1f 93       	push	r17
    3c7c:	f2 2f       	mov	r31, r18
    3c7e:	f0 2e       	mov	r15, r16
    3c80:	47 fd       	sbrc	r20, 7
    3c82:	02 c0       	rjmp	.+4      	; 0x3c88 <dtostrf+0x14>
    3c84:	e4 e0       	ldi	r30, 0x04	; 4
    3c86:	01 c0       	rjmp	.+2      	; 0x3c8a <dtostrf+0x16>
    3c88:	e4 e1       	ldi	r30, 0x14	; 20
    3c8a:	24 2f       	mov	r18, r20
    3c8c:	33 27       	eor	r19, r19
    3c8e:	27 fd       	sbrc	r18, 7
    3c90:	30 95       	com	r19
    3c92:	37 ff       	sbrs	r19, 7
    3c94:	03 c0       	rjmp	.+6      	; 0x3c9c <dtostrf+0x28>
    3c96:	30 95       	com	r19
    3c98:	21 95       	neg	r18
    3c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9c:	4f 2d       	mov	r20, r15
    3c9e:	51 2f       	mov	r21, r17
    3ca0:	0f 2f       	mov	r16, r31
    3ca2:	ee 2e       	mov	r14, r30
    3ca4:	0e 94 88 1e 	call	0x3d10	; 0x3d10 <dtoa_prf>
    3ca8:	8f 2d       	mov	r24, r15
    3caa:	91 2f       	mov	r25, r17
    3cac:	1f 91       	pop	r17
    3cae:	0f 91       	pop	r16
    3cb0:	ff 90       	pop	r15
    3cb2:	ef 90       	pop	r14
    3cb4:	08 95       	ret

00003cb6 <atoi>:
    3cb6:	fc 01       	movw	r30, r24
    3cb8:	88 27       	eor	r24, r24
    3cba:	99 27       	eor	r25, r25
    3cbc:	e8 94       	clt
    3cbe:	21 91       	ld	r18, Z+
    3cc0:	20 32       	cpi	r18, 0x20	; 32
    3cc2:	e9 f3       	breq	.-6      	; 0x3cbe <atoi+0x8>
    3cc4:	29 30       	cpi	r18, 0x09	; 9
    3cc6:	10 f0       	brcs	.+4      	; 0x3ccc <atoi+0x16>
    3cc8:	2e 30       	cpi	r18, 0x0E	; 14
    3cca:	c8 f3       	brcs	.-14     	; 0x3cbe <atoi+0x8>
    3ccc:	2b 32       	cpi	r18, 0x2B	; 43
    3cce:	41 f0       	breq	.+16     	; 0x3ce0 <atoi+0x2a>
    3cd0:	2d 32       	cpi	r18, 0x2D	; 45
    3cd2:	39 f4       	brne	.+14     	; 0x3ce2 <atoi+0x2c>
    3cd4:	68 94       	set
    3cd6:	04 c0       	rjmp	.+8      	; 0x3ce0 <atoi+0x2a>
    3cd8:	0e 94 80 1e 	call	0x3d00	; 0x3d00 <__mulhi_const_10>
    3cdc:	82 0f       	add	r24, r18
    3cde:	91 1d       	adc	r25, r1
    3ce0:	21 91       	ld	r18, Z+
    3ce2:	20 53       	subi	r18, 0x30	; 48
    3ce4:	2a 30       	cpi	r18, 0x0A	; 10
    3ce6:	c0 f3       	brcs	.-16     	; 0x3cd8 <atoi+0x22>
    3ce8:	1e f4       	brtc	.+6      	; 0x3cf0 <atoi+0x3a>
    3cea:	90 95       	com	r25
    3cec:	81 95       	neg	r24
    3cee:	9f 4f       	sbci	r25, 0xFF	; 255
    3cf0:	08 95       	ret

00003cf2 <strcpy>:
    3cf2:	fb 01       	movw	r30, r22
    3cf4:	dc 01       	movw	r26, r24
    3cf6:	01 90       	ld	r0, Z+
    3cf8:	0d 92       	st	X+, r0
    3cfa:	00 20       	and	r0, r0
    3cfc:	e1 f7       	brne	.-8      	; 0x3cf6 <strcpy+0x4>
    3cfe:	08 95       	ret

00003d00 <__mulhi_const_10>:
    3d00:	7a e0       	ldi	r23, 0x0A	; 10
    3d02:	97 9f       	mul	r25, r23
    3d04:	90 2d       	mov	r25, r0
    3d06:	87 9f       	mul	r24, r23
    3d08:	80 2d       	mov	r24, r0
    3d0a:	91 0d       	add	r25, r1
    3d0c:	11 24       	eor	r1, r1
    3d0e:	08 95       	ret

00003d10 <dtoa_prf>:
    3d10:	a9 e0       	ldi	r26, 0x09	; 9
    3d12:	b0 e0       	ldi	r27, 0x00	; 0
    3d14:	ee e8       	ldi	r30, 0x8E	; 142
    3d16:	fe e1       	ldi	r31, 0x1E	; 30
    3d18:	0c 94 07 1e 	jmp	0x3c0e	; 0x3c0e <__prologue_saves__+0x8>
    3d1c:	6a 01       	movw	r12, r20
    3d1e:	12 2f       	mov	r17, r18
    3d20:	a0 2e       	mov	r10, r16
    3d22:	be 2c       	mov	r11, r14
    3d24:	2b e3       	ldi	r18, 0x3B	; 59
    3d26:	20 17       	cp	r18, r16
    3d28:	18 f4       	brcc	.+6      	; 0x3d30 <dtoa_prf+0x20>
    3d2a:	2c e3       	ldi	r18, 0x3C	; 60
    3d2c:	92 2e       	mov	r9, r18
    3d2e:	02 c0       	rjmp	.+4      	; 0x3d34 <dtoa_prf+0x24>
    3d30:	90 2e       	mov	r9, r16
    3d32:	93 94       	inc	r9
    3d34:	ae 01       	movw	r20, r28
    3d36:	4f 5f       	subi	r20, 0xFF	; 255
    3d38:	5f 4f       	sbci	r21, 0xFF	; 255
    3d3a:	27 e0       	ldi	r18, 0x07	; 7
    3d3c:	09 2d       	mov	r16, r9
    3d3e:	0e 94 ea 1f 	call	0x3fd4	; 0x3fd4 <__ftoa_engine>
    3d42:	bc 01       	movw	r22, r24
    3d44:	89 81       	ldd	r24, Y+1	; 0x01
    3d46:	e8 2e       	mov	r14, r24
    3d48:	ff 24       	eor	r15, r15
    3d4a:	c7 01       	movw	r24, r14
    3d4c:	89 70       	andi	r24, 0x09	; 9
    3d4e:	90 70       	andi	r25, 0x00	; 0
    3d50:	01 97       	sbiw	r24, 0x01	; 1
    3d52:	11 f4       	brne	.+4      	; 0x3d58 <dtoa_prf+0x48>
    3d54:	ad e2       	ldi	r26, 0x2D	; 45
    3d56:	09 c0       	rjmp	.+18     	; 0x3d6a <dtoa_prf+0x5a>
    3d58:	b1 fe       	sbrs	r11, 1
    3d5a:	02 c0       	rjmp	.+4      	; 0x3d60 <dtoa_prf+0x50>
    3d5c:	ab e2       	ldi	r26, 0x2B	; 43
    3d5e:	05 c0       	rjmp	.+10     	; 0x3d6a <dtoa_prf+0x5a>
    3d60:	b0 fc       	sbrc	r11, 0
    3d62:	02 c0       	rjmp	.+4      	; 0x3d68 <dtoa_prf+0x58>
    3d64:	a0 e0       	ldi	r26, 0x00	; 0
    3d66:	01 c0       	rjmp	.+2      	; 0x3d6a <dtoa_prf+0x5a>
    3d68:	a0 e2       	ldi	r26, 0x20	; 32
    3d6a:	e3 fe       	sbrs	r14, 3
    3d6c:	3b c0       	rjmp	.+118    	; 0x3de4 <dtoa_prf+0xd4>
    3d6e:	aa 23       	and	r26, r26
    3d70:	11 f4       	brne	.+4      	; 0x3d76 <dtoa_prf+0x66>
    3d72:	23 e0       	ldi	r18, 0x03	; 3
    3d74:	01 c0       	rjmp	.+2      	; 0x3d78 <dtoa_prf+0x68>
    3d76:	24 e0       	ldi	r18, 0x04	; 4
    3d78:	21 17       	cp	r18, r17
    3d7a:	10 f0       	brcs	.+4      	; 0x3d80 <dtoa_prf+0x70>
    3d7c:	20 e0       	ldi	r18, 0x00	; 0
    3d7e:	02 c0       	rjmp	.+4      	; 0x3d84 <dtoa_prf+0x74>
    3d80:	12 1b       	sub	r17, r18
    3d82:	21 2f       	mov	r18, r17
    3d84:	eb 2c       	mov	r14, r11
    3d86:	b4 fe       	sbrs	r11, 4
    3d88:	02 c0       	rjmp	.+4      	; 0x3d8e <dtoa_prf+0x7e>
    3d8a:	32 2f       	mov	r19, r18
    3d8c:	0a c0       	rjmp	.+20     	; 0x3da2 <dtoa_prf+0x92>
    3d8e:	f6 01       	movw	r30, r12
    3d90:	32 2f       	mov	r19, r18
    3d92:	80 e2       	ldi	r24, 0x20	; 32
    3d94:	02 c0       	rjmp	.+4      	; 0x3d9a <dtoa_prf+0x8a>
    3d96:	81 93       	st	Z+, r24
    3d98:	31 50       	subi	r19, 0x01	; 1
    3d9a:	33 23       	and	r19, r19
    3d9c:	e1 f7       	brne	.-8      	; 0x3d96 <dtoa_prf+0x86>
    3d9e:	c2 0e       	add	r12, r18
    3da0:	d1 1c       	adc	r13, r1
    3da2:	aa 23       	and	r26, r26
    3da4:	19 f0       	breq	.+6      	; 0x3dac <dtoa_prf+0x9c>
    3da6:	f6 01       	movw	r30, r12
    3da8:	a1 93       	st	Z+, r26
    3daa:	6f 01       	movw	r12, r30
    3dac:	f6 01       	movw	r30, r12
    3dae:	31 96       	adiw	r30, 0x01	; 1
    3db0:	e2 fe       	sbrs	r14, 2
    3db2:	05 c0       	rjmp	.+10     	; 0x3dbe <dtoa_prf+0xae>
    3db4:	9e e4       	ldi	r25, 0x4E	; 78
    3db6:	d6 01       	movw	r26, r12
    3db8:	9c 93       	st	X, r25
    3dba:	81 e4       	ldi	r24, 0x41	; 65
    3dbc:	04 c0       	rjmp	.+8      	; 0x3dc6 <dtoa_prf+0xb6>
    3dbe:	9e e6       	ldi	r25, 0x6E	; 110
    3dc0:	d6 01       	movw	r26, r12
    3dc2:	9c 93       	st	X, r25
    3dc4:	81 e6       	ldi	r24, 0x61	; 97
    3dc6:	11 96       	adiw	r26, 0x01	; 1
    3dc8:	8c 93       	st	X, r24
    3dca:	91 83       	std	Z+1, r25	; 0x01
    3dcc:	32 96       	adiw	r30, 0x02	; 2
    3dce:	df 01       	movw	r26, r30
    3dd0:	83 2f       	mov	r24, r19
    3dd2:	90 e2       	ldi	r25, 0x20	; 32
    3dd4:	02 c0       	rjmp	.+4      	; 0x3dda <dtoa_prf+0xca>
    3dd6:	9d 93       	st	X+, r25
    3dd8:	81 50       	subi	r24, 0x01	; 1
    3dda:	88 23       	and	r24, r24
    3ddc:	e1 f7       	brne	.-8      	; 0x3dd6 <dtoa_prf+0xc6>
    3dde:	e3 0f       	add	r30, r19
    3de0:	f1 1d       	adc	r31, r1
    3de2:	40 c0       	rjmp	.+128    	; 0x3e64 <dtoa_prf+0x154>
    3de4:	e2 fe       	sbrs	r14, 2
    3de6:	42 c0       	rjmp	.+132    	; 0x3e6c <dtoa_prf+0x15c>
    3de8:	aa 23       	and	r26, r26
    3dea:	11 f4       	brne	.+4      	; 0x3df0 <dtoa_prf+0xe0>
    3dec:	23 e0       	ldi	r18, 0x03	; 3
    3dee:	01 c0       	rjmp	.+2      	; 0x3df2 <dtoa_prf+0xe2>
    3df0:	24 e0       	ldi	r18, 0x04	; 4
    3df2:	21 17       	cp	r18, r17
    3df4:	10 f0       	brcs	.+4      	; 0x3dfa <dtoa_prf+0xea>
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	02 c0       	rjmp	.+4      	; 0x3dfe <dtoa_prf+0xee>
    3dfa:	12 1b       	sub	r17, r18
    3dfc:	21 2f       	mov	r18, r17
    3dfe:	eb 2c       	mov	r14, r11
    3e00:	b4 fe       	sbrs	r11, 4
    3e02:	02 c0       	rjmp	.+4      	; 0x3e08 <dtoa_prf+0xf8>
    3e04:	92 2f       	mov	r25, r18
    3e06:	0a c0       	rjmp	.+20     	; 0x3e1c <dtoa_prf+0x10c>
    3e08:	f6 01       	movw	r30, r12
    3e0a:	92 2f       	mov	r25, r18
    3e0c:	80 e2       	ldi	r24, 0x20	; 32
    3e0e:	02 c0       	rjmp	.+4      	; 0x3e14 <dtoa_prf+0x104>
    3e10:	81 93       	st	Z+, r24
    3e12:	91 50       	subi	r25, 0x01	; 1
    3e14:	99 23       	and	r25, r25
    3e16:	e1 f7       	brne	.-8      	; 0x3e10 <dtoa_prf+0x100>
    3e18:	c2 0e       	add	r12, r18
    3e1a:	d1 1c       	adc	r13, r1
    3e1c:	aa 23       	and	r26, r26
    3e1e:	19 f0       	breq	.+6      	; 0x3e26 <dtoa_prf+0x116>
    3e20:	f6 01       	movw	r30, r12
    3e22:	a1 93       	st	Z+, r26
    3e24:	6f 01       	movw	r12, r30
    3e26:	f6 01       	movw	r30, r12
    3e28:	31 96       	adiw	r30, 0x01	; 1
    3e2a:	e2 fe       	sbrs	r14, 2
    3e2c:	08 c0       	rjmp	.+16     	; 0x3e3e <dtoa_prf+0x12e>
    3e2e:	89 e4       	ldi	r24, 0x49	; 73
    3e30:	d6 01       	movw	r26, r12
    3e32:	8c 93       	st	X, r24
    3e34:	8e e4       	ldi	r24, 0x4E	; 78
    3e36:	11 96       	adiw	r26, 0x01	; 1
    3e38:	8c 93       	st	X, r24
    3e3a:	86 e4       	ldi	r24, 0x46	; 70
    3e3c:	07 c0       	rjmp	.+14     	; 0x3e4c <dtoa_prf+0x13c>
    3e3e:	89 e6       	ldi	r24, 0x69	; 105
    3e40:	d6 01       	movw	r26, r12
    3e42:	8c 93       	st	X, r24
    3e44:	8e e6       	ldi	r24, 0x6E	; 110
    3e46:	11 96       	adiw	r26, 0x01	; 1
    3e48:	8c 93       	st	X, r24
    3e4a:	86 e6       	ldi	r24, 0x66	; 102
    3e4c:	81 83       	std	Z+1, r24	; 0x01
    3e4e:	32 96       	adiw	r30, 0x02	; 2
    3e50:	df 01       	movw	r26, r30
    3e52:	89 2f       	mov	r24, r25
    3e54:	20 e2       	ldi	r18, 0x20	; 32
    3e56:	02 c0       	rjmp	.+4      	; 0x3e5c <dtoa_prf+0x14c>
    3e58:	2d 93       	st	X+, r18
    3e5a:	81 50       	subi	r24, 0x01	; 1
    3e5c:	88 23       	and	r24, r24
    3e5e:	e1 f7       	brne	.-8      	; 0x3e58 <dtoa_prf+0x148>
    3e60:	e9 0f       	add	r30, r25
    3e62:	f1 1d       	adc	r31, r1
    3e64:	10 82       	st	Z, r1
    3e66:	2e ef       	ldi	r18, 0xFE	; 254
    3e68:	3f ef       	ldi	r19, 0xFF	; 255
    3e6a:	af c0       	rjmp	.+350    	; 0x3fca <dtoa_prf+0x2ba>
    3e6c:	16 16       	cp	r1, r22
    3e6e:	17 06       	cpc	r1, r23
    3e70:	1c f0       	brlt	.+6      	; 0x3e78 <dtoa_prf+0x168>
    3e72:	41 e0       	ldi	r20, 0x01	; 1
    3e74:	50 e0       	ldi	r21, 0x00	; 0
    3e76:	03 c0       	rjmp	.+6      	; 0x3e7e <dtoa_prf+0x16e>
    3e78:	ab 01       	movw	r20, r22
    3e7a:	4f 5f       	subi	r20, 0xFF	; 255
    3e7c:	5f 4f       	sbci	r21, 0xFF	; 255
    3e7e:	aa 20       	and	r10, r10
    3e80:	19 f4       	brne	.+6      	; 0x3e88 <dtoa_prf+0x178>
    3e82:	80 e0       	ldi	r24, 0x00	; 0
    3e84:	90 e0       	ldi	r25, 0x00	; 0
    3e86:	03 c0       	rjmp	.+6      	; 0x3e8e <dtoa_prf+0x17e>
    3e88:	8a 2d       	mov	r24, r10
    3e8a:	90 e0       	ldi	r25, 0x00	; 0
    3e8c:	01 96       	adiw	r24, 0x01	; 1
    3e8e:	20 e0       	ldi	r18, 0x00	; 0
    3e90:	30 e0       	ldi	r19, 0x00	; 0
    3e92:	aa 23       	and	r26, r26
    3e94:	11 f0       	breq	.+4      	; 0x3e9a <dtoa_prf+0x18a>
    3e96:	21 e0       	ldi	r18, 0x01	; 1
    3e98:	30 e0       	ldi	r19, 0x00	; 0
    3e9a:	24 0f       	add	r18, r20
    3e9c:	35 1f       	adc	r19, r21
    3e9e:	28 0f       	add	r18, r24
    3ea0:	39 1f       	adc	r19, r25
    3ea2:	81 2f       	mov	r24, r17
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	28 17       	cp	r18, r24
    3ea8:	39 07       	cpc	r19, r25
    3eaa:	14 f0       	brlt	.+4      	; 0x3eb0 <dtoa_prf+0x1a0>
    3eac:	20 e0       	ldi	r18, 0x00	; 0
    3eae:	02 c0       	rjmp	.+4      	; 0x3eb4 <dtoa_prf+0x1a4>
    3eb0:	12 1b       	sub	r17, r18
    3eb2:	21 2f       	mov	r18, r17
    3eb4:	4b 2d       	mov	r20, r11
    3eb6:	50 e0       	ldi	r21, 0x00	; 0
    3eb8:	ca 01       	movw	r24, r20
    3eba:	80 71       	andi	r24, 0x10	; 16
    3ebc:	90 70       	andi	r25, 0x00	; 0
    3ebe:	b4 fc       	sbrc	r11, 4
    3ec0:	0d c0       	rjmp	.+26     	; 0x3edc <dtoa_prf+0x1cc>
    3ec2:	b3 fc       	sbrc	r11, 3
    3ec4:	0b c0       	rjmp	.+22     	; 0x3edc <dtoa_prf+0x1cc>
    3ec6:	f6 01       	movw	r30, r12
    3ec8:	32 2f       	mov	r19, r18
    3eca:	40 e2       	ldi	r20, 0x20	; 32
    3ecc:	02 c0       	rjmp	.+4      	; 0x3ed2 <dtoa_prf+0x1c2>
    3ece:	41 93       	st	Z+, r20
    3ed0:	31 50       	subi	r19, 0x01	; 1
    3ed2:	33 23       	and	r19, r19
    3ed4:	e1 f7       	brne	.-8      	; 0x3ece <dtoa_prf+0x1be>
    3ed6:	c2 0e       	add	r12, r18
    3ed8:	d1 1c       	adc	r13, r1
    3eda:	01 c0       	rjmp	.+2      	; 0x3ede <dtoa_prf+0x1ce>
    3edc:	32 2f       	mov	r19, r18
    3ede:	aa 23       	and	r26, r26
    3ee0:	19 f0       	breq	.+6      	; 0x3ee8 <dtoa_prf+0x1d8>
    3ee2:	f6 01       	movw	r30, r12
    3ee4:	a1 93       	st	Z+, r26
    3ee6:	6f 01       	movw	r12, r30
    3ee8:	89 2b       	or	r24, r25
    3eea:	11 f0       	breq	.+4      	; 0x3ef0 <dtoa_prf+0x1e0>
    3eec:	13 2f       	mov	r17, r19
    3eee:	0a c0       	rjmp	.+20     	; 0x3f04 <dtoa_prf+0x1f4>
    3ef0:	f6 01       	movw	r30, r12
    3ef2:	13 2f       	mov	r17, r19
    3ef4:	80 e3       	ldi	r24, 0x30	; 48
    3ef6:	02 c0       	rjmp	.+4      	; 0x3efc <dtoa_prf+0x1ec>
    3ef8:	81 93       	st	Z+, r24
    3efa:	11 50       	subi	r17, 0x01	; 1
    3efc:	11 23       	and	r17, r17
    3efe:	e1 f7       	brne	.-8      	; 0x3ef8 <dtoa_prf+0x1e8>
    3f00:	c3 0e       	add	r12, r19
    3f02:	d1 1c       	adc	r13, r1
    3f04:	09 2d       	mov	r16, r9
    3f06:	06 0f       	add	r16, r22
    3f08:	ba 80       	ldd	r11, Y+2	; 0x02
    3f0a:	90 e1       	ldi	r25, 0x10	; 16
    3f0c:	89 2e       	mov	r8, r25
    3f0e:	91 2c       	mov	r9, r1
    3f10:	8e 20       	and	r8, r14
    3f12:	9f 20       	and	r9, r15
    3f14:	e4 fe       	sbrs	r14, 4
    3f16:	04 c0       	rjmp	.+8      	; 0x3f20 <dtoa_prf+0x210>
    3f18:	f1 e3       	ldi	r31, 0x31	; 49
    3f1a:	bf 16       	cp	r11, r31
    3f1c:	09 f4       	brne	.+2      	; 0x3f20 <dtoa_prf+0x210>
    3f1e:	01 50       	subi	r16, 0x01	; 1
    3f20:	10 16       	cp	r1, r16
    3f22:	14 f0       	brlt	.+4      	; 0x3f28 <dtoa_prf+0x218>
    3f24:	01 e0       	ldi	r16, 0x01	; 1
    3f26:	03 c0       	rjmp	.+6      	; 0x3f2e <dtoa_prf+0x21e>
    3f28:	09 30       	cpi	r16, 0x09	; 9
    3f2a:	08 f0       	brcs	.+2      	; 0x3f2e <dtoa_prf+0x21e>
    3f2c:	08 e0       	ldi	r16, 0x08	; 8
    3f2e:	9b 01       	movw	r18, r22
    3f30:	77 ff       	sbrs	r23, 7
    3f32:	02 c0       	rjmp	.+4      	; 0x3f38 <dtoa_prf+0x228>
    3f34:	20 e0       	ldi	r18, 0x00	; 0
    3f36:	30 e0       	ldi	r19, 0x00	; 0
    3f38:	cb 01       	movw	r24, r22
    3f3a:	01 96       	adiw	r24, 0x01	; 1
    3f3c:	82 1b       	sub	r24, r18
    3f3e:	93 0b       	sbc	r25, r19
    3f40:	fe 01       	movw	r30, r28
    3f42:	31 96       	adiw	r30, 0x01	; 1
    3f44:	e8 0f       	add	r30, r24
    3f46:	f9 1f       	adc	r31, r25
    3f48:	8e e2       	ldi	r24, 0x2E	; 46
    3f4a:	f8 2e       	mov	r15, r24
    3f4c:	3b 01       	movw	r6, r22
    3f4e:	60 1a       	sub	r6, r16
    3f50:	71 08       	sbc	r7, r1
    3f52:	8a 2d       	mov	r24, r10
    3f54:	90 e0       	ldi	r25, 0x00	; 0
    3f56:	44 27       	eor	r20, r20
    3f58:	55 27       	eor	r21, r21
    3f5a:	48 1b       	sub	r20, r24
    3f5c:	59 0b       	sbc	r21, r25
    3f5e:	8f ef       	ldi	r24, 0xFF	; 255
    3f60:	2f 3f       	cpi	r18, 0xFF	; 255
    3f62:	38 07       	cpc	r19, r24
    3f64:	19 f4       	brne	.+6      	; 0x3f6c <dtoa_prf+0x25c>
    3f66:	d6 01       	movw	r26, r12
    3f68:	fd 92       	st	X+, r15
    3f6a:	6d 01       	movw	r12, r26
    3f6c:	62 17       	cp	r22, r18
    3f6e:	73 07       	cpc	r23, r19
    3f70:	2c f0       	brlt	.+10     	; 0x3f7c <dtoa_prf+0x26c>
    3f72:	62 16       	cp	r6, r18
    3f74:	73 06       	cpc	r7, r19
    3f76:	14 f4       	brge	.+4      	; 0x3f7c <dtoa_prf+0x26c>
    3f78:	80 81       	ld	r24, Z
    3f7a:	01 c0       	rjmp	.+2      	; 0x3f7e <dtoa_prf+0x26e>
    3f7c:	80 e3       	ldi	r24, 0x30	; 48
    3f7e:	21 50       	subi	r18, 0x01	; 1
    3f80:	30 40       	sbci	r19, 0x00	; 0
    3f82:	31 96       	adiw	r30, 0x01	; 1
    3f84:	24 17       	cp	r18, r20
    3f86:	35 07       	cpc	r19, r21
    3f88:	24 f0       	brlt	.+8      	; 0x3f92 <dtoa_prf+0x282>
    3f8a:	d6 01       	movw	r26, r12
    3f8c:	8d 93       	st	X+, r24
    3f8e:	6d 01       	movw	r12, r26
    3f90:	e6 cf       	rjmp	.-52     	; 0x3f5e <dtoa_prf+0x24e>
    3f92:	26 17       	cp	r18, r22
    3f94:	37 07       	cpc	r19, r23
    3f96:	49 f4       	brne	.+18     	; 0x3faa <dtoa_prf+0x29a>
    3f98:	b5 e3       	ldi	r27, 0x35	; 53
    3f9a:	bb 15       	cp	r27, r11
    3f9c:	28 f0       	brcs	.+10     	; 0x3fa8 <dtoa_prf+0x298>
    3f9e:	bb 16       	cp	r11, r27
    3fa0:	21 f4       	brne	.+8      	; 0x3faa <dtoa_prf+0x29a>
    3fa2:	81 14       	cp	r8, r1
    3fa4:	91 04       	cpc	r9, r1
    3fa6:	09 f4       	brne	.+2      	; 0x3faa <dtoa_prf+0x29a>
    3fa8:	81 e3       	ldi	r24, 0x31	; 49
    3faa:	f6 01       	movw	r30, r12
    3fac:	81 93       	st	Z+, r24
    3fae:	d6 01       	movw	r26, r12
    3fb0:	81 2f       	mov	r24, r17
    3fb2:	90 e2       	ldi	r25, 0x20	; 32
    3fb4:	02 c0       	rjmp	.+4      	; 0x3fba <dtoa_prf+0x2aa>
    3fb6:	9c 93       	st	X, r25
    3fb8:	81 50       	subi	r24, 0x01	; 1
    3fba:	11 96       	adiw	r26, 0x01	; 1
    3fbc:	88 23       	and	r24, r24
    3fbe:	d9 f7       	brne	.-10     	; 0x3fb6 <dtoa_prf+0x2a6>
    3fc0:	e1 0f       	add	r30, r17
    3fc2:	f1 1d       	adc	r31, r1
    3fc4:	10 82       	st	Z, r1
    3fc6:	20 e0       	ldi	r18, 0x00	; 0
    3fc8:	30 e0       	ldi	r19, 0x00	; 0
    3fca:	c9 01       	movw	r24, r18
    3fcc:	29 96       	adiw	r28, 0x09	; 9
    3fce:	ee e0       	ldi	r30, 0x0E	; 14
    3fd0:	0c 94 23 1e 	jmp	0x3c46	; 0x3c46 <__epilogue_restores__+0x8>

00003fd4 <__ftoa_engine>:
    3fd4:	28 30       	cpi	r18, 0x08	; 8
    3fd6:	08 f0       	brcs	.+2      	; 0x3fda <__ftoa_engine+0x6>
    3fd8:	27 e0       	ldi	r18, 0x07	; 7
    3fda:	33 27       	eor	r19, r19
    3fdc:	da 01       	movw	r26, r20
    3fde:	99 0f       	add	r25, r25
    3fe0:	31 1d       	adc	r19, r1
    3fe2:	87 fd       	sbrc	r24, 7
    3fe4:	91 60       	ori	r25, 0x01	; 1
    3fe6:	00 96       	adiw	r24, 0x00	; 0
    3fe8:	61 05       	cpc	r22, r1
    3fea:	71 05       	cpc	r23, r1
    3fec:	39 f4       	brne	.+14     	; 0x3ffc <__ftoa_engine+0x28>
    3fee:	32 60       	ori	r19, 0x02	; 2
    3ff0:	2e 5f       	subi	r18, 0xFE	; 254
    3ff2:	3d 93       	st	X+, r19
    3ff4:	30 e3       	ldi	r19, 0x30	; 48
    3ff6:	2a 95       	dec	r18
    3ff8:	e1 f7       	brne	.-8      	; 0x3ff2 <__ftoa_engine+0x1e>
    3ffa:	08 95       	ret
    3ffc:	9f 3f       	cpi	r25, 0xFF	; 255
    3ffe:	30 f0       	brcs	.+12     	; 0x400c <__ftoa_engine+0x38>
    4000:	80 38       	cpi	r24, 0x80	; 128
    4002:	71 05       	cpc	r23, r1
    4004:	61 05       	cpc	r22, r1
    4006:	09 f0       	breq	.+2      	; 0x400a <__ftoa_engine+0x36>
    4008:	3c 5f       	subi	r19, 0xFC	; 252
    400a:	3c 5f       	subi	r19, 0xFC	; 252
    400c:	3d 93       	st	X+, r19
    400e:	91 30       	cpi	r25, 0x01	; 1
    4010:	08 f0       	brcs	.+2      	; 0x4014 <__ftoa_engine+0x40>
    4012:	80 68       	ori	r24, 0x80	; 128
    4014:	91 1d       	adc	r25, r1
    4016:	df 93       	push	r29
    4018:	cf 93       	push	r28
    401a:	1f 93       	push	r17
    401c:	0f 93       	push	r16
    401e:	ff 92       	push	r15
    4020:	ef 92       	push	r14
    4022:	19 2f       	mov	r17, r25
    4024:	98 7f       	andi	r25, 0xF8	; 248
    4026:	96 95       	lsr	r25
    4028:	e9 2f       	mov	r30, r25
    402a:	96 95       	lsr	r25
    402c:	96 95       	lsr	r25
    402e:	e9 0f       	add	r30, r25
    4030:	ff 27       	eor	r31, r31
    4032:	e2 55       	subi	r30, 0x52	; 82
    4034:	ff 4f       	sbci	r31, 0xFF	; 255
    4036:	99 27       	eor	r25, r25
    4038:	33 27       	eor	r19, r19
    403a:	ee 24       	eor	r14, r14
    403c:	ff 24       	eor	r15, r15
    403e:	a7 01       	movw	r20, r14
    4040:	e7 01       	movw	r28, r14
    4042:	05 90       	lpm	r0, Z+
    4044:	08 94       	sec
    4046:	07 94       	ror	r0
    4048:	28 f4       	brcc	.+10     	; 0x4054 <__ftoa_engine+0x80>
    404a:	36 0f       	add	r19, r22
    404c:	e7 1e       	adc	r14, r23
    404e:	f8 1e       	adc	r15, r24
    4050:	49 1f       	adc	r20, r25
    4052:	51 1d       	adc	r21, r1
    4054:	66 0f       	add	r22, r22
    4056:	77 1f       	adc	r23, r23
    4058:	88 1f       	adc	r24, r24
    405a:	99 1f       	adc	r25, r25
    405c:	06 94       	lsr	r0
    405e:	a1 f7       	brne	.-24     	; 0x4048 <__ftoa_engine+0x74>
    4060:	05 90       	lpm	r0, Z+
    4062:	07 94       	ror	r0
    4064:	28 f4       	brcc	.+10     	; 0x4070 <__ftoa_engine+0x9c>
    4066:	e7 0e       	add	r14, r23
    4068:	f8 1e       	adc	r15, r24
    406a:	49 1f       	adc	r20, r25
    406c:	56 1f       	adc	r21, r22
    406e:	c1 1d       	adc	r28, r1
    4070:	77 0f       	add	r23, r23
    4072:	88 1f       	adc	r24, r24
    4074:	99 1f       	adc	r25, r25
    4076:	66 1f       	adc	r22, r22
    4078:	06 94       	lsr	r0
    407a:	a1 f7       	brne	.-24     	; 0x4064 <__ftoa_engine+0x90>
    407c:	05 90       	lpm	r0, Z+
    407e:	07 94       	ror	r0
    4080:	28 f4       	brcc	.+10     	; 0x408c <__ftoa_engine+0xb8>
    4082:	f8 0e       	add	r15, r24
    4084:	49 1f       	adc	r20, r25
    4086:	56 1f       	adc	r21, r22
    4088:	c7 1f       	adc	r28, r23
    408a:	d1 1d       	adc	r29, r1
    408c:	88 0f       	add	r24, r24
    408e:	99 1f       	adc	r25, r25
    4090:	66 1f       	adc	r22, r22
    4092:	77 1f       	adc	r23, r23
    4094:	06 94       	lsr	r0
    4096:	a1 f7       	brne	.-24     	; 0x4080 <__ftoa_engine+0xac>
    4098:	05 90       	lpm	r0, Z+
    409a:	07 94       	ror	r0
    409c:	20 f4       	brcc	.+8      	; 0x40a6 <__ftoa_engine+0xd2>
    409e:	49 0f       	add	r20, r25
    40a0:	56 1f       	adc	r21, r22
    40a2:	c7 1f       	adc	r28, r23
    40a4:	d8 1f       	adc	r29, r24
    40a6:	99 0f       	add	r25, r25
    40a8:	66 1f       	adc	r22, r22
    40aa:	77 1f       	adc	r23, r23
    40ac:	88 1f       	adc	r24, r24
    40ae:	06 94       	lsr	r0
    40b0:	a9 f7       	brne	.-22     	; 0x409c <__ftoa_engine+0xc8>
    40b2:	84 91       	lpm	r24, Z+
    40b4:	10 95       	com	r17
    40b6:	17 70       	andi	r17, 0x07	; 7
    40b8:	41 f0       	breq	.+16     	; 0x40ca <__ftoa_engine+0xf6>
    40ba:	d6 95       	lsr	r29
    40bc:	c7 95       	ror	r28
    40be:	57 95       	ror	r21
    40c0:	47 95       	ror	r20
    40c2:	f7 94       	ror	r15
    40c4:	e7 94       	ror	r14
    40c6:	1a 95       	dec	r17
    40c8:	c1 f7       	brne	.-16     	; 0x40ba <__ftoa_engine+0xe6>
    40ca:	e4 e5       	ldi	r30, 0x54	; 84
    40cc:	f0 e0       	ldi	r31, 0x00	; 0
    40ce:	68 94       	set
    40d0:	15 90       	lpm	r1, Z+
    40d2:	15 91       	lpm	r17, Z+
    40d4:	35 91       	lpm	r19, Z+
    40d6:	65 91       	lpm	r22, Z+
    40d8:	95 91       	lpm	r25, Z+
    40da:	05 90       	lpm	r0, Z+
    40dc:	7f e2       	ldi	r23, 0x2F	; 47
    40de:	73 95       	inc	r23
    40e0:	e1 18       	sub	r14, r1
    40e2:	f1 0a       	sbc	r15, r17
    40e4:	43 0b       	sbc	r20, r19
    40e6:	56 0b       	sbc	r21, r22
    40e8:	c9 0b       	sbc	r28, r25
    40ea:	d0 09       	sbc	r29, r0
    40ec:	c0 f7       	brcc	.-16     	; 0x40de <__ftoa_engine+0x10a>
    40ee:	e1 0c       	add	r14, r1
    40f0:	f1 1e       	adc	r15, r17
    40f2:	43 1f       	adc	r20, r19
    40f4:	56 1f       	adc	r21, r22
    40f6:	c9 1f       	adc	r28, r25
    40f8:	d0 1d       	adc	r29, r0
    40fa:	7e f4       	brtc	.+30     	; 0x411a <__ftoa_engine+0x146>
    40fc:	70 33       	cpi	r23, 0x30	; 48
    40fe:	11 f4       	brne	.+4      	; 0x4104 <__ftoa_engine+0x130>
    4100:	8a 95       	dec	r24
    4102:	e6 cf       	rjmp	.-52     	; 0x40d0 <__ftoa_engine+0xfc>
    4104:	e8 94       	clt
    4106:	01 50       	subi	r16, 0x01	; 1
    4108:	30 f0       	brcs	.+12     	; 0x4116 <__ftoa_engine+0x142>
    410a:	08 0f       	add	r16, r24
    410c:	0a f4       	brpl	.+2      	; 0x4110 <__ftoa_engine+0x13c>
    410e:	00 27       	eor	r16, r16
    4110:	02 17       	cp	r16, r18
    4112:	08 f4       	brcc	.+2      	; 0x4116 <__ftoa_engine+0x142>
    4114:	20 2f       	mov	r18, r16
    4116:	23 95       	inc	r18
    4118:	02 2f       	mov	r16, r18
    411a:	7a 33       	cpi	r23, 0x3A	; 58
    411c:	28 f0       	brcs	.+10     	; 0x4128 <__ftoa_engine+0x154>
    411e:	79 e3       	ldi	r23, 0x39	; 57
    4120:	7d 93       	st	X+, r23
    4122:	2a 95       	dec	r18
    4124:	e9 f7       	brne	.-6      	; 0x4120 <__ftoa_engine+0x14c>
    4126:	10 c0       	rjmp	.+32     	; 0x4148 <__ftoa_engine+0x174>
    4128:	7d 93       	st	X+, r23
    412a:	2a 95       	dec	r18
    412c:	89 f6       	brne	.-94     	; 0x40d0 <__ftoa_engine+0xfc>
    412e:	06 94       	lsr	r0
    4130:	97 95       	ror	r25
    4132:	67 95       	ror	r22
    4134:	37 95       	ror	r19
    4136:	17 95       	ror	r17
    4138:	17 94       	ror	r1
    413a:	e1 18       	sub	r14, r1
    413c:	f1 0a       	sbc	r15, r17
    413e:	43 0b       	sbc	r20, r19
    4140:	56 0b       	sbc	r21, r22
    4142:	c9 0b       	sbc	r28, r25
    4144:	d0 09       	sbc	r29, r0
    4146:	98 f0       	brcs	.+38     	; 0x416e <__ftoa_engine+0x19a>
    4148:	23 95       	inc	r18
    414a:	7e 91       	ld	r23, -X
    414c:	73 95       	inc	r23
    414e:	7a 33       	cpi	r23, 0x3A	; 58
    4150:	08 f0       	brcs	.+2      	; 0x4154 <__ftoa_engine+0x180>
    4152:	70 e3       	ldi	r23, 0x30	; 48
    4154:	7c 93       	st	X, r23
    4156:	20 13       	cpse	r18, r16
    4158:	b8 f7       	brcc	.-18     	; 0x4148 <__ftoa_engine+0x174>
    415a:	7e 91       	ld	r23, -X
    415c:	70 61       	ori	r23, 0x10	; 16
    415e:	7d 93       	st	X+, r23
    4160:	30 f0       	brcs	.+12     	; 0x416e <__ftoa_engine+0x19a>
    4162:	83 95       	inc	r24
    4164:	71 e3       	ldi	r23, 0x31	; 49
    4166:	7d 93       	st	X+, r23
    4168:	70 e3       	ldi	r23, 0x30	; 48
    416a:	2a 95       	dec	r18
    416c:	e1 f7       	brne	.-8      	; 0x4166 <__ftoa_engine+0x192>
    416e:	11 24       	eor	r1, r1
    4170:	ef 90       	pop	r14
    4172:	ff 90       	pop	r15
    4174:	0f 91       	pop	r16
    4176:	1f 91       	pop	r17
    4178:	cf 91       	pop	r28
    417a:	df 91       	pop	r29
    417c:	99 27       	eor	r25, r25
    417e:	87 fd       	sbrc	r24, 7
    4180:	90 95       	com	r25
    4182:	08 95       	ret

00004184 <_exit>:
    4184:	f8 94       	cli

00004186 <__stop_program>:
    4186:	ff cf       	rjmp	.-2      	; 0x4186 <__stop_program>
